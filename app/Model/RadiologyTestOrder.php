<?php
/**
 * RadiologyTestOrder  model
 *
 * PHP 5
 *
 * @copyright     Copyright 2011 KloudData Inc.  (http://www.klouddata.com/)
 * @link          http://www.klouddata.com/
 * @package       RadiologyParameter Model
 * @since         CakePHP(tm) v 2.0
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 * @author        Pankaj wanjari
 * @functions 	 : Add test respective to patient
 */
class RadiologyTestOrder extends AppModel {

	public $name = 'RadiologyTestOrder';
	public $specific = true;
	//public $actsAs = array('Auditable');
	function __construct($id = false, $table = null, $ds = null) {
		if(empty($ds)){
        	$session = new cakeSession();
			$this->db_name =  $session->read('db_name');
	 	}else{
	 		$this->db_name =  $ds;
	 	}
		parent::__construct($id, $table, $ds);
	}
	function insertTestOrder($data=array(),$action='insert'){


		$session = new cakeSession();
		//implode test ids with seperator "|"
		//first remove all the existance instances of patient ID(trick to update the current record)
		//$this->deleteAll(array('patient_id'=> $data['RadiologyTestOrder']['patient_id']));
		$batchIdentifier = time(); //maintaining for grouping tests those at once .
		if(is_array($data['RadiologyTestOrder']['radiology_id'])){
			foreach($data['RadiologyTestOrder']['radiology_id'] as $labID){
					
				if(empty($data['RadiologyTestOrder']['id'])){
					$orderArr['created_by'] = $session->read('userid');
					$orderArr['create_time'] = date("Y-m-d H:i:s");
				}else{
					$this->id = $data['RadiologyTestOrder']['id'] ;
					$orderArr['modified_by'] = $session->read('userid');
					$orderArr['modify_time'] = date("Y-m-d H:i:s");
				}
				$orderArr['patient_id'] = $data['RadiologyTestOrder']['patient_id'];
				$orderArr['radiology_id'] = $labID;
				$orderArr['is_external'] = $data['RadiologyTestOrder']['is_external'];
				$orderArr['service_provider_id'] = $data['RadiologyTestOrder']['service_provider_id'];
				$orderArr['batch_identifier'] = $batchIdentifier;
				//new Fields
				$orderArr['status'] = $data["RadiologyTestOrder"]["status"];
				$orderArr['checkup'] = $data["RadiologyTestOrder"]["checkup"];
				$orderArr['xrayjacket'] = $data["RadiologyTestOrder"]["xrayjacket"];
				$orderArr['resultby'] = $data["RadiologyTestOrder"]["resultby"];


				//for assessment entry
				if(isset($data['RadiologyTestOrder']['from_assessment']) && !(empty($data['RadiologyTestOrder']['from_assessment'])))
					$orderArr['from_assessment'] = $data['RadiologyTestOrder']['from_assessment'];
				
				$result =  $this->save($orderArr);
				//generate lab id for each new test ordered
				$laboratoryToken->id ='';
				//create once
				if(!isset($radId) && empty($radId))
					$radOrderId =  $this->autoGeneratedRadID($this->id);
					
				$this->save(array('order_id'=>$radOrderId));
					
				$this->id  ='';
			}
		}else{
			return true ;
		}
			
		return $result ;
			
	}
	public function radDetails($patient_id=null){
	
		if(empty($patient_id)) return false ;
		$RadiologyTestOrder = Classregistry::init('RadiologyTestOrder');
		$RadiologyTestOrder->bindModel(array(
				'belongsTo' => array(
						'Radiology'=>array('type'=>'inner','foreignKey'=>'radiology_id' ),
						'Patient'=>array('foreignKey'=>'patient_id'),
						'User' =>array('foreignKey' => false,'conditions'=>array('User.id=Patient.doctor_id' )),
						'TariffAmount'=>array('foreignKey' => false,'conditions'=>
								array('TariffAmount.tariff_list_id=Radiology.tariff_list_id' ,'TariffAmount.tariff_standard_id=Patient.tariff_standard_id'))
				),
				'hasOne' => array(
						'RadiologyResult'=>array('foreignKey'=>'radiology_test_order_id')
				)),false);
			
		$radTestOrderData= $RadiologyTestOrder->find('all',array(
				'fields'=> array('RadiologyResult.result_publish_date','RadiologyResult.confirm_result','RadiologyTestOrder.id',
	    			'RadiologyTestOrder.patient_id','RadiologyTestOrder.create_time','RadiologyTestOrder.test_done','RadiologyTestOrder.amount','RadiologyTestOrder.paid_amount',
	    			'Radiology.name','TariffAmount.nabh_charges','TariffAmount.non_nabh_charges'),
				'conditions'=>array('RadiologyTestOrder.patient_id'=>$patient_id,'RadiologyTestOrder.is_deleted'=>0,
						'RadiologyTestOrder.from_assessment'=>0),
				'order' => array( 'RadiologyTestOrder.id' => 'asc' ),
				'group'=>'RadiologyTestOrder.id'));
			
		//pr($radTestOrderData);
			
		return $radTestOrderData ;
	}
	

	function insertTestOrder_orderset($data=array(),$action='insert'){
		$radiology = ClassRegistry::init('Radiology');
		$session = new cakeSession();
		$orderArr['created_by'] = $session->read('userid');
		for($i=0;$i<count($data['Radiology']['name']);$i++){

			if($data['Radiology']['name'][$i]!='0'){

				$batchidentifier = time(); //maintaining for grouping tests those at once .
				$RadCheck = $radiology->find('first',array('fields'=>array('id'),'conditions'=>array('name'=>$data['Radiology']['name'][$i],'is_orderset'=>1)));
				$result =  $this->saveAll(array('radiology_id'=>$data['Radiology']['id'][$i],'start_date'=>date('Y-m-d'),'patient_id'=>$data['Radiology']['patient_id'],'batch_identifier'=>$batchidentifier,'is_orderset'=>'1','created_by'=>$orderArr['created_by']));
				$lastinsid=$this->getInsertId();
				$radOrderId =  $this->autoGeneratedRadID($lastinsid);
				$this->updateAll(array('order_id' => "'$radOrderId'"),array('id' => $this->id));
					
				$this->id  ='';
				$radOrderId="";
				$lastinsid="";

			}
		}

			
		return true;

	}



	function insertRadioTestOrder($data=array(),$action='insert'){
		$session = new cakeSession();
		$Radiology = ClassRegistry::init('Radiology');
		$dateFormat  = new DateFormatComponent();
		$adverseEventTrigger=ClassRegistry::init('AdverseEventTrigger');
		$batchIdentifier = time(); //maintaining for grouping tests those at once .
		$orderArr['note_id'] = $session->read('noteId');
		if(empty($data['RadiologyTestOrder']['id'])){
			$orderArr['created_by'] = $session->read('userid');
			$orderArr['create_time'] = date("Y-m-d H:i:s");
			$RadioTest['created_by'] = $session->read('userid');
			$RadioTest['create_time'] = date("Y-m-d H:i:s");
		}else{
			$this->id = $data['RadiologyTestOrder']['id'] ;
			$orderArr['modified_by'] = $session->read('userid');
			$orderArr['modify_time'] = date("Y-m-d H:i:s");
			$RadioTest['modified_by'] = $session->read('userid');
			$RadioTest['modify_time'] = date("Y-m-d H:i:s");
		}
		$orderArr['location_id']    = $session->read('locationid');
		$orderArr['patient_id'] = $data['RadiologyTestOrder']['patient_id'];
		if(!empty($data['RadiologyTestOrder']['rad_id'])){
			$radId=$data['RadiologyTestOrder']['rad_id'];
		}else{
			$radId=$data['RadiologyTestOrder']['toTest'];
		}
		$orderArr['radiology_id'] = $radId;
		
		$radId=trim($data['RadiologyTestOrder']['id']);
		if(!empty($radId)){
		$orderArr['id'] = $data['RadiologyTestOrder']['id'] ;
		}else{
			//$orderArr['id'] =$radId;
		}
		$orderArr['is_external'] = $data['RadiologyTestOrder']['is_external'];
		$orderArr['order_id'] = $data['RadiologyTestOrder']['order_id'];
		$orderArr['service_provider_id'] = $data['RadiologyTestOrder']['service_provider_id'];
		$orderArr['relevant_clinical_info'] = $data['RadiologyTestOrder']['relevant_clinical_info'];
		$orderArr['primary_care_pro'] = $data['RadiologyTestOrder']['primary_care_pro'];
		$orderArr['is_procedure'] = $data['RadiologyTestOrder']['is_procedure'];
		$orderArr['batch_identifier'] = $batchIdentifier;
		$orderArr['resultby'] = $data["RadiologyTestOrder"]["resultby"];
		$orderArr['additional_notes'] = $data["RadiologyTestOrder"]["additional_notes"];
		$orderArr['radiology_order'] = $data["RadiologyTestOrder"]["radiology_order"];
		$orderArr['radiology_order_date'] = $dateFormat->formatDate2STD($data["RadiologyTestOrder"]["radiology_order_date"],Configure::read('date_format'));
		//$orderArr['start_date'] = $dateFormat->formatDate2STD($data['RadiologyTestOrder']['start_date'],Configure::read('date_format'));
			
		//aditya
		if(!empty($data['RadiologyTestOrder']['patient_order_id'])){
			$RadioTest['name']=$data['Radiology']['name'];
		}
		else{

			$RadioTest['name'] = $data["RadiologyTestOrder"]["testname"];
		}
		$RadioTest['test_code'] = $data["RadiologyTestOrder"]["testcode"];
		$RadioTest['lonic_code'] = $data["RadiologyTestOrder"]["lonic_code"];
		$RadioTest['sct_concept_id'] = $data["RadiologyTestOrder"]["sct_concept_id"];
		$RadioTest['cpt_code'] = $data["RadiologyTestOrder"]["cpt_code"];
		$RadioTest['location_id'] = $session->read('locationid');

		
		//for assessment entry
		if(isset($data['RadiologyTestOrder']['from_assessment']) && !(empty($data['RadiologyTestOrder']['from_assessment'])))
			$orderArr['from_assessment'] = $data['RadiologyTestOrder']['from_assessment'];
		if(empty($orderArr['radiology_id'])){//gaurav b4 deployment
			$RadioCheck = $Radiology->find('first',array('fields'=>array('id'),'conditions'=>array('cpt_code'=>$RadioTest['cpt_code'],'name'=>$RadioTest['name'])));
			$orderArr['radiology_id'] = $RadioCheck['Radiology']['id'];
		}
			
		if(empty($orderArr['radiology_id'])){
			$radid =	$Radiology->find('first',array('fields'=>array('id','cpt_code','sct_concept_id','lonic_code'),'conditions'=>array('cpt_code'=>$data["RadiologyTestOrder"]["cpt_code"])));
			$orderArr['radiology_id'] = $radid['Radiology']['id'];
		}

			
		//create once
		if(empty($this->id)){
			$orderArr['order_id'] =  $this->autoGeneratedRadID();

			//$this->saveAll(array('order_id'=>$radOrderId));
		}
		if(!empty($radid['Radiology']['id'])){
			$data['RadiologyTestOrder']['radiology_id']=$radid['Radiology']['id'];
		}else{
			$data['RadiologyTestOrder']['radiology_id']=$orderArr['radiology_id'];
		}
		
		$data['RadiologyTestOrder']['order_id']=$orderArr['order_id'];
		$data['RadiologyTestOrder']['create_time']=date("Y-m-d H:i:s");
		if(!empty($data['RadiologyTestOrder']['patient_order_id'])){
			$getIdOfRadiology=$Radiology->find('first',array('fields'=>array('id','cpt_code'),'conditions'=>array('name'=>$data['RadiologyTestOrder']['name'])));
			$data['RadiologyTestOrder']['radiology_id']=$data['RadiologyTestOrder']['radiology_id'];
			$data['RadiologyTestOrder']['lonic_code']=$getIdOfRadiology['Radiology']['cpt_code'];
			$data['RadiologyTestOrder']['radiology_order_date']=date('Y-m-d');
			$data['RadiologyTestOrder']['order_id']=$orderArr['order_id'];
			$checkForUpdate=$this->find('first',array('fields'=>array('id'),'conditions'=>array('radiology_id'=>$data['RadiologyTestOrder']['radiology_id'],
					'patient_id'=>$data['RadiologyTestOrder']['patient_id'])));
			if(empty($checkForUpdate)){
				$result =  $this->saveAll($data);
				$dbState= 'save';

			}
			else{
				$this->updateAll(array('patient_id'=>"'".$data['RadiologyTestOrder']['patient_id']."'",'patient_order_id'=>"'".$data['RadiologyTestOrder']['patient_order_id']."'",
						'collected_date'=>"'".$data['RadiologyTestOrder']['collected_date']."'",
						'note_id'=> $session->read('noteId'),'collection_priority'=>"'".$data['RadiologyTestOrder']['collection_priority']."'",'frequency_r'=>"'".$data['RadiologyTestOrder']['frequency_r']."'",
						'order_future_visit'=>"'".$data['RadiologyTestOrder']['order_future_visit']."'",'duration_l'=>"'".$data['RadiologyTestOrder']['duration_l']."'",
						'duration_unit'=>"'".$data['RadiologyTestOrder']['duration_unit']."'",'reason_exam'=>"'".$data['RadiologyTestOrder']['reason_exam']."'",
						'reason_exam_instruction'=>"'".$data['RadiologyTestOrder']['reason_exam_instruction']."'",'Pregnant'=>"'".$data['RadiologyTestOrder']['Pregnant']."'",
						'additional_notes'=>"'".$data['RadiologyTestOrder']['additional_notes']."'",'special_instruction'=>"'".$data['RadiologyTestOrder']['special_instruction']."'",'is_procedure'=>"'".$data['RadiologyTestOrder']['is_procedure']."'"
						,'modify_time'=>"'".date("Y-m-d H:i:s")."'"),
						array('patient_order_id'=>$data['RadiologyTestOrder']['patient_order_id']));
				$dbState= 'update';
			}
		}
		else{

			$result =  $this->saveAll($orderArr);
		}
		$this->id  ='';
		return $dbState;
	}
	
	
	function insertRadioTestOrder_orderset($data=array(),$action='insert'){
		$session = new cakeSession();
		$Radiology = ClassRegistry::init('Radiology');
		$dateFormat  = new DateFormatComponent();
		$adverseEventTrigger=ClassRegistry::init('AdverseEventTrigger');
		$batchIdentifier = time(); //maintaining for grouping tests those at once .
		$orderArr['note_id'] = $session->read('noteId');
		if(empty($data['RadiologyTestOrder']['id'])){
			$orderArr['created_by'] = $session->read('userid');
			$orderArr['create_time'] = date("Y-m-d H:i:s");
			$RadioTest['created_by'] = $session->read('userid');
			$RadioTest['create_time'] = date("Y-m-d H:i:s");
		}else{
			$this->id = $data['RadiologyTestOrder']['id'] ;
			$orderArr['modified_by'] = $session->read('userid');
			$orderArr['modify_time'] = date("Y-m-d H:i:s");
			$RadioTest['modified_by'] = $session->read('userid');
			$RadioTest['modify_time'] = date("Y-m-d H:i:s");
		}
		$orderArr['location_id']    = $session->read('locationid');
		$orderArr['patient_id'] = $data['RadiologyTestOrder']['patient_id'];
		if(!empty($data['RadiologyTestOrder']['rad_id'])){
			$radId=$data['RadiologyTestOrder']['rad_id'];
		}else{
			$radId=$data['RadiologyTestOrder']['toTest'];
		}
		$orderArr['radiology_id'] = $radId;
	
		$radId=trim($data['RadiologyTestOrder']['id']);
		if(!empty($radId)){
			$orderArr['id'] = $data['RadiologyTestOrder']['id'] ;
		}else{
			//$orderArr['id'] =$radId;
		}
		$orderArr['is_external'] = $data['RadiologyTestOrder']['is_external'];
		$orderArr['order_id'] = $data['RadiologyTestOrder']['order_id'];
		$orderArr['service_provider_id'] = $data['RadiologyTestOrder']['service_provider_id'];
		$orderArr['relevant_clinical_info'] = $data['RadiologyTestOrder']['relevant_clinical_info'];
		$orderArr['primary_care_pro'] = $data['RadiologyTestOrder']['primary_care_pro'];
		$orderArr['is_procedure'] = $data['RadiologyTestOrder']['is_procedure'];
		$orderArr['batch_identifier'] = $batchIdentifier;
		$orderArr['resultby'] = $data["RadiologyTestOrder"]["resultby"];
		$orderArr['additional_notes'] = $data["RadiologyTestOrder"]["additional_notes"];
		$orderArr['radiology_order'] = $data["RadiologyTestOrder"]["radiology_order"];
		$orderArr['radiology_order_date'] = $dateFormat->formatDate2STD($data["RadiologyTestOrder"]["radiology_order_date"],Configure::read('date_format'));
		//$orderArr['start_date'] = $dateFormat->formatDate2STD($data['RadiologyTestOrder']['start_date'],Configure::read('date_format'));
			
		//aditya
		if(!empty($data['RadiologyTestOrder']['patient_order_id'])){
			$RadioTest['name']=$data['Radiology']['name'];
		}
		else{
	
			$RadioTest['name'] = $data["RadiologyTestOrder"]["testname"];
		}
		$RadioTest['test_code'] = $data["RadiologyTestOrder"]["testcode"];
		$RadioTest['lonic_code'] = $data["RadiologyTestOrder"]["lonic_code"];
		$RadioTest['sct_concept_id'] = $data["RadiologyTestOrder"]["sct_concept_id"];
		$RadioTest['cpt_code'] = $data["RadiologyTestOrder"]["cpt_code"];
		$RadioTest['location_id'] = $session->read('locationid');
	
	
		//for assessment entry
		if(isset($data['RadiologyTestOrder']['from_assessment']) && !(empty($data['RadiologyTestOrder']['from_assessment'])))
			$orderArr['from_assessment'] = $data['RadiologyTestOrder']['from_assessment'];
		if(empty($orderArr['radiology_id'])){//gaurav b4 deployment
			$RadioCheck = $Radiology->find('first',array('fields'=>array('id'),'conditions'=>array('cpt_code'=>$RadioTest['cpt_code'],'name'=>$RadioTest['name'])));
			$orderArr['radiology_id'] = $RadioCheck['Radiology']['id'];
		}
			
		if(empty($orderArr['radiology_id'])){
			$radid =	$Radiology->find('first',array('fields'=>array('id','cpt_code','sct_concept_id','lonic_code'),'conditions'=>array('cpt_code'=>$data["RadiologyTestOrder"]["cpt_code"])));
			$orderArr['radiology_id'] = $radid['Radiology']['id'];
		}
	
			
		//create once
		if(empty($this->id)){
			$orderArr['order_id'] =  $this->autoGeneratedRadID();
	
			//$this->saveAll(array('order_id'=>$radOrderId));
		}
		/*if(!empty($radid['Radiology']['id'])){
			$data['RadiologyTestOrder']['radiology_id']=$radid['Radiology']['id'];
		}else{
			$data['RadiologyTestOrder']['radiology_id']=$orderArr['radiology_id'];
		}*/
	
		$data['RadiologyTestOrder']['order_id']=$orderArr['order_id'];
		$data['RadiologyTestOrder']['create_time']=date("Y-m-d H:i:s");
		if(!empty($data['RadiologyTestOrder']['patient_order_id'])){
			$getIdOfRadiology=$Radiology->find('first',array('fields'=>array('id','cpt_code'),'conditions'=>array('name'=>$data['RadiologyTestOrder']['name'])));
			$data['RadiologyTestOrder']['radiology_id']=$data['RadiologyTestOrder']['radiology_id'];
			$data['RadiologyTestOrder']['lonic_code']=$getIdOfRadiology['Radiology']['cpt_code'];
			$data['RadiologyTestOrder']['radiology_order_date']=date('Y-m-d');
			$data['RadiologyTestOrder']['order_id']=$orderArr['order_id'];
			$checkForUpdate=$this->find('first',array('fields'=>array('id'),'conditions'=>array('radiology_id'=>$data['RadiologyTestOrder']['radiology_id'],
					'patient_id'=>$data['RadiologyTestOrder']['patient_id'])));
			
			
			if(empty($checkForUpdate)){
				$result =  $this->saveAll($data);
				$dbState= 'save';
	
			}
			else{
				$this->updateAll(array('patient_id'=>"'".$data['RadiologyTestOrder']['patient_id']."'",'patient_order_id'=>"'".$data['RadiologyTestOrder']['patient_order_id']."'",
						'collected_date'=>"'".$data['RadiologyTestOrder']['collected_date']."'",
						'note_id'=> $session->read('noteId'),'collection_priority'=>"'".$data['RadiologyTestOrder']['collection_priority']."'",'frequency_r'=>"'".$data['RadiologyTestOrder']['frequency_r']."'",
						'order_future_visit'=>"'".$data['RadiologyTestOrder']['order_future_visit']."'",'duration_l'=>"'".$data['RadiologyTestOrder']['duration_l']."'",
						'duration_unit'=>"'".$data['RadiologyTestOrder']['duration_unit']."'",'reason_exam'=>"'".$data['RadiologyTestOrder']['reason_exam']."'",
						'reason_exam_instruction'=>"'".$data['RadiologyTestOrder']['reason_exam_instruction']."'",'Pregnant'=>"'".$data['RadiologyTestOrder']['Pregnant']."'",
						'additional_notes'=>"'".$data['RadiologyTestOrder']['additional_notes']."'",'special_instruction'=>"'".$data['RadiologyTestOrder']['special_instruction']."'",'is_procedure'=>"'".$data['RadiologyTestOrder']['is_procedure']."'"
						,'modify_time'=>"'".date("Y-m-d H:i:s")."'"),
						array('patient_order_id'=>$data['RadiologyTestOrder']['patient_order_id']));
				$dbState= 'update';
			}
		}
		else{
	
			$result =  $this->saveAll($orderArr);
		}
		$this->id  ='';
		return $dbState;
	}


	/**
	 * Called after inserting lab data
	 *
	 * @param id:latest RadiologyTestOrder table ID
	 *
	 * @return lab ID
	 **/
	public function autoGeneratedRadID($id=null){
		//$patient_info=array('Patient'=>array('first_name'=>'Pankaj','admission_type'=>'IPD','location_id'=>1));
		$Location = ClassRegistry::init('Location');
		$session = new cakeSession();
		$count = $this->find('count',array('conditions'=>array('RadiologyTestOrder.create_time like'=> "%".date("Y-m-d")."%")));
		$count=$count+1;

		if($count==0){
			$count = "001" ;
		}else if($count < 10 ){
			$count = "00$count"  ;
		}else if($count >= 10 && $count <100){
			$count = "0$count"  ;
		}
		$month_array = array('A','B','C','D','E','F','G','H','I','J','K','L');
		//find the Hospital name.

		$Location->unbindModel(
				array('belongsTo' => array('City','State','Country'))
		);
		 
		#$hospital = $Location->read('Facility.name,Location.name',$session->read('locationid'));

		//creating patient ID
		$unique_id   = 'RAD';
		$facility = $session->read('facility');
		$location = $session->read('location');
		$unique_id  .= substr($facility,0,1); //first letter of the hospital name
		$unique_id  .= substr($location,0,2).$session->read('locationid');//first 2 letter of d location  // location id appended be'coz of same locations first word--gaurav
		$unique_id  .= date('y'); //year
		$unique_id  .= $month_array[date('n')-1];//first letter of month
		$unique_id  .= date('d');//day
		$unique_id .= $count;
		return strtoupper($unique_id) ;


	}

	//function to overwrite the paginator count '
	public function paginateCount($conditions = null, $recursive=0, $extra = array()) {
		
		//setting group element if $extra->group is set
		if(!empty($extra['group'])){
			$group=$extra['group'][0];
		} else{			
			$group =  array('RadiologyTestOrder.patient_id');
		}
		
		$rec = empty($extra['extra']['recursive']) ? $recursive : $extra['extra']['recursive'];
		return $this->find('count', array(
				'conditions' => $conditions,
				'fields'=>array('COUNT(DISTINCT(RadiologyTestOrder.patient_id)) as count'),
				'recursive' => $rec,
				'group'=>$group
		));
	}

	//function to remove entries after discharged date
	function deleteAfterDischargeRecords($date,$patient_id){
		if(empty($patient_id)) return ;
		$session = new CakeSession();
		$this->updateAll(array('is_deleted'=>1,'modified_by'=>$session->read('userid')),array("create_time > "=> $date ,'patient_id'=>$patient_id)) ;
	}
	function insertMinRad($data=array(),$noteId){//inserting rad from smart note
		$session = new CakeSession();
		//debug($data);exit;
		$orderArr['created_by'] = $session->read('userid');
		$orderArr['create_time'] = date("Y-m-d H:i:s");
		foreach($data as $key=>$saveRad){
			/******BOF-Mahalaxmi***/				
			if(!empty($noteId) && !empty($saveRad['RadiologyTestOrder']['patient_id']) && !empty($saveRad['RadiologyTestOrder']['rad_id']))
				$this->deleteAll(array('patient_id'=>$saveRad['RadiologyTestOrder']['patient_id'],'radiology_id'=>$saveRad['RadiologyTestOrder']['rad_id'],'note_id'=>$noteId,false)); //For Smart Note Lab order -Mahalaxmi
			/******EOF-Mahalaxmi***/
			$orderArr['note_id']=$noteId;
			$orderArr['radiology_id']=$saveRad['RadiologyTestOrder']['rad_id'];
			$orderArr['patient_id']=$saveRad['RadiologyTestOrder']['patient_id'];
			$orderArr['amount']=$saveRad['RadiologyTestOrder']['amount'];
			$orderArr['is_processed']=$saveRad['RadiologyTestOrder']['is_processed'];
			$orderArr['radiology_order_date']=date('Y-m-d H:i:s');
			//$orderArr['radiology_order_date']=date('Y-m-d H:i:s');
			$orderArr['order_id']= $this->autoGeneratedRadID();			
			//$radOrderId =  $this->autoGeneratedRadID();
			$this->save($orderArr);
			unset($data[$key]);
			//unset($orderArr);
			$this->id = '';
		}
		return ;
	}
	
	//BOF for sum of total amount, return patient wise total charges by amit jain
		function getPatientWiseCharges($patientId=array()){
			$session     = new cakeSession();
			if(!$patientId) return false ;
			$amountDetails = $this->find(all,array('conditions'=>array('is_deleted'=>'0','location_id'=>$session->read('locationid'),'patient_id'=>$patientId),
					'fields'=>array('sum(amount) AS totalAmount','patient_id'),'group'=>array("patient_id")));
			return $amountDetails ;
		}
	//EOF
		//BOF for sum of paid amount and discount amount, return patient wise service name by amit jain
		function getServiceWiseCharges($patientId=null,$date=null,$userId=null){
			$session     = new cakeSession();
			if(!$patientId) return false ;
			$serviceCategoryObj = ClassRegistry::init('ServiceCategory');
			$serviceId = $serviceCategoryObj->getServiceGroupId('radiologyservices',$session->read('locationid'));
			$this->bindModel(array(
					'belongsTo' => array(
							'Radiology' =>array('foreignKey' => false,'conditions'=>array('RadiologyTestOrder.radiology_id=Radiology.id')),
							'ServiceCategory' =>array('foreignKey' => false,'conditions'=>array('ServiceCategory.id'=>$serviceId)),
							'Billing' =>array('foreignKey' => false,'conditions'=>array('RadiologyTestOrder.billing_id=Billing.id')))),false);
			$amountDetails = $this->find(all,array('conditions'=>array('RadiologyTestOrder.is_deleted'=>'0','RadiologyTestOrder.location_id'=>$session->read('locationid'),
					'RadiologyTestOrder.patient_id'=>$patientId,'RadiologyTestOrder.paid_amount NOT'=>'0','DATE_FORMAT(Billing.date,"%Y-%m-%d")'=>$date,
					'Billing.created_by'=>$userId,'Billing.mode_of_payment'=>'Cash'),
					'fields'=>array('RadiologyTestOrder.paid_amount','RadiologyTestOrder.discount','Radiology.name','ServiceCategory.name')));
			return $amountDetails ;
		}
		//EOF
		
		/**
		 * Function getRadiologies
		 * All services of according to the conditions such as all services of specific patient_id
		 * @param unknown_type $superBillId
		 * @param unknown_type $tariffStandardId
		 * @return multitype:
		 * Pooja gupta
		 */
		public function getRadiologies($condition=array(),$superBillId=NULL){
				
			if($superBillId){
				$this->bindModel(array(
						'belongsTo' => array(
								'Radiology'=>array('foreignKey'=>false,'type'=>'INNER','conditions'=>array('Radiology.id=RadiologyTestOrder.radiology_id')),
								'TariffList' =>array( 'foreignKey'=>false,'type'=>'INNER','conditions'=>array('Radiology.tariff_list_id=TariffList.id')),
								/*'CorporateSuperBill'=>array('foreignKey'=>false,'type'=>'INNER','conditions'=>array('RadiologyTestOrder.corporate_super_bill_id=CorporateSuperBill.id'))*/
						)),false);
				$condition['OR']=array('RadiologyTestOrder.paid_amount <='=>'0','RadiologyTestOrder.paid_amount'=>NULL);
				//$condition['RadiologyTestOrder.corporate_super_bill_id']=$superBillId;
			}else{
				$this->bindModel(array(
						'belongsTo' => array(
								'Radiology'=>array('foreignKey'=>false,'type'=>'INNER','conditions'=>array('Radiology.id=RadiologyTestOrder.radiology_id')),
								'TariffList' =>array( 'foreignKey'=>false,'type'=>'INNER','conditions'=>array('Radiology.tariff_list_id=TariffList.id')),
						)),false);
			}
				
			$radArray=$this->find('all',array('fields'=>array('RadiologyTestOrder.id','RadiologyTestOrder.radiology_id','RadiologyTestOrder.patient_id','RadiologyTestOrder.amount',
					'RadiologyTestOrder.paid_amount','RadiologyTestOrder.discount','RadiologyTestOrder.corporate_super_bill_id',
					'Radiology.name','Radiology.tariff_list_id','TariffList.id','TariffList.cghs_code','TariffList.apply_in_a_day'),
					'conditions'=>array('RadiologyTestOrder.is_deleted'=>'0',$condition)));
		
			return $radArray;
		
		}
		
		function radServicesUpdate($serviceData,$encId,$catKey,$billId,$percent,$modified){
			$session = new cakeSession();
			$modified_by=$session->read('userid');
			foreach($serviceData as $serviceKey=>$eachData){
				$singleServiceData='';
				$amtToPay=0;$serDiscount=0;
				$serpaid=0;
				$singleServiceData=$this->find('first',array(
						'fields'=>array('RadiologyTestOrder.amount','RadiologyTestOrder.paid_amount',
								'RadiologyTestOrder.discount'),
						'conditions'=>array('RadiologyTestOrder.id'=>$serviceKey,
								'RadiologyTestOrder.patient_id'=>$encId,
						)));
				$billTariffId[$catKey][]=$serviceKey; //tariff_list_id serialize array
					
				$amtToPay=($eachData['balAmt']*$percent)/100;
					
				$serpaid=$amtToPay+$singleServiceData['RadiologyTestOrder']['paid_amount'];
					
				$serDiscount=$singleServiceData['RadiologyTestOrder']['amount']-($serpaid);
					
				$this->updateAll(
						array('RadiologyTestOrder.paid_amount'=>"'$serpaid'",
								'RadiologyTestOrder.discount'=>"'$serDiscount'",
								'RadiologyTestOrder.billing_id'=>"'$billId'",
								'RadiologyTestOrder.modified_bill_by'=>"'$modified_by'",
								'RadiologyTestOrder.modified_bill_date'=>"'$modified'"),
						array('RadiologyTestOrder.id'=>$serviceKey,
								'RadiologyTestOrder.patient_id'=>$encId,
						));
			}
			return $billTariffId;
		}
		/**
	 	* function to get sms trigger as a true or false 
	 	* @author Mahalaxmi
	 	*/
		public function findRadiologyDetailsById($id=null){
			return $this->find('first',array('fields'=>array('*'),'conditions'=>array('id'=>$id)));

		}
		
		public function getRadiologyDetails($condition=array()){
		
			if(empty($condition)) return false ;
				
			$RadiologyTestOrder = Classregistry::init('RadiologyTestOrder');
			$RadiologyTestOrder->bindModel(array(
					'belongsTo' => array('Radiology'=>array('type'=>'inner','foreignKey'=>'radiology_id' )),
					'hasOne' => array(
							'RadiologyResult'=>array('foreignKey'=>'radiology_test_order_id')
					)),false);
		
			$radTestOrderData= $RadiologyTestOrder->find('all',array(
					'fields'=> array('RadiologyResult.result_publish_date','RadiologyResult.confirm_result','RadiologyTestOrder.id',
							'RadiologyTestOrder.patient_id','RadiologyTestOrder.create_time','RadiologyTestOrder.test_done','RadiologyTestOrder.amount','RadiologyTestOrder.paid_amount',
							'Radiology.name','RadiologyTestOrder.radiology_order_date',	'Radiology.id'),
					'conditions'=>array_merge($condition,array(
							'RadiologyTestOrder.is_deleted'=>0,'RadiologyTestOrder.from_assessment'=>0)),
					'order' => array( 'RadiologyTestOrder.radiology_order_date' => 'desc' ),
					'group'=>'RadiologyTestOrder.id'));
				
			return $radTestOrderData ;
		}
		public function getRadHistory($patientID){
	$this->bindModel(array(
				'belongsTo' => array(
						'Radiology' =>array( 'foreignKey'=>false,'conditions'=>array('Radiology.id=RadiologyTestOrder.Radiology_id')),
						)),false);
	$getRadDeatials=$this->find('all',array('conditions'=>array('RadiologyTestOrder.is_deleted'=>'0','RadiologyTestOrder.patient_id'=>$patientID),'fields'=>array('Radiology.name','RadiologyTestOrder.order_id','RadiologyTestOrder.create_time')));
	return 	($getRadDeatials);
}
}