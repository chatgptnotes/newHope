<?php
/**
 *  Controller : ccda
 *  Use : AEDV
 *  @created by :gulshan
 *  functions : ccda
 *  date : 26 Aug 2013
 *
 **/
class CcdaController extends AppController {

	public $name = 'Ccda';
	public $helpers = array('Html','Form', 'Js','DateFormat','RupeesToWords','Number','General');
	public $components = array('RequestHandler','Email','ImageUpload','DateFormat');

	public function index($id=null,$uid=null,$is_e2="no",$planeccda="no",$patient_permission=null,$redirectTo=null){

			 
		$this->uses =array('XmlNote','Patient');
		$this->Patient->unBindModel(array('hasMany'=>array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$patientDetail=$this->Patient->find('first',array('fields'=>array('lookup_name','admission_type','person_id','admission_id'),'conditions'=>array('Patient.id'=>$id)));

		$ccda_id=$this->XmlNote->autoGeneratedCcrID($id);
		$currentSession = $this->Session->read('facilityu');
			

		if($patientDetail['Patient']['admission_type'] == 'OPD'){
			$ambulatory = true ;
		}else{
			$ambulatory = false ;
		}
		$get_ccda_body=$this->XmlNote->generateCcdaBody($id,$uid,$ambulatory,$patient_permission,$is_e2);

		if(!empty($id) ){
			//if exist

			$isExist = $this->XmlNote->find('first',array('conditions'=>array('XmlNote.patient_id'=>$id))) ;
			$permissions = "0|".implode("|",$patient_permission) ;


			if(($is_e2=="no") && !empty($patient_permission)){
				$xmlNoteArray = array('message'=>$get_ccda_body,'patient_id'=>$id,'xml_type'=>'ccda','ccda_id'=>$ccda_id,
						'patients_e2_filename'=>'patient_e2_'.$patientDetail['Patient']['lookup_name'].'_'.$patientDetail['Patient']['admission_id'],
						'patient_permission'=>$permissions) ;
			}else if($is_e2=='yes' && empty($permission)){
				/* $xmlNoteArray = array('message'=>$get_ccda_body,'patient_id'=>$id,'xml_type'=>'ccda','ccda_id'=>$ccda_id,
						'e2_filename'=>'e2_'.$patientDetail['Patient']['lookup_name'].'_'.$patientDetail['Patient']['admission_id'] ) ; */
				//changed by pankaj as per the clinic requirement 
				$xmlNoteArray = array('message'=>$get_ccda_body,'patient_id'=>$id,'xml_type'=>'ccda','ccda_id'=>$ccda_id,
						'filename'=>'e2_'.$patientDetail['Patient']['lookup_name'].'_'.$patientDetail['Patient']['admission_id'] ) ;
			}else{
				$xmlNoteArray = array('message'=>$get_ccda_body,'patient_id'=>$id,'xml_type'=>'ccda','ccda_id'=>$ccda_id,
						'filename'=>$patientDetail['Patient']['lookup_name'].'_'.$patientDetail['Patient']['admission_id']) ;
			}
			if(!empty($isExist['XmlNote']['id'])){
				$this->XmlNote->id = $isExist['XmlNote']['id'] ;
				$result = $this->XmlNote->save($xmlNoteArray);
			}else{
				$result = $this->XmlNote->save($xmlNoteArray);
			}
			//$this->XmlNote->saveall(array('message'=>$get_ccda_body,'patient_id'=>$id,'xml_type'=>'ccda','ccda_id'=>$ccda_id));//
			//$this->XmlNote->save(array('filename'=>$patientDetail['Patient']['lookup_name'].'_'.$patientDetail['Patient']['admission_id']));

			if($result){
				$this->Session->setFlash(__('CCDA record has been generated successfully.'));
			}else{
				$this->Session->setFlash(__('Please try again'),'default',array('class'=>'error'));
			}
		}
		
		if($redirectTo=='compose'){
			$this->redirect('/messages/composeCcda/'.$id."?returnUrl=compose"); //while calling from soap note 
		}
		if($planeccda=="yes"){
			$this->redirect($this->referer());
		}
	}

	public function viewccda($id=null,$uid=null,$note_id=null){

		$this->layout = false;
		$this->uses =array('XmlNote');
		if($id)
		{
			$result = $this->XmlNote->find('first',array('fields'=>array('filename'),'order'=>array('XmlNote.id DESC'),'limit'=>1,'conditions'=>array('XmlNote.patient_id'=>$id,'XmlNote.note_id'=>$note_id)));


			$this->set(array('xml'=>$result['XmlNote']['filename']));
		}else{
			$this->Session->setFlash(__('Please try again'));
		}
			
	}



	public function view_consolidate($id=null,$is_clinical=false){


		//$this->layout = false;
		$this->uses =array('XmlNote','Patient');
		$role = $this->Session->read('role');
		if(strtolower($role) =='patient') $id= $this->Session->read('patientId') ;
		if($id)
		{
			$result = $this->XmlNote->find('first',array('order'=>array('XmlNote.id DESC'),'conditions'=>array('XmlNote.patient_id'=>$id)));
			$role = $this->Session->read('role');
			$patientData = $this->Patient->find('first',array('admission_type','conditions'=>array('id'=>$id)));
				
			if(strtolower($role)==strtolower(Configure::read('patientLabel'))) {
				//$id = $this->Session->read('patient_id') ;
				/* if($patientData['Patient']['admission_type']=='IPD'){
					$xml = $result['XmlNote']['filename'] ;
				}else{ */
				if(!empty($result['XmlNote']['patients_e2_filename'])){
					$xml = $result['XmlNote']['patients_e2_filename']  ;
				}else{
					$xml = $result['XmlNote']['filename'] ;
				}
				//	}
			}else{
			if(!empty($result['XmlNote']['patients_e2_filename'])){
					$xml = $result['XmlNote']['patients_e2_filename']  ;
				}else{
					$xml = $result['XmlNote']['filename'] ;
				}
			}
		 	$filePath  = "files".DS."note_xml".DS.$xml.".xml" ;
			if(!file_exists($filePath)){
				$this->Session->setFlash('CCDA is not available','default',array('class'=>'error')) ;
			}else{
				$this->set(array('xml'=>$xml));
				//To get the count of downloaded XML Reports by Patient for PCMH Report
				$updateArray=array('XmlNote.is_viewed'=>'1');
				$this->XmlNote->updateAll($updateArray,array('XmlNote.patient_id'=>$id));
				
				
			}

		}else{
			$this->Session->setFlash(__('Please try again'));
		}
	}

	//Transmit Ccda

	public function transmit_ccda($id=null){

		$this->layout = false;
		$this->uses =array('XmlNote','TransmittedCcda');
		if($id)
		{
			$result = $this->XmlNote->find('first',array('fields'=>array('id','filename'),'order'=>array('XmlNote.id DESC'),'limit'=>1,
					'conditions'=>array('XmlNote.patient_id'=>$id)));

			$this->set(array('xml'=>$result['XmlNote']['filename']));
			$this->set(array('xml_note_id'=>$result['XmlNote']['id']));

		}else{
			$this->Session->setFlash(__('Please try again'));
		}


		$this->set('id',$id);
			
	}

	public function sendCcda($patient_id=null){

		$this->uses =array('XmlNote','TransmittedCcda');

		if (!empty($this->data['XmlNote']['to']) && ($this->data['XmlNote']['subject'])) {
			App::import('Vendor', 'PHPMailer', array('file' => 'phpmailer/class.phpmailer.php'));

			$mail = new PHPMailer();

			$mail->IsSMTP();  // telling the class to use SMTP
			$mail->SMTPAuth   = false;
			$mail->Host     = "directo.mdemail.md"; // SMTP server
			$mail->Port = 465;
			$mail->SMTPSecure = 'ssl';
			$mail->SMTPDebug  = 2;
			//Ask for HTML-friendly debug output
			$mail->Debugoutput = 'html';

			$mail->Username = "direct@direct.drmhope.com";
			$mail->Password	="drm2628" ;

			$mail->AddAddress($this->data['XmlNote']['to']);
			$mail->SetFrom('direct@direct.drmhope.com', 'DrmHope');
			$mail->AddReplyTo('direct@direct.drmhope.com', 'DrmHope');

			$mail->Subject  = $this->data['XmlNote']['subject'] ;
			$mail->Body     = $this->data['XmlNote']['body'];
			$mail->WordWrap = 50;
			//temp attachment path
			$path = "C:\ccda\Vinod Yaduwanshi_UHHO13C15009_single.xml";
			$mail->AddAttachment($path);
			if(!$mail->Send()) {
				echo 'Message was not sent.';
				echo 'Mailer error: ' . $mail->ErrorInfo;
			} else {
				echo 'Message has been sent.';
			}
			$this->TransmittedCcda->insertTransmittedCcda($this->data);
			$errors = $this->TransmittedCcda->invalidFields();
			if(!empty($errors)) {
				$this->set("errors", $errors);
			} else {
				$this->Session->setFlash(__('Ccda has been transmitted successfully'),'default',array('class'=>'message'));
			}
		}
		else{
			$this->Session->setFlash(__('Please try again'),true,array('class'=>'error'));
		}
		$this->redirect($this->referer());
	}


	public function searchParsePatient($action=null,$id=null){
		$this->uses = array('IncorporatedPatient');
		$incorporate_id=$this->IncorporatedPatient->find('first',array('fields'=>array('id','xml_file'),
				'conditions'=>array('IncorporatedPatient.id'=>$id)));
	 
		if(!empty($incorporate_id['IncorporatedPatient']['xml_file'] )){
			$this->layout = 'ajax' ;
			$file = "uploads".DS."CCDA".DS.$incorporate_id['IncorporatedPatient']['xml_file'] ;
			 
			if(file_exists($file)){  
				$this->loadModel('CcdaParser',$file);
			}else {
				 
			//	$this->Session->setFlash(__('"File not found ,Please try again"', true),true,array('class'=>'error'));
				//$this->redirect($this->referer());
			}

			$this->loadModel('CcdaParser',$file);
			$patientCcdaObj = $this->CcdaParser->ccdaData ;
			 
			$this->paginate = array(
					'limit' => Configure::read('number_of_rows'),
					'order' => array(
							'Patient.id' => 'desc'
					)
			);

			//////////////////////////////////////////////

			$this->uses = array('Person','Race','Ethnicity','Language',"Patient") ;

			$raceData = $this->Race->find('list',array('fields' => array('value_code','race_name')));
			$languageData = $this->Language->find('list',array('fields' => array('id','language')));


			/* if($patientCcdaObj->ethnicity == 'Hispanic or Latino'){
				$ethicinity = '2135-2:Hispanic or Latino';
			}else if($patientCcdaObj->ethnicity == 'Not Hispanic or Latino'){
			$ethicinity = '2186-5:Not Hispanic or Latino';
			}else{
			$ethicinity = $patientCcdaObj->ethnicity;
			} */

			$search_key['Patient.is_discharge'] = 0;//display only non-discharge patient
			$search_key['Patient.is_deleted'] = 0;
			$search_key['Person.first_name'] = $patientCcdaObj->name->first;
			$search_key['Person.last_name'] = $patientCcdaObj->name->last;
			$search_key['Person.sex LIKE'] = ($patientCcdaObj->gender == 'M')?'M%':'F%';
			//$search_key['Person.ethnicity'] = $ethicinity;

			$this->Patient->UnBindModel(array('hasMany'=>array('PharmacySalesBill','InventoryPharmacySalesReturn'))) ;
			$this->Patient->virtualFields = array('full_name' => 'CONCAT(Initial.name, " ", Person.first_name, " ", Person.last_name)');
			$this->Patient->bindModel(array(
					'belongsTo' => array(
							'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')) ,
							'Race' =>array('foreignKey' => false,'conditions'=>array('Person.race=Race.value_code')) ,
							'Initial' =>array('type'=>'LEFT','foreignKey' => false,'conditions'=>array('Person.initial_id=Initial.id' ))
					)),false);

			$this->paginate = array(
					'limit' => Configure::read('number_of_rows'),
					'order' => array(
							'Patient.id' => 'asc'
					)
			);

			//for now ssn is commented becuase if ccda has ssn and our record dont then result wont be proper
			/* if(!empty($patientCcdaObj->ssn)){
				$search_key  = array('Person.ssn_us'=>$patientCcdaObj->ssn,'Patient.is_discharge'=>0,'Patient.is_deleted'=>0) ;
			} */
			$role = $this->Session->read('role');
			if($role==Configure::read('doctorLabel')){
				$search_key  = array_merge($search_key,array('Patient.doctor_id'=>$this->Session->read('userid'))) ;
			}
			$this->paginate = array(
					'limit' => Configure::read('number_of_rows'),
					'order' => array('Patient.id' => 'desc'),
					'fields'=> array('Person.patient_uid','Person.id','Race.race_name',
							'Person.language','Patient.full_name','Person.ssn_us','Patient.admission_id','Patient.sex','Patient.id'),
					'conditions'=>$search_key,
					'group'=>array('Patient.id')
			);


			$raceKey = array_search($patientCcdaObj->race, $raceData);
			$languageKey = array_search($patientCcdaObj->language, $languageData);

			$this->set('data',$this->paginate('Patient'));
			$this->set('filename',$incorporate_id['IncorporatedPatient']['xml_file']) ;
				
			//id set incorpooratyed id
			$this->set('id',$id);
				
			//	return array('person_id'=>$patientID, 'person_uid'=>$patientUID);
			//////////////////////////////////////////////

			// Paginate Data here
			//$this->set('data',$this->paginate('Patient'));
			//EOF Anand's Code //
		}else if($action=="imported"){
			$this->set("status","imported");
		}else{ 
			//list of xmls form upload/ccda dir
			$dir = 'uploads'.DS.'CCDA';
			if ($handle = opendir($dir)) {
				/* This is the correct way to loop over the directory. */
				while (false !== ($entry = readdir($handle))) {
					$type= filetype($dir . $entry) ;
					if($type != 'dir'){
						$files[] = $entry;
					}
				}
				closedir($handle);
			}
			$this->uses = array('Patient','IncorporatedPatient') ;
			$this->Patient->unBindModel(array('hasMany'=>array('PharmacySalesBill','InventoryPharmacySalesReturn')));
			$this->IncorporatedPatient->bindModel(array(
					'belongsTo' => array(
							'Patient' =>array('foreignKey' => 'patient_id'),
					)),false);

			$this->paginate = array(
					'limit' => Configure::read('number_of_rows'),
					'order' => array(
							'IncorporatedPatient.id' => 'asc'),
					'fields'=> array('Patient.lookup_name','Patient.id','xml_file','summary_care_date','id','fromName','subject','incoming_mail_id','fromAddress','IncorporatedPatient.patient_id'),
			);
				
			$data = $this->paginate('IncorporatedPatient') ;
			 
			$this->set('data',$data);
			$this->set('files',$files) ;
			$this->render("file_list"); //render xml list
		}
	}

	public function parseCcda($filename = null){

		if(!$filename) $filename = $this->query->params['filename'] ;
		$file = "uploads".DS."ccda_imported".DS.$filename ;
		if(file_exists($file) && $filename != ''){
			$this->loadModel('CcdaParser',$file);
		}else {
			$this->Session->setFlash(__('"File not found ,Please try again"', true),true,array('class'=>'error'));
			$this->redirect($this->referer());
		} 
		$this->CcdaParser->setTargetPatient($this->request->data['ccda']) ;
		//echo $this->request->data['ccda']['criteria'] ;
		//if($this->request->data['ccda']['criteria']=='b1'){
		$this->CcdaParser->updateDemographics();//person table
		$this->CcdaParser->updateMedications(); //NewCropPrescription
		$this->CcdaParser->updateAllergy();     //newCropAllergies (need to check for allergy_id)
		$this->CcdaParser->updateProblems();	  //note_diagnosis
		$this->CcdaParser->updateImmunizations();//immunization
		/* }else{
			$this->CcdaParser->updateLabResults(); //LAb order(result)
		$this->CcdaParser->updateDemographics();//person table
		$this->CcdaParser->updateMedications(); //NewCropPrescription
		$this->CcdaParser->updateAllergy();     //newCropAllergies (need to check for allergy_id)
		$this->CcdaParser->updateProblems();	  //note_diagnosis
		$this->CcdaParser->updateImmunizations();//immunization
		$this->CcdaParser->updateVitals();//Diagnosis
		$this->CcdaParser->updateSmoking(); //patient_smoking_history & patient_smoking
		$this->CcdaParser->updateFunctionalStatus(); //diagnosis
		$this->CcdaParser->updateProcedures(); //radiologyTestOrder
		$this->CcdaParser->updateEncounters(); //encounter
		$this->CcdaParser->updatePlanCare(); //care plan
		} */

		//move importing file to new folder
		if(!$this->CcdaParser->error){
			$date = date('dmY');
			$tempName = $date."_".$filename ;
			$destFile = "uploads".DS."ccda_imported".DS."$tempName" ;
			$isMoved  = rename($file, $destFile);
			if($isMoved){
				echo 'moved successfully' ;
				//insert into imported patients
				$this->loadModel("IncorporatedPatient");
					
				$this->IncorporatedPatient->save(array('xml_file'=>$tempName,
						'id'=>$this->request->data['IncorporatedPatient']['id'],
						'patient_id'=>$this->request->data['ccda']['patient_id'],
						'date_imported_on'=>date('Y-m-d'),
						'summary_provide'=>$this->request->data['IncorporatedPatient']['summary_provide'],
						'summary_care_date'=>$this->DateFormat->formatDate2STD($this->request->data['IncorporatedPatient']['summary_care_date'],Configure::read('date_format_us')),
						'create_time'=>date('Y-m-d H:i:s'),
						'created_by'=>$this->Session->read('userid'),
						'location_id'=>$this->Session->read('locationid')));
 

				$this->Session->setFlash(__('CCDA Incorporated successfully', true),true,array('class'=>'message'));
				$this->redirect("/ccda/searchParsePatient/imported");
			}else{
				echo 'Unable To move file ' ;
				$this->Session->setFlash(__('Please try again', true),true,array('class'=>'error'));
			}
		}else{
			echo $this->CcdaParser->error ;
			$this->Session->setFlash(__('Please try again', true),true,array('class'=>'error'));
			$this->set("isIncorporated",false);
		}
		$this->Session->setFlash(__('Please try again', true),true,array('class'=>'error'));
		$this->redirect("/ccda/searchParsePatient") ;

	}

	public function search(){
		$this->uses =array('Patient','TransmittedCcda');

		$this->set('data','');
		$this->paginate = array(
				'limit' => Configure::read('number_of_rows'),
				'order' => array(
						'Patient.id' => 'asc'
				)
		);
		
		$role = $this->Session->read('role');
		$usertype=$this->Session->read('facility',$facility['Facility']['usertype']);
		//Search patient as per the url request
		if(!empty($this->params->query['type'])){
			if(strtolower($this->params->query['type'])=='emergency'){
				$search_key['Patient.admission_type'] = "IPD";
				$search_key['Patient.is_emergency'] = "1";
			}else if($this->params->query['type']=='IPD'){
				$search_key['Patient.admission_type'] = $this->params->query['type'];
				$search_key['Patient.is_emergency'] = "0";
			}else{
				$search_key['Patient.admission_type'] = $this->params->query['type'];
			}
		}
		if(!empty($this->params->query['dept_id'])){
			$search_key['Patient.department_id'] = $this->params->query['dept_id'];
		}
		/* if($this->params->query['patientstatus']=='discharged' || $this->params->query['patientstatus']=='processed') {
			$search_key['Patient.is_discharge'] = 1;//display only non-discharge patient
		} else {
		$search_key['Patient.is_discharge'] = 0;//display only non-discharge patient
		} */
		//EOF patient search as per category

		$search_key['Patient.is_deleted'] = 0;
		if((strtolower($role) == strtolower(Configure::read('adminLabel'))) || empty($this->params->query['doctor_id'])){
			$search_key['Patient.location_id']=$this->Session->read('locationid');
			$this->Patient->bindModel(array(
					'belongsTo' => array(
							'User' =>array('foreignKey' => false,'conditions'=>array('User.id=Patient.doctor_id' )),
							/*'Initial' =>array('foreignKey' => false,'conditions'=>array('User.initial_id=Initial.id' )),*/
							'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id' )),
							/*'PatientInitial' =>array('foreignKey' => false,'conditions'=>array('PatientInitial.id =Person.initial_id' )),*/
							'Location' =>array('foreignKey' => 'location_id'),
							'Department' =>array('foreignKey' => false,'conditions'=>array('Department.id =Patient.department_id' )),
							'XmlNote'=>array('foreignKey'=> false,'conditions'=>array('XmlNote.patient_id=Patient.id' ))
					)),false);
		}else if(strtolower($role)==strtolower(Configure::read('doctorLabel'))){
			$search_key['Patient.location_id']=$this->Session->read('locationid');
			$search_key['Patient.doctor_id']=$this->Session->read('userid');
			$this->Patient->bindModel(array(
					'belongsTo' => array(
							'User' =>array('foreignKey' => false,'conditions'=>array('User.id=Patient.doctor_id' )),
							/*'Initial' =>array('foreignKey' => false,'conditions'=>array('User.initial_id=Initial.id' )),*/
							'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id' )),
							'Department' =>array('foreignKey' => false,'conditions'=>array('Department.id =Patient.department_id' )),
							/*'PatientInitial' =>array('foreignKey' => false,'conditions'=>array('PatientInitial.id =Person.initial_id' )),*/
							'XmlNote'=>array('foreignKey'=> false,'conditions'=>array('XmlNote.patient_id=Patient.id' ))
					)),false);
		}else{
			$search_key['Patient.location_id']=$this->Session->read('locationid');
			$this->Patient->bindModel(array(
					'belongsTo' => array(
							'User' =>array('foreignKey' => false,'conditions'=>array('User.id=Patient.doctor_id' )),
							/*'Initial' =>array('foreignKey' => false,'conditions'=>array('User.initial_id=Initial.id' )),*/
							'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id' )),
							/*'PatientInitial' =>array('foreignKey' => false,'conditions'=>array('PatientInitial.id =Person.initial_id' )),*/
							'Department' =>array('foreignKey' => false,'conditions'=>array('Department.id =Patient.department_id' )),
							'XmlNote'=>array('foreignKey'=> false,'conditions'=>array('XmlNote.patient_id=Patient.id' ))
					)),false);
		}

		// Anand's Code //
		// If Search is for emergency patient
		if(isset($this->params['named']['searchFor']) AND $this->params['named']['searchFor'] == 'emergency'){
			// Condition is here
			$conditions = array($search_key,'Patient.is_discharge'=>0,'Patient.admission_type'=>'IPD','Patient.is_emergency'=>1);
		} else {
			// If patient is OPD
			if(!empty($this->params->query)){
				$search_ele = $this->params->query  ;//make it get
				$search_ele['lookup_name'] = explode(" ",$search_ele['lookup_name']);
				if(count($search_ele['lookup_name']) > 1){
					$search_key['SOUNDEX(Person.first_name) like'] = "%".soundex(trim($search_ele['lookup_name'][0]))."%";
					$search_key['SOUNDEX(Person.last_name) like'] = "%".soundex(trim($search_ele['lookup_name'][1]))."%";
				}else if(count($search_ele['lookup_name)']) == 0){
					$search_key['OR'] = array(
							'SOUNDEX(Person.first_name)  like'  => "%".soundex(trim($search_ele['lookup_name'][0]))."%",
							'SOUNDEX(Person.last_name)   like'  => "%".soundex(trim($search_ele['lookup_name'][0]))."%");

				}if(!empty($search_ele['patient_id'])){
					$search_key['Patient.patient_id like '] = "%".trim($search_ele['patient_id']) ;
				}if(!empty($search_ele['admission_id'])){
					$search_key['Patient.admission_id like '] = "%".trim($search_ele['admission_id']) ;
				}if(!empty($search_ele['dob'])){
					$dob = explode(' ',$this->DateFormat->formatDate2STD($search_ele['dob'],Configure::read('date_format')));
					$search_key['Person.dob'] = $dob[0];
				}if(!empty($search_ele['ssn_us'])){
					$search_key['Person.ssn_us like '] = "%".trim($search_ele['ssn_us'])."%" ; ;
				}
				// Condition is here
				$conditions = $search_key;
			}else{
				// For IPD patient
				// Condition is here
				$conditions = array($search_key,'Patient.is_discharge'=>0,'Patient.is_deleted'=>0);
			}
		}
		// Paginate Data here
		$this->Patient->unBindModel(array(
				'hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));

		$this->paginate = array(
				'limit' => Configure::read('number_of_rows'),
				'order' => array('Patient.id' => 'desc'),
				'fields'=> array('Patient.form_received_on','Patient.form_received_on','Patient.discharge_date','CONCAT(Patient.lookup_name) as lookup_name',
						'Patient.id','Patient.admission_type','Patient.patient_id','Patient.admission_id','Patient.mobile_phone','Patient.landline_phone','CONCAT(User.first_name," ",User.last_name) as name',
						'User.initial_id', 'Patient.create_time',/* Initial.name,*/'Department.name','Person.ssn_us','Person.dob','XmlNote.filename','XmlNote.patients_e2_filename'),
				'conditions'=>$conditions,
				'group'=>array('Patient.id')
		);
		$this->set('data',$this->paginate('Patient'));
	}

	public function isCcdaGenerated($patient_id=null){
		$this->layout = false;
		$this->autoRender =false;
			
		if(!$patient_id) return false ;
			
		$this->uses = array("XmlNote") ;
		$result= $this->XmlNote->find('count',array('conditions'=>array('patient_id'=>$patient_id)));
			
		if($result) {
			return true ;
		}else{
			return false;
		}
		exit ;
	}


	public function imapCcda(){
		App::import('Vendor', 'ImapMailbox', array('file' => 'imap/src/ImapMailbox.php'));
		$this->uses = array("IncorporatedPatient") ;
		
		//check for direct address
		$directAdd = $this->Session->read('Auth.User.direct_email') ; 
		
		if(empty($directAdd)){
			$this->Session->setFlash('There is no direct address assigned to your account.',true,array('class'=>'error')); 
			 
			if($this->params->query['directEmail'] == 'noset'){
				$this->redirect($this->referer()) ;
			}else{
				$this->redirect($this->referer()."?directEmail=noset") ;
			} 
			
		}
		// IMAP must be enabled in Google Mail Settings
		define('GMAIL_EMAIL', 'direct@direct.drmhope.com');
		define('GMAIL_PASSWORD', 'drm2628');
		define('ATTACHMENTS_DIR','uploads'.DS.'CCDA');
			
		$mailbox = new ImapMailbox('{imap.mdemail.md:993/imap/ssl/novalidate-cert}inbox', GMAIL_EMAIL, GMAIL_PASSWORD, ATTACHMENTS_DIR, 'utf-8');
		$mails = array();
			
		// Get some mail
		$mailsIds = $mailbox->searchMailBox('UnFlagged');
			
		//$emails = imap_search($inbox, 'FROM "onlyoneemail@email.com" UNSEEN');
		if(!$mailsIds) {
			echo  'Mailbox is empty' ;
			$this->Session->setFlash(__('No new message found , Please try again', true),true,array('class'=>'error'));
			$this->redirect($this->referer());
		}
			
		//$mailId = reset($mailsIds);
		//$mbox = imap_open('{imap.mdemail.md:993/imap/ssl}inbox', GMAIL_EMAIL, GMAIL_PASSWORD) or die("Error opening mailbox: ".imap_last_error());
		$replace = array(
				'/\s/' => '_',
				'/[^0-9a-zA-Z_\.]/' => '',
				'/_+/' => '_',
				'/(^_)|(_$)/' => '',
		);
		foreach($mailsIds as $mailId){
			$mail = $mailbox->getMail($mailId);
			$attachments  = $mail->getAttachments();
				
			foreach($attachments as $attachmentKey => $attachmentsValue){
				if(!empty($attachmentsValue->name)){
					$fileSysName = "" ;
					//rename received file prefixed with mail ID
					$fileSysName = preg_replace('~[\\\\/]~', '', $mail->id  . '_' . preg_replace(array_keys($replace), $replace, $attachmentsValue->name));
					$isExist = $this->IncorporatedPatient->find('count',array('conditions'=>array('IncorporatedPatient.incoming_mail_id'=>$mail->id,'IncorporatedPatient.xml_file'=>$fileSysName)));
					if($isExist == 0){
						$data  = array('subject'=>$mail->subject,'fromName'=>$mail->fromName,'to'=>'direct@direct.drmhope.com',
								'incoming_mail_id'=>$mail->id,'fromAddress'=>$mail->fromAddress,'xml_file'=>$fileSysName,'create_time'=>date('Y-m-d H:i:s'),
								'created_by'=>$this->Session->read('userid'),'location_id'=>'locationid');
						$this->IncorporatedPatient->save($data);
						$this->IncorporatedPatient->id= '';
					}
					$imapresult = $mailbox->markMailAsImportant($mailId);
				}
			}
		}
			

		//$mailbox->deleteMail($mailId) ;
		//$mailbox->expungeDeletedMails();
		/* $imapresult = imap_mail_move($mbox, $mailId, "trash");

		if($imapresult==false){die(imap_last_error());}
		exit; */


			
		$this->Session->setFlash(__('CCDA Fetched successfully', true),true,array('class'=>'message'));
		$this->redirect($this->referer());
	}


	public function view_received_ccda($xml=null,$id=null){
		$this->layout = false;
		if($xml)
		{
			$this->set(array('xml'=>$xml));
			if($id) {
				$this->uses = array('IncorporatedPatient') ;
				$incorpoData = $this->IncorporatedPatient->find('first',array('conditions'=>array('id'=>$id)));
				$this->set('inData',$incorpoData);
			}
			//$this->render('view_consolidate') ;
		}else{
			$this->Session->setFlash(__('Please try again'));
			$this->redirect($this->referer()) ;
		}
	}

	public function downloadXml($id=null,$is_clinical=false){
		$this->layout = false ;
		$this->autoRender = false ;
		$this->uses = array('XmlNote','Patient') ;
		$role = $this->Session->read('role');
		if(strtolower($role)=='patient') $id = $this->Session->read('patientId');
			
		$result = $this->XmlNote->find('first',array('conditions'=>array('patient_id'=>$id),'order'=>array('id desc')));
		$patientData = $this->Patient->find('first',array('admission_type','conditions'=>array('id'=>$id)));
		$role = $this->Session->read('role');
		if(strtolower($role)=='patient') {
			//$id = $this->Session->read('patient_id') ;
			//if($patientData['Patient']['admission_type']=='IPD'){
			$xml = $result['XmlNote']['filename'].'.xml' ;
			$zipname = $result['XmlNote']['filename'].".zip";
			/* 	}else{
				$xml = $result['XmlNote']['patients_e2_filename'].'.xml' ;
			$zipname = $result['XmlNote']['patients_e2_filename'].".zip";
			} */
		}else{
			if($is_clinical){
				$xml = $result['XmlNote']['patients_e2_filename'].'.xml' ;
				$zipname = $result['XmlNote']['patients_e2_filename'].".zip";
			}else{
				$xml = $result['XmlNote']['filename'].'.xml' ;
				$zipname = $result['XmlNote']['filename'].".zip";
			}
		}

	//ob_clean();
		//ob_start();
		$files = array($xml,'CDA.xsl'); //css for xml view

		$zip  = new ZipArchive;
		$res  = $zip->open($zipname, ZipArchive::CREATE);
		if ($res === TRUE) {
			$path = Configure::read('generated_ccda_path') ;
			foreach ($files as $file) {
				$path = Configure::read('generated_ccda_path').$file ;
				if(file_exists($path)){
					$zip->addFile($path,$file);
					//To get the count of downloaded XML Reports by Patient for PCMH Report
					$updateArray=array('XmlNote.is_downloaded'=>'1');
					$this->XmlNote->updateAll($updateArray,array('XmlNote.patient_id'=>$id));
				}else{
					 
					$this->Session->setFlash(__('File does not exist'),true,array('class'=>'error'));
					$this->redirect("/") ;
				}
			}
			$zip->close();
			header('Content-type: "application/x-zip-compressed"; charset="utf8"');
			header('Content-disposition: attachment; filename="'.$zipname.'"');
			header('Content-Transfer-Encoding: binary');
			header('Cache-Control: must-revalidate');
			header('Pragma: public');
			ob_clean();
			flush();
			readfile($zipname);
			@unlink($zipname); //remove temp file 
			
		}else{
			echo "failed " ;
		}

	}

	public function clinical_summary($id=null,$uid=null){
		$this->uses = array('XmlNote','Patient') ;
		$this->layout = 'ajax';
		
		if(isset($this->request->data['XmlNote']) && !empty($this->request->data['XmlNote'])){

			$this->index($id,$uid,"no","no",$this->request->data['XmlNote']); //permitted sections
			$this->index($id,$uid,"yes"); //total sections (e2)

			$patient_permission = "0|".implode('|',$this->request->data['XmlNote']['permissions']);

			$last_split_date_time = $this->request->data['XmlNote']['clinical_date'];
			if(!empty($last_split_date_time))
				$this->request->data['XmlNote']['clinical_date'] = $this->DateFormat->formatDate2STDForReport($last_split_date_time,Configure::read('date_format_us'));


			if(!empty($isExist['XmlNote']['id'])){
				$this->XmlNote->id = $isExist['XmlNote']['id'] ;
				$result = $this->XmlNote->save($xmlNoteArray);
			}else{
				$result = $this->XmlNote->save($xmlNoteArray);
			}
			$xml_id= $this->XmlNote->find('first',array('fields'=>array('id','patient_permission','option','clinical_date'),'conditions'=>array('XmlNote.patient_id'=>$id)));

			$this->XmlNote->save(array('patient_permission'=>$patient_permission,'option'=>$this->request->data['XmlNote']['option'],
					'clinical_date'=>$this->request->data['XmlNote']['clinical_date'],'id'=>$xml_id['XmlNote']['id']));

			$patient_id = $this->Patient->find('first',array('fields'=>array('person_id'),'conditions'=>array('id'=>$id)));

			$this->Session->setFlash(__('Clinical summary created successfully'),true,array('class'=>'message'));
			$this->set('status','success') ; 
			//$this->redirect(array("controller" => "patients", "action" => "patient_information",$id));
		}
		$xml_id= $this->XmlNote->find('first',array('fields'=>array('id','patient_permission','option','clinical_date'),'conditions'=>array('XmlNote.patient_id'=>$id)));

		if(!empty($xml_id['XmlNote']['patient_permission'])){
			$array = explode('|',$xml_id['XmlNote']['patient_permission']);
			for($i=0;$i<count($array);$i++){
				$xml_id['XmlNote']['permissions'][$array[$i]] = $array[$i];
			}
			$this->data = $old_values;
		}
		$xml_id['XmlNote']['clinical_date'] = $this->DateFormat->formatDate2Local($xml_id['XmlNote']['clinical_date'],Configure::read('date_format_us'),false);
		$this->data = $xml_id ;
		$result = $this->XmlNote->find('first',array('fields'=>array('e2_filename'),'order'=>array('XmlNote.id DESC'),'limit'=>1,
				'conditions'=>array('XmlNote.patient_id'=>$id)));
			
		$this->set(array('e2Filename'=>$result));
		$this->set(array('patient_id'=>$id));
			
	}
	public function edit_summary_care_date($id){
		$this->uses = array('IncorporatedPatient') ;
		if(isset($this->request->data['IncorporatedPatient']) && !empty($this->request->data['IncorporatedPatient'])){
			if(!empty($this->request->data['IncorporatedPatient']['date_imported_on'])){
				$this->request->data['IncorporatedPatient']['date_imported_on']= $this->DateFormat->formatDate2STD($this->request->data['IncorporatedPatient']['date_imported_on'],Configure::read('date_format_us')) ;
			}
			$this->IncorporatedPatient->save($this->request->data['IncorporatedPatient']);
			$this->Session->setFlash(__('record updated successfully'),true,array('class'=>'message'));
			$this->redirect($this->referer());
		}
		$incorporate_id = $this->IncorporatedPatient->find('first',array('conditions'=>array('id'=>$id)));
		if(!empty($incorporate_id['IncorporatedPatient']['date_imported_on'])){
			$incorporate_id['IncorporatedPatient']['date_imported_on']= $this->DateFormat->formatDate2local($incorporate_id['IncorporatedPatient']['date_imported_on'],Configure::read('date_format_us'),false) ;
		}
		$this->data = $incorporate_id ;
			
	}
	public function out_box(){
		$session     	= new cakeSession();
		$userid 	 	= $session->read('userid') ;
		$locationId  	= $session->read('locationid') ;
		$this->uses 	= array('TransmittedCcda','XmlNote','Patient');
		$patient_id		= $this->Session->read('patientId');
		$this->set('patient_id',$patient_id);

		$role = $this->Session->read('role');
		$this->set('role',$role);

		$this->TransmittedCcda->bindModel(array('belongsTo'=>array(
				'Patient'=>array('foreignKey'=>'patient_id'),
				'Person'=>array('foreignKey'=>false,'conditions'=>array('Person.id=Patient.person_id')),
		)));

		$this->paginate = array(
				'fields'=>array('TransmittedCcda.*','Patient.lookup_name','Patient.admission_id','Person.age','Person.dob','Person.sex'),
				'limit' => Configure::read('number_of_rows'),
				'order' => array('TransmittedCcda.id' => 'DESC'),
				'conditions'=>array('TransmittedCcda.created_by'=>$userid, 'TransmittedCcda.location_id'=>$locationId),
					
		);
		$data =   $this->paginate('TransmittedCcda') ;

		$this->set("dataOfTransmitted",$data);
		//to display download ccda button for patient login
		if(strtolower($role)=='patient') {
			$id = $this->Session->read('patientId') ;
			$patientData = $this->Patient->find('first',array('admission_type','conditions'=>array('id'=>$id)));
			$result = $this->XmlNote->find('first',array( 'fields'=>array('filename','e2_filename','patients_e2_filename'),'order'=>array('XmlNote.id DESC'),'limit'=>1,
					'conditions'=>array('XmlNote.patient_id'=>$id)));

			$this->set('hasXml',$result) ;
			$this->set('patient_type',$patientData['Patient']['admission_type']);
		}

	}

	public function incorporate($patient_id=null){
		$this->uses = array('Patient','IncorporatedPatient') ;
		$this->Patient->unBindModel(array('hasMany'=>array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->IncorporatedPatient->bindModel(array(
				'belongsTo' => array(
						'Patient' =>array('foreignKey' => 'patient_id'),
				)),false);

		$this->paginate = array(
				'limit' => Configure::read('number_of_rows'),
				'order' => array(
						'IncorporatedPatient.id' => 'asc'
				),
				'fields'=> array('Patient.lookup_name','Patient.id','xml_file','summary_care_date','patient_id','id'),
				'conditions'=>array('IncorporatedPatient.patient_id != 0 ')
		);
		$this->set('data',$this->paginate('IncorporatedPatient'));

	}
	
	
	public function ccdaAddress(){
		$this->autoRender = false ;
		$this->uses = array('TransmittedCcda');
		$searchKey = $this->params->query['term'] ;
		$conditions['TransmittedCcda.to like'] = $searchKey."%";
		//address_type
		$addressArray = $this->TransmittedCcda->find('list', array('fields'=> array('to','address_type'),'conditions'=>$conditions,'group'=>array('TransmittedCcda.to'),'limit'=>Configure::read('number_of_rows')));
		
		$returnArray = array();
		foreach ($addressArray as $key=>$value) { 
			$returnArray[] = array( 'id'=>$value,
					'value'=>$key,
			) ; 
		}
		echo json_encode($returnArray);
		exit;
	}
	
	/*
	 * CCDA Reports
	* Summary of care Reports to hospitals and Specialists
	* Pooja
	*/
	public function referal_to_specialist_report(){
		$this->loadmodel('TransmittedCcda');
		$this->paginate = array(
				'limit' => Configure::read('number_of_rows'),
				'order' => array('TransmittedCcda.id' => 'DESC'),
				'conditions'=>array('TransmittedCcda.referral_to'=>'Specialist','TransmittedCcda.created_by'=>$this->Session->read('userid'),'TransmittedCcda.location_id'=>$this->Session->read('locationid')));
		$this->set('specialist',$this->paginate('TransmittedCcda'));
	}
	
	public function summary_to_hospital_report(){
		$this->loadmodel('TransmittedCcda');
		$this->paginate = array(
				'limit' => Configure::read('number_of_rows'),
				'order' => array('TransmittedCcda.id' => 'DESC'),
				'conditions'=>array('TransmittedCcda.referral_to'=>'Hospital','TransmittedCcda.created_by'=>$this->Session->read('userid'),'TransmittedCcda.location_id'=>$this->Session->read('locationid')));
		$this->set('hospital',$this->paginate('TransmittedCcda'));
		 
	}
	
	public function referral_to_care_giver(){
		$this->loadmodel('TransmittedCcda');
		$this->paginate = array(
				'limit' => Configure::read('number_of_rows'),
				'order' => array('TransmittedCcda.id' => 'DESC'),
				'conditions'=>array('TransmittedCcda.referral_to'=>'Caregiver','TransmittedCcda.created_by'=>$this->Session->read('userid'),'TransmittedCcda.location_id'=>$this->Session->read('locationid')));
		$this->set('care',$this->paginate('TransmittedCcda'));
			
	}
	
	//Report of overdue summary of care
	public function overdue_summary_care(){ 
		$this->uses = array('TransmittedCcda','IncorporatedPatient');
		$sentItems =  $this->TransmittedCcda->find('all',array('fields'=>array('id','patient_id','file_name'),'conditions'=>array('created_by'=>$this->Session->read('userid'),
				'location_id'=>$this->Session->read('locationid'),'TransmittedCcda.address_type'=>'Specialist')));
		$this->paginate = array(
				'limit' => Configure::read('number_of_rows'),
				'order' => array('TransmittedCcda.id' => 'DESC'),
				'conditions'=>array('created_by'=>$this->Session->read('userid'),
									'location_id'=>$this->Session->read('locationid'),'TransmittedCcda.address_type'=>'Specialist'));
		$sentItems = $this->paginate('TransmittedCcda');
		//pr($sentItems);
		$receivedItems = $this->IncorporatedPatient->find('list',array('fields'=>array('xml_file','fromAddress'),'conditions'=>array('created_by'=>$this->Session->read('userid'),
				'location_id'=>$this->Session->read('locationid'),'patient_id IS NULL','fromName IS NOT NULL')));  
		//pr($receivedItems);  
		$this->set(array('sentItems'=>$sentItems,'receivedItems'=>$receivedItems));
	}
	
	public function view_message($id=null){
		$this->uses = array('TransmittedCcda');
		$this->TransmittedCcda->bindModel(array(
				'belongsTo' => array(
						'Patient' =>array('foreignKey' => false,'conditions'=>array('Patient.id=TransmittedCcda.patient_id')))));
		$message=$this->TransmittedCcda->find('first',array('fields'=>array('TransmittedCcda.*','Patient.lookup_name','Patient.sex','Patient.age'),'conditions'=>array('TransmittedCcda.id'=>$id)));
		$this->set('message',$message);
	}
	//update notify status of sent emails
	function updateNotify(){
		$this->autoRender = false ;
		$this->layout = false ;
		if($this->request->data){
			$this->uses = array('TransmittedCcda') ;
			$ids = explode(",",$this->request->data['ids']);
			foreach ($ids as $key => $value){
				$this->TransmittedCcda->updateAll(array('notify'=>'"yes"'),array('id'=>$value)) ;
				$this->TransmittedCcda->id ='';
			} 
		}
	}
	function referralToHospital($patientID){
		if(empty($patientID)){
			$this->redirect($this->referer());
		}
		$this->patient_info($patientID);
		$this->uses = array('ReferralToHospital');
		$this->set('patientID',$patientID);
		if (!empty($this->request->data)){
			$this->request->data['ReferralToHospital']['patient_id']=$patientID;
			$this->request->data["ReferralToHospital"]['transitioned_date'] = $this->DateFormat->formatDate2STD($this->request->data["ReferralToHospital"]['transitioned_date'],Configure::read('date_format'));
			$this->request->data["ReferralToHospital"]['summary_of_care_provided_date'] = $this->DateFormat->formatDate2STD($this->request->data["ReferralToHospital"]['summary_of_care_provided_date'],Configure::read('date_format'));
			$this->request->data["ReferralToHospital"]['follow_up_date'] = $this->DateFormat->formatDate2STD($this->request->data["ReferralToHospital"]['follow_up_date'],Configure::read('date_format'));
			$this->request->data["ReferralToHospital"]['discharge_date'] = $this->DateFormat->formatDate2STD($this->request->data["ReferralToHospital"]['discharge_date'],Configure::read('date_format'));
			$this->request->data['ReferralToHospital']['modify_time']=date("Y-m-d H:i:s");
			$this->request->data['ReferralToHospital']['modified_by']=$this->Session->read('userid');
			$this->request->data['ReferralToHospital']['created_by']=$this->Session->read('userid');
			$this->request->data['ReferralToHospital']['create_time']=date("Y-m-d H:i:s");
			$this->request->data['ReferralToHospital']['location_id']=$this->Session->read('locationid');
			/* if($this->request->data['ReferralToHospital']['id'] != ''){
				$this->request->data['ReferralToHospital']['modify_time']=date("Y-m-d H:i:s");
				$this->request->data['ReferralToHospital']['modified_by']=$this->Session->read('userid');
				$this->ReferralToHospital->save($this->request->data);
				$this->Session->setFlash(__('Record Update Sucessfully'),'default',array('class'=>'message'));
				$this->redirect(array('controller'=>'ccda','action'=>'referralToHospital'));
			}else{
				$this->request->data['ReferralToHospital']['created_by']=$this->Session->read('userid');
				$this->request->data['ReferralToHospital']['create_time']=date("Y-m-d H:i:s");
				$this->ReferralToHospital->save($this->request->data);
				$this->Session->setFlash(__('Record Save Sucessfully'),'default',array('class'=>'message'));
				$this->redirect(array('controller'=>'ccda','action'=>'referralToHospital'));
			} */
			$this->ReferralToHospital->save($this->request->data);
			$this->Session->setFlash(__('Record Save Sucessfully'),'default',array('class'=>'message'));
			$this->redirect(array('controller'=>'PatientsTrackReports','action'=>'sbar',$patientID,'Summary'));
			
		}
		/* $this->ReferralToHospital->bindModel(array(
				'belongsTo' => array(
						'User' =>array('foreignKey' => false,'conditions'=>array('User.id=ReferralToHospital.doctor_id'),'fields'=>array('id')),
						'DoctorProfile' =>array('foreignKey' => false,'conditions'=>array('DoctorProfile.user_id=User.id'),'fields'=>array('doctor_name')),
				)),false); */
		$record_detail = $this->ReferralToHospital->find('first',array('conditions'=>array('ReferralToHospital.patient_id'=>$patientID)));
	//	$this->data=$record_detail;
		
	}
	
	//function to send referral to specialist
	function referralToSpecialist($patientID=null){
	//	$this->layout = 'advance_ajax' ;
		if(empty($patientID)){
			$this->redirect($this->referer());
		}
		$this->patient_info($patientID);
		$this->uses = array('ReferralToSpecialist');
		$this->set('patientID',$patientID);
		if (!empty($this->request->data)){
			$this->request->data['ReferralToSpecialist']['patient_id']=$patientID;
			$this->request->data["ReferralToSpecialist"]['referral_initiated_date'] = $this->DateFormat->formatDate2STD($this->request->data["ReferralToSpecialist"]['referral_initiated_date'],Configure::read('date_format'));
			$this->request->data["ReferralToSpecialist"]['date_summary'] = $this->DateFormat->formatDate2STD($this->request->data["ReferralToSpecialist"]['date_summary'],Configure::read('date_format'));
			$this->request->data["ReferralToSpecialist"]['appointment_date'] = $this->DateFormat->formatDate2STD($this->request->data["ReferralToSpecialist"]['appointment_date'],Configure::read('date_format'));
			$this->request->data["ReferralToSpecialist"]['expected_date'] = $this->DateFormat->formatDate2STD($this->request->data["ReferralToSpecialist"]['expected_date'],Configure::read('date_format'));
			$this->request->data["ReferralToSpecialist"]['report_date'] = $this->DateFormat->formatDate2STD($this->request->data["ReferralToSpecialist"]['report_date'],Configure::read('date_format'));
			$this->request->data['ReferralToSpecialist']['modify_time']=date("Y-m-d H:i:s");
			$this->request->data['ReferralToSpecialist']['modified_by']=$this->Session->read('userid');
			$this->request->data['ReferralToSpecialist']['created_by']=$this->Session->read('userid');
			$this->request->data['ReferralToSpecialist']['create_time']=date("Y-m-d H:i:s");
			$this->request->data['ReferralToSpecialist']['location_id']=$this->Session->read('locationid');
			$this->ReferralToSpecialist->save($this->request->data);
			$this->Session->setFlash(__('Record Save Sucessfully'),'default',array('class'=>'message'));
			$this->redirect(array('controller'=>'PatientsTrackReports','action'=>'sbar',$patientID,'Summary'));
				
		}
		/* $this->ReferralToSpecialist->bindModel(array(
				'belongsTo' => array(
						'User' =>array('foreignKey' => false,'conditions'=>array('User.id=ReferralToSpecialist.doctor_id'),'fields'=>array('id')),
						'DoctorProfile' =>array('foreignKey' => false,'conditions'=>array('DoctorProfile.user_id=User.id'),'fields'=>array('doctor_name')),
				)),false); */
		$record_detail = $this->ReferralToSpecialist->find('first',array('conditions'=>array('ReferralToSpecialist.patient_id'=>$patientID)));
	//	$this->data=$record_detail;
		
	}
	public function referral_to_hospital_report(){
		$this->loadmodel('ReferralToHospital');
		$this->paginate = array(
				'limit' => Configure::read('number_of_rows'),
				'order' => array('ReferralToHospital.id' => 'DESC'),
				'conditions'=>array('ReferralToHospital.created_by'=>$this->Session->read('userid'),
						'ReferralToHospital.location_id'=>$this->Session->read('locationid')));
		$this->set('referralToHospital',$this->paginate('ReferralToHospital'));
	}

	public function referral_to_specialist_report(){
		$this->loadmodel('ReferralToSpecialist');
		$this->paginate = array(
				'limit' => Configure::read('number_of_rows'),
				'order' => array('ReferralToSpecialist.id' => 'DESC'),
				'conditions'=>array('ReferralToSpecialist.created_by'=>$this->Session->read('userid'),'ReferralToSpecialist.location_id'=>$this->Session->read('locationid')));
		$this->set('referralToSpecialist',$this->paginate('ReferralToSpecialist'));
	}
	
	public function referral_note($patientId=NULL){
		$this->uses=array('ReferralToSpecialist');
		$this->layout="advance_ajax";
		$this->set('patientId',$patientId);
		if($this->request->data){			
				$this->request->data['ReferralToSpecialist']['patient_id']=$patientId;
				$this->request->data['ReferralToSpecialist']['referred_to']='Specialist';
				$this->request->data['ReferralToSpecialist']['specialist_name']=$this->request->data['referal_note']['physician_name'];
				$this->request->data['ReferralToSpecialist']['speciality_specialist']=$this->request->data['referal_note']['speciality_name'];
				$this->request->data['ReferralToSpecialist']['created_by']=$this->Session->read('userid');
				$this->request->data['ReferralToSpecialist']['create_time']=date("Y-m-d H:i:s");
				$this->request->data['ReferralToSpecialist']['is_sent']='0';
				$this->request->data['ReferralToSpecialist']['location_id']=$this->Session->read('locationid');
				$this->ReferralToSpecialist->save($this->request->data['ReferralToSpecialist']);
			}
		}
	
}