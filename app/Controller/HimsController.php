<?php/** * MyNewController * * A new controller example following CakePHP conventions. */ use Cake\ORM\TableRegistry;use Cake\Datasource\ConnectionManager;class HimsController extends AppController {    public $name = 'Hims';         public function beforeFilter() {    parent::beforeFilter(); // Make sure to call the parent beforeFilter    // Allow patient_details action without authentication    $this->Auth->allow('patient_details'); $this->Auth->allow('patient_details_ride');    // Load the database connection with 'db_hope' and 'db_ayushman'    $this->loadDatabaseConnection('db_hope');    $this->loadDatabaseConnection('db_ayushman');}    public function index() {          }      public function patient_details() {    $this->autoRender = false; // Disable view rendering    $this->response->type('json'); // Set response type to JSON    App::import('Vendor', 'DrmhopeDB');        // Create connections to all three databases    $hopeDB = new DrmhopeDB('db_HopeHospital');    $ayushmanDB = new DrmhopeDB('db_Ayushman');    $dbhopeDB = new DrmhopeDB('db_hope');        // Models to be loaded    $models = ['Patient', 'Person', 'User', 'TariffStandard', 'DischargeSummary'];        // Load models    foreach ($models as $model) {        $this->loadModel($model);    }    // Retrieve mobile number from request    $mobile = $this->request->data('mobile');        if (empty($mobile)) {        echo json_encode(['status' => 'error', 'message' => 'Mobile number required.']);        return;    }        $mobile = substr($mobile, -10); // Normalize mobile number to last 10 digits        try {        // Initialize database connections        $databases = [            // $hopeDB,  // Hope Hospital DB            $ayushmanDB,  // Ayushman Hospital DB            $dbhopeDB  // Hope Group DB        ];        $patientData = [];        // Loop through each database and fetch data        foreach ($databases as $dbInstance) {            // Make the connection to the current database            $dbInstance->makeConnection($this->Patient);            $dbInstance->makeConnection($this->Person);            $dbInstance->makeConnection($this->User);            $dbInstance->makeConnection($this->TariffStandard);            $dbInstance->makeConnection($this->DischargeSummary);            // Fetch patient details from the current database            $results = $this->Patient->find('all', [                'fields' => [                    'Patient.id',                    'Patient.form_received_on',                    'Patient.status',                    'Patient.market_team',                    'Patient.create_time',                    'Person.admission_type',                    'Person.first_name',                    'Person.last_name',                    'Person.mobile',                    'Person.age',                    'Person.sex',                    'Person.blood_group',                    'Person.allergies',                    'Person.next_of_kin_name',                    'Person.next_of_kin_mobile',                    'Person.relationship_manager',                    'Person.patient_uid',                    'User.first_name as doctor_first_name',                    'User.last_name as doctor_last_name',                    'TariffStandard.name as tariff_name',                    'DischargeSummary.final_diagnosis',                    'Person.state', 'Person.city', 'Person.plot_no', 'Person.pin_code',                    'Person.agent_id'                ],                'joins' => [                    [                        'table' => 'persons',                        'alias' => 'Person',                        'type' => 'INNER',                        'conditions' => ['Patient.person_id = Person.id']                    ],                    [                        'table' => 'users',                        'alias' => 'User',                        'type' => 'LEFT',                        'conditions' => ['Patient.doctor_id = User.id']                    ],                    [                        'table' => 'tariff_standards',                        'alias' => 'TariffStandard',                        'type' => 'LEFT',                        'conditions' => ['Patient.tariff_standard_id = TariffStandard.id']                    ],                    [                        'table' => 'discharge_summaries',                        'alias' => 'DischargeSummary',                        'type' => 'LEFT',                        'conditions' => ['DischargeSummary.patient_id = Patient.id']                    ]                ],                'conditions' => ['Person.mobile' => $mobile],                'order' => ['Patient.create_time' => 'DESC'], // Order by create_time descending            ]);            if (!empty($results)) {                foreach ($results as $result) {                    $patientData[] = [                        'Patient Name' => $result['Person']['first_name'] . ' ' . $result['Person']['last_name'],                        'Patient UUID' => $result['Person']['patient_uid'],                        'Admission Date' => $result['Patient']['form_received_on'],                        'Next of Kin Name' => $result['Person']['next_of_kin_name'],                        'Next of Kin Mobile' => $result['Person']['next_of_kin_mobile'],                        'Allergy' => $result['Person']['allergies'],                        'Patient Tariff' => $result['TariffStandard']['tariff_name'],                        'Blood Group' => $result['Person']['blood_group'],                        'Patient Status' => $result['Patient']['status'],                        'Doctor' => $result['User']['doctor_first_name'] . ' ' . $result['User']['doctor_last_name'],                        'Admission Type' => $result['Person']['admission_type'],                        'Age/Sex' => $result['Person']['age'] . ' ' . $result['Person']['sex'],                        'Diagnosis' => $result['DischargeSummary']['final_diagnosis'],                        'Mobile No' => $result['Person']['mobile'],                        'Address' => $result['Person']['state'] . ', ' . $result['Person']['city'] . ', ' . $result['Person']['plot_no'] . ', ' . $result['Person']['pin_code'],                        'Agent Id' => $result['Person']['agent_id'],                        'Driver' => $result['Person']['relationship_manager'],                        'Date' => $result['Patient']['create_time'],                        'Hospital' => $dbName // Adding database name for reference                    ];                }            }        }        // After collecting all patient data from the three databases, sort by admission date (descending)        usort($patientData, function ($a, $b) {            return strtotime($b['Admission Date']) - strtotime($a['Admission Date']);        });        // Return the most recent patient entry from all databases        if (empty($patientData)) {            echo json_encode(['status' => 'error', 'message' => 'No patients found for the provided mobile number.']);        } else {            // Store the most recent entry in $response and return it            $response = [                'Personal Details' => $patientData[0] // Only return the latest record            ];            echo json_encode(['status' => 'success', 'data' => $response]);        }    } catch (Exception $e) {        echo json_encode(['status' => 'error', 'message' => $e->getMessage()]);    }}public function patient_details_ride() {    $this->autoRender = false; // Disable view rendering    $this->response->type('json'); // Set response type to JSON    App::import('Vendor', 'DrmhopeDB');        // Create connections to all three databases    $hopeDB = new DrmhopeDB('db_HopeHospital');    $ayushmanDB = new DrmhopeDB('db_Ayushman');    $dbhopeDB = new DrmhopeDB('db_hope');        // Models to be loaded    $models = ['Patient', 'Person', 'User', 'TariffStandard', 'DischargeSummary'];        // Load models    foreach ($models as $model) {        $this->loadModel($model);    }    // Define the date condition (after 15th March 2025)    $startDate = '2025-03-15';    try {        $databases = [            'Hope Hospital' => $hopeDB,             'Ayushman Hospital' => $ayushmanDB,             // 'Hope Group' => $dbhopeDB        ];        $patientData = [];        // Loop through each database and fetch data        foreach ($databases as $dbName => $dbInstance) {            // Make the connection to the current database            $dbInstance->makeConnection($this->Patient);            $dbInstance->makeConnection($this->Person);            $dbInstance->makeConnection($this->User);            $dbInstance->makeConnection($this->TariffStandard);            $dbInstance->makeConnection($this->DischargeSummary);            // Fetch patient details where admission date is after 15/03/2025            $results = $this->Patient->find('all', [                'fields' => [                    'Patient.id',                    'Patient.form_received_on',                    'Patient.status',                    'Patient.market_team',                    'Patient.create_time',                    'Person.admission_type',                    'Person.first_name',                    'Person.last_name',                    'Person.mobile',                    'Person.age',                    'Person.sex',                    'Person.blood_group',                    'Person.allergies',                    'Person.next_of_kin_name',                    'Person.next_of_kin_mobile',                    'Person.relationship_manager',                    'Person.patient_uid',                    'User.first_name as doctor_first_name',                    'User.last_name as doctor_last_name',                    'TariffStandard.name as tariff_name',                    'DischargeSummary.final_diagnosis',                    'Person.state', 'Person.city', 'Person.plot_no', 'Person.pin_code',                    'Person.agent_id'                ],                'joins' => [                    [                        'table' => 'persons',                        'alias' => 'Person',                        'type' => 'INNER',                        'conditions' => ['Patient.person_id = Person.id']                    ],                    [                        'table' => 'users',                        'alias' => 'User',                        'type' => 'LEFT',                        'conditions' => ['Patient.doctor_id = User.id']                    ],                    [                        'table' => 'tariff_standards',                        'alias' => 'TariffStandard',                        'type' => 'LEFT',                        'conditions' => ['Patient.tariff_standard_id = TariffStandard.id']                    ],                    [                        'table' => 'discharge_summaries',                        'alias' => 'DischargeSummary',                        'type' => 'LEFT',                        'conditions' => ['DischargeSummary.patient_id = Patient.id']                    ]                ],                'conditions' => ['Patient.form_received_on >' => $startDate],     'order' => ['Patient.create_time' => 'DESC']  // Sort by form_received_on in descending order            ]);            if (!empty($results)) {                foreach ($results as $result) {                    $patientData[] = [                        'Patient Name' => $result['Person']['first_name'] . ' ' . $result['Person']['last_name'],                        'Patient UUID' => $result['Person']['patient_uid'],                        'Admission Date' => $result['Patient']['form_received_on'],                        'Next of Kin Name' => $result['Person']['next_of_kin_name'],                        'Next of Kin Mobile' => $result['Person']['next_of_kin_mobile'],                        'Allergy' => $result['Person']['allergies'],                        'Patient Tariff' => $result['TariffStandard']['tariff_name'],                        'Blood Group' => $result['Person']['blood_group'],                        'Patient Status' => $result['Patient']['status'],                        'Doctor' => $result['User']['doctor_first_name'] . ' ' . $result['User']['doctor_last_name'],                        'Admission Type' => $result['Person']['admission_type'],                        'Age/Sex' => $result['Person']['age'] . ' ' . $result['Person']['sex'],                        'Diagnosis' => $result['DischargeSummary']['final_diagnosis'],                        'Mobile No' => $result['Person']['mobile'],                        'Address' => $result['Person']['state'] . ', ' . $result['Person']['city'] . ', ' . $result['Person']['plot_no'] . ', ' . $result['Person']['pin_code'],                        'Agent Id' => $result['Person']['agent_id'],                        'Driver' => $result['Person']['relationship_manager'],                        'Date' => $result['Patient']['create_time'],                        'Hospital' => $dbName // ✅ Added database name field                    ];                }            }        }        // ✅ Step 1: Sort the data **AFTER** merging from all databases        usort($patientData, function ($a, $b) {            return strtotime($a['Admission Date']) - strtotime($b['Admission Date']);        });        if (empty($patientData)) {            echo json_encode(['status' => 'error', 'message' => 'No patients found after 15th March 2025.']);        } else {            echo json_encode(['status' => 'success', 'data' => $patientData]);        }    } catch (Exception $e) {        echo json_encode(['status' => 'error', 'message' => $e->getMessage()]);    }}private function formatPatientData($patientInfo) {    return [        'Patient Name' => $patientInfo['Person']['first_name'] . ' ' . $patientInfo['Person']['last_name'],        'Patient UUID' => $patientInfo['Person']['patient_uid'],        'Admission Date' => $patientInfo['Patient']['form_received_on'],        'Next of Kin Name' => $patientInfo['Person']['next_of_kin_name'],        'Next of Kin Mobile' => $patientInfo['Person']['next_of_kin_mobile'],        'Allergy' => $patientInfo['Person']['allergies'],        'Patient Tariff' => $patientInfo['TariffStandard']['tariff_name'],        'Blood Group' => $patientInfo['Person']['blood_group'],        'Patient Status' => $patientInfo['Patient']['status'],        'Doctor' => $patientInfo['User']['doctor_first_name'] . ' ' . $patientInfo['User']['doctor_last_name'],        'Admission Type' => $patientInfo['Person']['admission_type'],        'Age/Sex' => $patientInfo['Person']['age'] . ' ' . $patientInfo['Person']['sex'],        'Diagnosis' => $patientInfo['DischargeSummary']['final_diagnosis'],        'Mobile No' => $patientInfo['Person']['mobile'],        'Address' => $patientInfo['Person']['state'] . ', ' . $patientInfo['Person']['city'] . ', ' . $patientInfo['Person']['plot_no'] . ', ' . $patientInfo['Person']['pin_code'],        'Agent Id' => $patientInfo['Person']['agent_id']    ];}public $components = array('RequestHandler'); // Handles JSON and XML responsesprivate function loadDatabaseConnection($dbName) {    App::import('Vendor', 'DrmhopeDB');    $dbConnection = new DrmhopeDB($dbName);    try {        $dbConnection->makeConnection($this->{$model});        debug("Connected to database: $dbName");    } catch (Exception $e) {        debug("Connection failed for database: $dbName - " . $e->getMessage());    }}}