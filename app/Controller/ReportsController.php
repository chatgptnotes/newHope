<?php
/**
 * ReportsController file
 *
 * PHP 5
 *
 * @copyright     Copyright 2011 KloudData Inc.  (http://www.klouddata.com/)
 * @link          http://www.klouddata.com/
 * @package       Hope
 * @since         CakePHP(tm) v 2.0
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 * @author        Santosh R. Yadav
 */


class ReportsController extends AppController  {
	public $name = 'Reports';
	public $uses = null;
	public $helpers = array('Html','Form', 'Js','Number','DateFormat','General','JsFusionChart','PhpExcel');
	public $components = array('RequestHandler','Auth','Session','Acl','DateFormat','PhpExcel');

	function viewPdf($id = null)
	{
			

		$this->Person->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("Person.patient_uid=Patient.patient_id"))
				)));
		if(!empty($this->params->query)){
			$search_ele = $this->params->query  ;//make it get

			$search_key['Patient.is_deleted'] = 0;
			if(!empty($search_ele['lookup_name'])){
				$search_key['Patient.lookup_name like '] = "%".$search_ele['lookup_name']."%" ;
			}if(!empty($search_ele['patient_id'])){
				$search_key['Patient.patient_id like '] = "%".$search_ele['patient_id'] ;
			}if(!empty($search_ele['admission_id'])){
				$search_key['Patient.admission_id like '] = "%".$search_ele['admission_id'] ;
			}

			$search_key['Patient.is_deleted'] = 0;
			$search_key['Patient.is_discharge'] = 0;//display only non-discharge patient

			$pdfData  = $this->Person->find('all',array('fields'=>array('Person.age,Person.sex,Patient.lookup_name,Patient.admission_id,
					Patient.patient_id,Patient.admission_type'),'conditions'=>array($search_key,'Patient.admission_type'=>'IPD','Patient.location_id'=>$this->Session->read('locationid'))));

			$this->set('pdfData',$pdfData);

		}else{
			$pdfData  = $this->Person->find('all',array('order' => array('Patient.create_time' => 'DESC'),'fields'=>array('Person.age,Person.sex,Patient.lookup_name,Patient.admission_id,
					Patient.patient_id,Patient.admission_type'),'conditions'=>array('Patient.location_id'=>$this->Session->read('locationid'),'Patient.admission_type'=>'IPD','Patient.is_deleted'=>0,'Patient.is_discharge'=>0)));
			//pr($pdfData);exit;
			$this->set('pdfData',$pdfData);
		}

		$this->layout = 'pdf'; //this will use the pdf.ctp layout
		$this->render();
			
	}

	public function admin_hospinfection(){

		$this->uses = array('TimeSlot','Ward','MicroOrganism','Patient');
		$reportMonth=$this->request->data['reportMonth'];
		$data1=$this->request->data[reportType];

		if(isset($reportMonth) && isset($data1)){
			$patient_id= $this->MicroOrganism->find('all',array('fields'=>array('MicroOrganism.patient_id'),'conditions'=>array($data1=>"Yes",'MicroOrganism.submit_date LIKE'=> "%"."-".$reportMonth."-"."%")));
			$niOfid= count($patient_id);
			$p_id=array();
			for($k=0;$k<$niOfid;$k++){
				$p_id[]= $patient_id[$k][MicroOrganism][patient_id];
			}
			$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
			$ward_id = $this->Patient->find('all',array('fields'=>array('Patient.Ward_id'),'conditions'=>array('Patient.id'=>$p_id)));
			$niOfwid= count($ward_id);
			$w_id=array();
			for($k=0;$k<$niOfwid;$k++){
				$w_id[]= $ward_id[$k][Patient][Ward_id];
			}
			$haidata = $this->TimeSlot->find('all',array('fields'=>array('TimeSlot.full_name','Role.name','Ward.name'),
					'conditions'=>array('TimeSlot.ward_id'=>$w_id,'TimeSlot.date_from LIKE'=> "%"."-".$reportMonth."-"."%")));
			$ward=array();
			$cnthai= count($haidata);
			for($k=0;$k<$cnthai;$k++){
					
				$ward[$haidata[$k][Ward][name]][]= $haidata[$k][TimeSlot][full_name]." (".$haidata[$k][Role][name].")   ";
			}
			$this->set(compact('data1','ward','reportMonth'));
		}
	}

	/**
	 * staff survey reports
	 *
	 */

	public function admin_staff_survey_reports() {
		$this->set('title_for_layout', __('Staff Survey Reports', true));
		$this->uses = array('StaffSurvey');
		$totalNumber = $this->StaffSurvey->find('count', array('conditions' => array('StaffSurvey.location_id' => $this->Session->read('locationid')), 'group' => array('user_id')));

		$yesResults = $this->StaffSurvey->find('all', array('fields' => array('COUNT(*) AS report_results', 'question_id', 'answer', 'location_id', 'id'), 'conditions' => array('StaffSurvey.location_id' => $this->Session->read('locationid'), 'StaffSurvey.answer' => 'Y'), 'group' => array('question_id', 'answer'), 'order' => array('question_id')));
		foreach($yesResults as $yesResultsVal) {
			$yesQuestionIdArray[] = $yesResultsVal['StaffSurvey']['question_id'];
			$yesResultArray[$yesResultsVal['StaffSurvey']['question_id']] = $yesResultsVal[0]['report_results'];
		}
		$noResults = $this->StaffSurvey->find('all', array('fields' => array('COUNT(*) AS report_results', 'question_id', 'answer', 'location_id', 'id'), 'conditions' => array('StaffSurvey.location_id' => $this->Session->read('locationid'), 'StaffSurvey.answer' => 'N'), 'group' => array('question_id', 'answer'), 'order' => array('question_id')));
		foreach($noResults as $noResultsVal) {
			$noQuestionIdArray[] = $noResultsVal['StaffSurvey']['question_id'];
			$noResultArray[$noResultsVal['StaffSurvey']['question_id']] = $noResultsVal[0]['report_results'];
		}
		//print_r($yesQuestionIdArray);exit;
		$this->set('yesQuestionIdArray', $yesQuestionIdArray);
		$this->set('yesResultArray', $yesResultArray);
		$this->set('noQuestionIdArray', $noQuestionIdArray);
		$this->set('noResultArray', $noResultArray);
		$this->set('totalNumber', $totalNumber);
	}

	/**
	 * download staff survey xls reports
	 *
	 */

	public function admin_staff_survey_xlsreports() {
		$this->set('title_for_layout', __('Staff Survey Reports', true));
		$this->uses = array('StaffSurvey');
		$totalNumber = $this->StaffSurvey->find('count', array('conditions' => array('StaffSurvey.location_id' => $this->Session->read('locationid')), 'group' => array('user_id')));

		$yesResults = $this->StaffSurvey->find('all', array('fields' => array('COUNT(*) AS report_results', 'question_id', 'answer', 'location_id', 'id'), 'conditions' => array('StaffSurvey.location_id' => $this->Session->read('locationid'), 'StaffSurvey.answer' => 'Y'), 'group' => array('question_id', 'answer'), 'order' => array('question_id')));
		foreach($yesResults as $yesResultsVal) {
			$yesQuestionIdArray[] = $yesResultsVal['StaffSurvey']['question_id'];
			$yesResultArray[$yesResultsVal['StaffSurvey']['question_id']] = $yesResultsVal[0]['report_results'];
		}
		$noResults = $this->StaffSurvey->find('all', array('fields' => array('COUNT(*) AS report_results', 'question_id', 'answer', 'location_id', 'id'), 'conditions' => array('StaffSurvey.location_id' => $this->Session->read('locationid'), 'StaffSurvey.answer' => 'N'), 'group' => array('question_id', 'answer'), 'order' => array('question_id')));
		foreach($noResults as $noResultsVal) {
			$noQuestionIdArray[] = $noResultsVal['StaffSurvey']['question_id'];
			$noResultArray[$noResultsVal['StaffSurvey']['question_id']] = $noResultsVal[0]['report_results'];
		}
		//print_r($yesQuestionIdArray);exit;
		$this->set('yesQuestionIdArray', $yesQuestionIdArray);
		$this->set('yesResultArray', $yesResultArray);
		$this->set('noQuestionIdArray', $noQuestionIdArray);
		$this->set('noResultArray', $noResultArray);
		$this->set('totalNumber', $totalNumber);
		$this->layout = false;
	}

	/**
	 * patient survey reports
	 *
	 */

	public function admin_patient_survey_reports() {
		$this->set('title_for_layout', __('Patient Survey Reports', true));
		$this->uses = array('PatientSurvey');
		$totalNumber = $this->PatientSurvey->find('count', array('conditions' => array('PatientSurvey.location_id' => $this->Session->read('locationid')), 'group' => array('PatientSurvey.patient_id')));

		$strongAgreeResults = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS report_results', 'question_id', 'answer', 'location_id', 'id'), 'conditions' => array('PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.answer' => 'Strongly Agree'), 'group' => array('question_id', 'answer'), 'order' => array('question_id')));
		foreach($strongAgreeResults as $strongAgreeResultsVal) {
			$strongAgreeQuestionIdArray[] = $strongAgreeResultsVal['PatientSurvey']['question_id'];
			$strongAgreeResultArray[$strongAgreeResultsVal['PatientSurvey']['question_id']] = $strongAgreeResultsVal[0]['report_results'];
			$this->set('strongAgreeQuestionIdArray', $strongAgreeQuestionIdArray);
			$this->set('strongAgreeResultArray', $strongAgreeResultArray);
		}
		$agreeResults = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS report_results', 'question_id', 'answer', 'location_id', 'id'), 'conditions' => array('PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.answer' => 'Agree'), 'group' => array('question_id', 'answer'), 'order' => array('question_id')));
		foreach($agreeResults as $agreeResultsVal) {
			$agreeQuestionIdArray[] = $agreeResultsVal['PatientSurvey']['question_id'];
			$agreeResultArray[$agreeResultsVal['PatientSurvey']['question_id']] = $agreeResultsVal[0]['report_results'];
			$this->set('agreeQuestionIdArray', $agreeQuestionIdArray);
			$this->set('agreeResultArray', $agreeResultArray);
		}
		$nandResults = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS report_results', 'question_id', 'answer', 'location_id', 'id'), 'conditions' => array('PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.answer' => 'Neither Agree Nor  Disagree'), 'group' => array('question_id', 'answer'), 'order' => array('question_id')));
		foreach($nandResults as $nandResultsVal) {
			$nandQuestionIdArray[] = $nandResultsVal['PatientSurvey']['question_id'];
			$nandResultArray[$nandResultsVal['PatientSurvey']['question_id']] = $nandResultsVal[0]['report_results'];
			$this->set('nandQuestionIdArray', $nandQuestionIdArray);
			$this->set('nandResultArray', $nandResultArray);
		}
		$disagreeResults = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS report_results', 'question_id', 'answer', 'location_id', 'id'), 'conditions' => array('PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.answer' => 'Disagree'), 'group' => array('question_id', 'answer'), 'order' => array('question_id')));
		foreach($disagreeResults as $disagreeResultsVal) {
			$disagreeQuestionIdArray[] = $disagreeResultsVal['PatientSurvey']['question_id'];
			$disagreeResultArray[$disagreeResultsVal['PatientSurvey']['question_id']] = $disagreeResultsVal[0]['report_results'];
			$this->set('disagreeQuestionIdArray', $disagreeQuestionIdArray);
			$this->set('disagreeResultArray', $disagreeResultArray);
		}
		$strongDisagreeResults = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS report_results', 'question_id', 'answer', 'location_id', 'id'), 'conditions' => array('PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.answer' => 'Strongly Disagree'), 'group' => array('question_id', 'answer'), 'order' => array('question_id')));
		foreach($strongDisagreeResults as $strongDisagreeResultsVal) {
			$strongDisagreeQuestionIdArray[] = $strongDisagreeResultsVal['PatientSurvey']['question_id'];
			$strongDisagreeResultArray[$strongDisagreeResultsVal['PatientSurvey']['question_id']] = $strongDisagreeResultsVal[0]['report_results'];
			$this->set('strongDisagreeQuestionIdArray', $strongDisagreeQuestionIdArray);
			$this->set('strongDisagreeResultArray', $strongDisagreeResultArray);
		}
		$naResults = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS report_results', 'question_id', 'answer', 'location_id', 'id'), 'conditions' => array('PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.answer' => 'Not Applicable'), 'group' => array('question_id', 'answer'), 'order' => array('question_id')));
		foreach($naResults as $naResultsVal) {
			$naQuestionIdArray[] = $naResultsVal['PatientSurvey']['question_id'];
			$naResultArray[$naResultsVal['PatientSurvey']['question_id']] = $naResultsVal[0]['report_results'];
			$this->set('naQuestionIdArray', $naQuestionIdArray);
			$this->set('naResultArray', $naResultArray);
		}
		$this->set('totalNumber', $totalNumber);
	}

	/**
	 * download patient survey xls reports
	 *
	 */

	public function admin_patient_survey_xlsreports() {
		$this->set('title_for_layout', __('Patient Survey Reports', true));
		$this->uses = array('PatientSurvey');
		$totalNumber = $this->PatientSurvey->find('count', array('conditions' => array('PatientSurvey.location_id' => $this->Session->read('locationid')), 'group' => array('PatientSurvey.patient_id')));

		$strongAgreeResults = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS report_results', 'question_id', 'answer', 'location_id', 'id'), 'conditions' => array('PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.answer' => 'Strongly Agree'), 'group' => array('question_id', 'answer'), 'order' => array('question_id')));
		foreach($strongAgreeResults as $strongAgreeResultsVal) {
			$strongAgreeQuestionIdArray[] = $strongAgreeResultsVal['PatientSurvey']['question_id'];
			$strongAgreeResultArray[$strongAgreeResultsVal['PatientSurvey']['question_id']] = $strongAgreeResultsVal[0]['report_results'];
			$this->set('strongAgreeQuestionIdArray', $strongAgreeQuestionIdArray);
			$this->set('strongAgreeResultArray', $strongAgreeResultArray);
		}
		$agreeResults = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS report_results', 'question_id', 'answer', 'location_id', 'id'), 'conditions' => array('PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.answer' => 'Agree'), 'group' => array('question_id', 'answer'), 'order' => array('question_id')));
		foreach($agreeResults as $agreeResultsVal) {
			$agreeQuestionIdArray[] = $agreeResultsVal['PatientSurvey']['question_id'];
			$agreeResultArray[$agreeResultsVal['PatientSurvey']['question_id']] = $agreeResultsVal[0]['report_results'];
			$this->set('agreeQuestionIdArray', $agreeQuestionIdArray);
			$this->set('agreeResultArray', $agreeResultArray);
		}
		$nandResults = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS report_results', 'question_id', 'answer', 'location_id', 'id'), 'conditions' => array('PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.answer' => 'Neither Agree Nor  Disagree'), 'group' => array('question_id', 'answer'), 'order' => array('question_id')));
		foreach($nandResults as $nandResultsVal) {
			$nandQuestionIdArray[] = $nandResultsVal['PatientSurvey']['question_id'];
			$nandResultArray[$nandResultsVal['PatientSurvey']['question_id']] = $nandResultsVal[0]['report_results'];
			$this->set('nandQuestionIdArray', $nandQuestionIdArray);
			$this->set('nandResultArray', $nandResultArray);
		}
		$disagreeResults = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS report_results', 'question_id', 'answer', 'location_id', 'id'), 'conditions' => array('PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.answer' => 'Disagree'), 'group' => array('question_id', 'answer'), 'order' => array('question_id')));
		foreach($disagreeResults as $disagreeResultsVal) {
			$disagreeQuestionIdArray[] = $disagreeResultsVal['PatientSurvey']['question_id'];
			$disagreeResultArray[$disagreeResultsVal['PatientSurvey']['question_id']] = $disagreeResultsVal[0]['report_results'];
			$this->set('disagreeQuestionIdArray', $disagreeQuestionIdArray);
			$this->set('disagreeResultArray', $disagreeResultArray);
		}
		$strongDisagreeResults = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS report_results', 'question_id', 'answer', 'location_id', 'id'), 'conditions' => array('PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.answer' => 'Strongly Disagree'), 'group' => array('question_id', 'answer'), 'order' => array('question_id')));
		foreach($strongDisagreeResults as $strongDisagreeResultsVal) {
			$strongDisagreeQuestionIdArray[] = $strongDisagreeResultsVal['PatientSurvey']['question_id'];
			$strongDisagreeResultArray[$strongDisagreeResultsVal['PatientSurvey']['question_id']] = $strongDisagreeResultsVal[0]['report_results'];
			$this->set('strongDisagreeQuestionIdArray', $strongDisagreeQuestionIdArray);
			$this->set('strongDisagreeResultArray', $strongDisagreeResultArray);
		}
		$naResults = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS report_results', 'question_id', 'answer', 'location_id', 'id'), 'conditions' => array('PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.answer' => 'Not Applicable'), 'group' => array('question_id', 'answer'), 'order' => array('question_id')));
		foreach($naResults as $naResultsVal) {
			$naQuestionIdArray[] = $naResultsVal['PatientSurvey']['question_id'];
			$naResultArray[$naResultsVal['PatientSurvey']['question_id']] = $naResultsVal[0]['report_results'];
			$this->set('naQuestionIdArray', $naQuestionIdArray);
			$this->set('naResultArray', $naResultArray);
		}
		$this->set('totalNumber', $totalNumber);
		$this->layout = false;
	}


	/**
	 * list of all link required for reports modules
	 *
	 */ 
	public function admin_all_report(){
    $this->layout ='advance';
	}
	/**
	@name : admin_patient_registration_report
	@created for: Admission report
	@created on : 2/15/2012
	@created By : Anand

	**/

	public function admin_patient_registration_report(){
		$this->layout = 'advance' ;
		$this->uses = array('Patient','Location','Person');
		$fieldsArr = array('executive_emp_id_no'=>'Executive Employee ID No','relation_to_employee'=>'Relationship with Employee',
				'non_executive_emp_id_no'=>'Non Executive Employee ID No','designation'=>'Designation','passport_no'=>'Passport No/ID',
				'allergies'=>'Allergies','relative_name'=>'Relatives Name','home_phone'=>'Home Phone No','instruction'=>'Instruction',
				'mobile'=>'Mobile Phone No','patient_owner'=>'Emergency Contact Name','asst_phone'=>'Emergency Contact No',
				'email'=>'Email','fax'=>'Fax','nationality'=>'Nationality', );
		$this->set('fieldsArr',$fieldsArr);


		$today = date('Y-m-d'); // आज की तारीख
        $startDate = date('Y-m-d', strtotime('-15 days')); 
        $search_key['Person.create_time >='] = $startDate . ' 00:00:00';
        $search_key['Person.create_time <='] = $today . ' 23:59:59';

              $recordnew = $this->Person->find('all', array(
                'order' => array('Person.create_time' => 'ASC'),
                'fields' => $fields,'first_name', 'last_name','admission_type','patient_uid','address','payment_category',
                'conditions' => array_merge($search_key, array('Person.payment_category' => 'Corporate')),
            ));
            
//             $recordnew = $this->Person->find('all', array(
//     'order' => array('Person.create_time' => 'ASC'),
//     'fields' => array('Person.first_name', 'Person.last_name', 'Person.admission_type', 'Person.patient_uid', 'Person.address'),
//     'conditions' => array_merge($search_key, array('Person.payment_category' => 'Corporates'))
// ));
// debug($recordnew);exit;
           $this->set('reports', $recordnew);
		if($this->request->data){
			$format = $this->request->data['PatientRegistrationReport']['format'];
			$from = $this->request->data['PatientRegistrationReport']['from'];
			$to =   $this->request->data['PatientRegistrationReport']['to'];
			$sex = $this->request->data['PatientRegistrationReport']['sex'];
			$age = $this->request->data['PatientRegistrationReport']['age'];
			$blood_group = $this->request->data['PatientRegistrationReport']['blood_group'];
			$patientlocation = $this->request->data['PatientRegistrationReport']['patient_location'];
			//$sponsor = $this->request->data['PatientRegistrationReport']['sponsor'];
			$record = '';
			$this->Person->unbindModel(array(
					'hasMany' => array('PharmacySalesBill')));



			//BOF pankaj code
			$this->Person->bindModel(array(
					'belongsTo' => array(
							'Location' =>array('foreignKey' => 'location_id'),
							'PatientInitial' =>array('foreignKey' => false,'conditions'=>array('PatientInitial.id =Person.initial_id' )),
					)),false);
			
			if(!empty($to) && !empty($from)){
				$from = $this->DateFormat->formatDate2STDForReport($this->request->data['PatientRegistrationReport']['from'],Configure::read('date_format'))." 00:00:00";
				$to = $this->DateFormat->formatDate2STDForReport($this->request->data['PatientRegistrationReport']['to'],Configure::read('date_format'))." 23:59:59";
				//pr($from." ".$to);exit;
				// get record between two dates. Make condition
				$search_key = array('Person.create_time <=' => $to, 'Person.create_time >=' => $from,'Person.is_deleted'=>0,'Person.location_id'=>$this->Session->read('locationid'));
			}else{
				$search_key =array('Person.is_deleted'=>0,'Person.location_id'=>$this->Session->read('locationid')) ;
			}
			if(!(empty($sex))){
				$search_key['Person.sex'] =  $sex;
			}
			if(!(empty($patientlocation))){
				$search_key['Person.city'] =  $patientlocation;
			}
			if(!(empty($age))){
				$ageRange = explode('-',$age);
				$search_key['Person.age between ? and ?'] =  array($ageRange[0],$ageRange[1]);
			}
			if(!(empty($blood_group))){
				$search_key['Person.blood_group'] =  $blood_group;
			}
			$selectedFields ='';
			$selectedFields = 'CONCAT(Person.plot_no," ",Person.landmark, " ",Person.city," ",Person.pin_code) as address ';
	
			if(!empty($this->request->data['PatientRegistrationReport']['field_id'])){
				$selectedFields .=  ",Person.".implode(',Person.',$this->request->data['PatientRegistrationReport']['field_id']);
			}
				
			$fields =array('Person.create_time,Person.city,Person.blood_group,Person.patient_uid,CONCAT(PatientInitial.name," ",Person.first_name," ",Person.last_name) as full_name,Person.age,Person.sex,'.$selectedFields);
			$record = $this->Person->find('all',array('order'=>array('Person.create_time' => 'ASC'),'fields'=>$fields,'conditions'=>$search_key));

			$this->set('selctedFields',$this->request->data['PatientRegistrationReport']['field_id']);


			//EOF pankaj code

			if($format == 'PDF'){
				$this->set('reports',$record);
				$this->set(compact('fieldName'));
				$this->render('patient_registration_pdf','pdf');
			} else {
					
				$this->set('reports', $record);
				$this->set(compact('fieldName'));
				//$this->render('patient_registration_excel','patient_report_excel');
				$this->render('patient_registration_excel','');
			}
		}
		$this->set('locationlist',$this->Person->find('list',array('fields'=>array('city','city'))));
	}
	/**
	@Name			: admin_expensive_product_report
	@Created for	: To get the products which are expensive.
	@created By		: Swatin
	@created On		: 1/22/2015
	**/
	public function expensive_product_report($type=NULL){
		$this->layout = 'advance' ;
		$this->uses = array('Product','PharmacyItem');
	
		if(!empty($this->request->query)){
			if(!empty($this->request->query['department']) && $this->request->query['department'] == "pharmacy"){
				$record = $this->PharmacyItem->find('all',array(
					'order'=>array('PharmacyItem.name' => 'ASC'),
					'fields'=> array('PharmacyItem.name','PharmacyItem.stock','PharmacyItem.expensive_product'),
					'group'=>array('PharmacyItem.id'),
					'conditions'=>array(/* 'PharmacyItem.location_id'=>$this->Session->read('locationid'), */'PharmacyItem.expensive_product'=>1,'PharmacyItem.is_deleted'=>0)));
			} else{
			$record = $this->Product->find('all',array(
					'order'=>array('Product.name' => 'DESC'),
					'fields'=> array('product.name','product.quantity'),
					'conditions'=>array(/* 'Product.location_id'=>$this->Session->read('locationid'), */'Product.expensive_product'=>1,'Product.is_deleted'=>0)));
		}
		}
		// $showdate1 = $this->DateFormat->formatdate2Local(date('Y-m-d H:i:s'),Configure::read('date_format'),true);
		//debug($record);exit; 
			$this->set('reports',$record);
			
	if($type=='excel'){
			$this->autoRender = false;
			$this->layout = false ;
			$this->render('expensive_product_excel',false);
		}
		if($type=='pdf'){
			$this->autoRender = false;
			$this->layout = false ;
			$this->render('expensive_product_pdf',false);
		}
	}


	/**
	@Name			: admin_patient_sponsor_report
	@Created for	: To get the coporate as type. will call bye ajax.
	@created By		: Anand
	@created On		: 2/23/2012
	**/


	public function admin_patient_sponsor_report(){
		$this->uses = array('Patient','Corporate','InsuranceCompany','Location','CorporateSublocation','CorporateLocation','Person','TariffStandard');
		$this->layout = 'advance' ;
		if($this->request->data){

			$format = $this->request->data['PatientRegistrationReport']['format'];
			$payment_category = $this->request->data['PatientRegistrationReport']['payment_category'];
			$patientlocation = $this->request->data['PatientRegistrationReport']['patient_location'];
			$record = '';
			$payment_category = $this->request->data['PatientRegistrationReport']['payment_category'];
			$credit_type = $this->request->data['PatientRegistrationReport']['sponsor'];
			$corporate_loc = $this->request->data['PatientRegistrationReport']['corporate_location_id'];
			$corporate = $this->request->data['PatientRegistrationReport']['corporate_id'];
			$corporate_sub_loc = $this->request->data['PatientRegistrationReport']['sublocation_id'];
			$insurance_type = $this->request->data['PatientRegistrationReport']['insurance_type_id'];
			$insurance_com = $this->request->data['PatientRegistrationReport']['insurenceCom_id'];

			$from = $this->DateFormat->formatDate2STDForReport($this->request->data['PatientRegistrationReport']['from'],Configure::read('date_format'))." 00:00:00";
			$to = $this->DateFormat->formatDate2STDForReport($this->request->data['PatientRegistrationReport']['to'],Configure::read('date_format'))." 23:59:59";

			$this->Patient->bindModel(array('belongsTo' => array('Location' =>array('foreignKey' => 'location_id'),
					'Corporate' =>array('foreignKey' => 'corporate_id'),
					'InsuranceCompany' =>array('foreignKey' => 'insurance_company_id'),
					'Person' =>array('foreignKey' => 'person_id'),
					'PatientInitial' =>array('foreignKey' => false,'conditions'=>array('PatientInitial.id =Person.initial_id' )),
					'TariffStandard'=>array('foreignKey'=>false,'conditions'=>array('TariffStandard.id=Patient.tariff_standard_id'),'fields'=>array('TariffStandard.name')),
						
			)),false);


			if(!empty($to) && !empty($from)){
				$search_key = array('Patient.form_received_on <=' => $to, 'Patient.form_received_on >=' => $from,'Patient.is_deleted'=>0,'Patient.location_id'=>$this->Session->read('locationid'));
			}else{
				$search_key =array('Patient.location_id'=>$this->Session->read('locationid')) ;
			}

			if(!empty($patientlocation)) {
				$search_key['Person.city'] =   $patientlocation;
			}
			if(!(empty($payment_category))){
				$search_key['Patient.payment_category'] =  $payment_category;
			}
			if(!(empty($credit_type))){
				$search_key['Patient.credit_type_id'] =  $credit_type;
			}
			if(!(empty($corporate_loc))){
				$search_key['Patient.corporate_location_id'] =  $corporate_loc;
			}
			if(!(empty($corporate))){
				$search_key['Patient.corporate_id'] =  $corporate;
			}
			if(!(empty($corporate_sub_loc))){
				$search_key['Patient.corporate_sublocation_id'] =  $corporate_sub_loc;
			}
			if(!(empty($insurance_type))){
				$search_key['Patient.insurance_type_id'] =  $insurance_type;
			}
			if(!(empty($insurance_com))){
				$search_key['Patient.insurance_company_id'] =  $insurance_com;
			}

			$fields = array('CONCAT(Person.plot_no," ",Person.landmark, " ",Person.city, " ",Person.pin_code) as address','Patient.payment_category',
					'Person.city','Patient.lookup_name','PatientInitial.name','Patient.mobile_phone','Patient.patient_id','Patient.admission_id','TariffStandard.name','Patient.age','Patient.sex','Person.blood_group','Patient.create_time','Patient.email','Patient.credit_type_id', 'Patient.form_received_on','Corporate.name','InsuranceCompany.name');


			$record = $this->Patient->find('all',array('order'=>array('Patient.form_received_on' => 'DESC'),'fields'=>$fields,'conditions'=>$search_key));


			//pr($record);exit;
		 if($format == 'PDF'){
		 	$this->set('reports',$record);
				$this->render('patient_sponsor_pdf','pdf');
			} else {
				$this->set('reports', $record);
				$this->render('patient_sponsor_excel','');
			}

	 }
	 $this->set('locationlist',$this->Person->find('list',array('fields'=>array('city','city'))));
	}


	/**
	@Name			: admin_patient_sponsor_report
	@Created for	: To get the coporate as type. will call bye ajax.
	@created By		: Anand
	@created On		: 2/23/2012
	**/

	public function admin_patient_sponsor_report_chart(){
		$this->uses = array('Patient','Location','Consultant');
		$this->layout = 'advance' ;
		if(!empty($this->request->data)){

			//pr($this->request->data);exit;
			$this->set('title_for_layout', __('Total Empanelment Report Chart', true));


			$reportYear = $this->request->data['PatientRegistrationReport']['year'];
			$consultantName = '';
			$reportMonth = $this->request->data['PatientRegistrationReport']['month'];
			$patientlocation = $this->request->data['PatientRegistrationReport']['patient_location'];
			$payment_category = $this->request->data['PatientRegistrationReport']['payment_category'];
			$credit_type = $this->request->data['PatientRegistrationReport']['sponsor'];
			$corporate_loc = $this->request->data['PatientRegistrationReport']['corporate_location_id'];
			$corporate = $this->request->data['PatientRegistrationReport']['corporate_id'];
			$corporate_sub_loc = $this->request->data['PatientRegistrationReport']['sublocation_id'];
			$insurance_type = $this->request->data['PatientRegistrationReport']['insurance_type_id'];
			$insurance_com = $this->request->data['PatientRegistrationReport']['insurenceCom_id'];

			if(!empty($reportMonth)){
				$countDays = cal_days_in_month(CAL_GREGORIAN, $reportMonth, $reportYear); // Days of the month selected
				$fromDate = $reportYear."-".$reportMonth."-01";
				$toDate = $reportYear."-".$reportMonth."-".$countDays;
			} else {
				$fromDate = $reportYear."-01-01"; // set first date of current year
				$toDate = $reportYear."-12-31"; // set last date of current year
			}

			$this->Patient->bindModel(array(
					'belongsTo' => array(
							'Person' =>array('foreignKey' => 'person_id')

					)),false);
			$conditions = array('Patient.form_received_on <=' => $toDate, 'Patient.form_received_on >=' => $fromDate); // Condition for year and month


			$search_key = array('Patient.form_received_on <=' => $toDate, 'Patient.form_received_on >=' => $fromDate,'Patient.is_deleted'=>0,'Patient.location_id'=>$this->Session->read('locationid'));

			if(!empty($patientlocation)) {
				$search_key['Person.city'] =  $patientlocation;
			}

			if(!(empty($payment_category))){
				$search_key['Patient.payment_category'] =  $payment_category;
			}
			if(!(empty($credit_type))){
				$search_key['Patient.credit_type_id'] =  $credit_type;
			}
			if(!(empty($corporate_loc))){
				$search_key['Patient.corporate_location_id'] =  $corporate_loc;
			}
			if(!(empty($corporate))){
				$search_key['Patient.corporate_id'] =  $corporate;
			}
			if(!(empty($corporate_sub_loc))){
				$search_key['Patient.corporate_sublocation_id'] =  $corporate_sub_loc;
			}
			if(!(empty($insurance_type))){
				$search_key['Patient.insurnace_type_id'] =  $insurance_type;
			}
			if(!(empty($insurance_com))){
				$search_key['Patient.insurance_company_id'] =  $insurance_com;
			}


			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));

			}

			$countRecord = $this->Patient->find('all', array('fields' => array('COUNT(*) AS recordcount', 'DATE_FORMAT(Patient.create_time, "%M-%Y") AS month_reports',
					'Patient.form_received_on', 'Patient.corporate_id'), 'conditions' => $search_key,'group' => array('month_reports')));

			foreach($countRecord as $countRecordVal) {
				$filterRecordDateArray[] = $countRecordVal[0]['month_reports'];
				$filterRecordCountArray[$countRecordVal[0]['month_reports']] = $countRecordVal[0]['recordcount'];
			}

		}

		$this->set('reportYear', isset($reportYear)?$reportYear:date("Y"));
		$this->set('filterRecordDateArray', isset($filterRecordDateArray)?$filterRecordDateArray:"");
		$this->set('filterRecordCountArray', isset($filterRecordCountArray)?$filterRecordCountArray:0);
		$this->set('yaxisArray', $yaxisArray);
		$this->set(compact('payment_category'));
		$this->set(compact('countRecord'));
		$this->set(compact('reportMonth'));

	}



	/**
	 Name : admin_patient_ot_report
	 Created On : 2/10/2012
	 **/

	public function admin_patient_ot_report(){
		
		$this->uses = array('Surgery','OptAppointment','Location','Department','DoctorProfile', 'Doctor','User');
		$this->layout = 'advance' ;
		if($this->request->data){
			$sergeryId = $this->request->data['PatientOtReport']['surgery'];
			$sergery_type = $this->request->data['PatientOtReport']['sergery_type'];
			$from = $this->DateFormat->formatDate2STDForReport($this->request->data['PatientOtReport']['from'],Configure::read('date_format'))." 00:00:00";
			$to = $this->DateFormat->formatDate2STDForReport($this->request->data['PatientOtReport']['to'],Configure::read('date_format'))." 23:59:59";
			$format = $this->request->data['PatientOtReport']['format'];
			$department = $this->request->data['department'];
			$doctor = $this->request->data['doctor'];
			$this->DoctorProfile->virtualFields = array(
					'doctor_name' => 'CONCAT(Initial.name, " ", DoctorProfile.doctor_name)'
			);

			$sergeryList = $this->Surgery->getSurgeryList();

		    $departments = $this->Department->find('list', array('fields' => array('Department.id', 'Department.name'), 'conditions' => array('Department.location_id' => $this->Session->read('locationid'), 'Department.is_active' => 1)));

		    $doctorList = $this->User->getAllDoctorList();
		    
			$this->set(compact('sergeryId','sergery_type','from','to','format','department','doctor','sergeryList','departments','doctorList'));
			// get record between two dates. Make condition

			$location_id = $this->Session->read('locationid');
			$conditionsOt['OptAppointment'] = array('starttime BETWEEN ? AND ?' => array($from,$to));
			if(!empty($this->request->data['PatientOtReport']['procedure_complete']) || $this->request->data['PatientOtReport']['procedure_complete'] != "") {
				$conditionsOt['OptAppointment']['procedure_complete'] = $this->request->data['PatientOtReport']['procedure_complete'];
			} else {
				$conditionsOt['OptAppointment']['procedure_complete'] = array(0,1);
			}
			$conditionsOt['OptAppointment']['is_deleted'] = 0;
			$conditionsOt['OptAppointment']['location_id'] = $location_id;
			if($sergeryId != "") {
				$conditionsOt['OptAppointment']['surgery_id'] = $sergeryId;
			}
			if($sergery_type != "") {
				$conditionsOt['OptAppointment']['operation_type'] = $sergery_type;
			}
			if($department != "") {
				$conditionsOt['DoctorProfile']['department_id'] = $department;
			}
			if($doctor != "") {
				$conditionsOt['DoctorProfile']['user_id'] = $doctor;
			}

			$allConditionsOt = $this->postConditions($conditionsOt);
			$this->OptAppointment->unbindModel(array('belongsTo' => array('Initial', 'Doctor')));
			$this->OptAppointment->bindModel(array(
					'belongsTo' => array(
							'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),
							'PatientInitial' =>array('foreignKey' => false,'conditions'=>array('PatientInitial.id =Person.initial_id' )),
							'User' =>array('foreignKey' => false,'conditions'=>array('User.id = DoctorProfile.user_id' )),
							'Initial' =>array('foreignKey' => false,'conditions'=>array('Initial.id =User.initial_id' )),


					)),false);
			$record = $this->OptAppointment->find('all',array('order'=>array('OptAppointment.starttime' => 'ASC'),'conditions'=>$allConditionsOt, 'fields' => array('Patient.id', 'Patient.form_received_on', 'Patient.admission_id', 'Patient.lookup_name', 'Patient.age', 'Patient.sex', 'PatientInitial.name','Initial.name', 'Surgery.name', 'OptAppointment.id', 'OptAppointment.operation_type', 'OptAppointment.starttime', 'OptAppointment.endtime', 'OptAppointment.ot_in_date','OptAppointment.out_date','OptAppointment.procedure_complete','DoctorProfile.doctor_name','Opt.name')));


			//pr($record);exit;
			if($format == 'PDF'){

				$this->set('reports',$record);

				$this->render('patient_ot_pdf','pdf');
			} else {

				$this->set('reports', $record);

				$this->render('patient_ot_excel','');
			}
		}
		$sergery = $this->Surgery->getSurgeryList();
		$this->set(compact('sergery'));
		//get department list //
		$departmentList = $this->Department->find('list', array('fields' => array('Department.id', 'Department.name'), 'conditions' => array('Department.location_id' => $this->Session->read('locationid'), 'Department.is_active' => 1)));
		$this->set('departmentList', $departmentList);
	}

	/**
	 Name : admin_patient_otutilizationrate_report
	 Created On : 2/10/2012
	 created by :Anand
	 **/
	public function admin_patient_otutilizationrate_report(){
		$this->uses = array('Surgery','OptAppointment','Location');
		$this->layout = 'advance' ;
		$this->OptAppointment->unbindModel(array('belongsTo' => array('Initial', 'Doctor')));
		$this->OptAppointment->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id' )),
						'PatientInitial' =>array('foreignKey' => false,'conditions'=>array('PatientInitial.id =Person.initial_id' )),
						'User' =>array('foreignKey' => false,'conditions'=>array('User.id = DoctorProfile.user_id' )),
						'Initial' =>array('foreignKey' => false,'conditions'=>array('Initial.id =User.initial_id' )),


				)),false);
			
		if($this->request->data){
			$sergery = $this->request->data['PatientOtReport']['surgery'];
			$sergery_type = $this->request->data['PatientOtReport']['sergery_type'];
			$from = $this->DateFormat->formatDate2STDForReport($this->request->data['PatientOtReport']['from'],Configure::read('date_format'))." 00:00:00";
			$to = $this->DateFormat->formatDate2STDForReport($this->request->data['PatientOtReport']['to'],Configure::read('date_format'))." 23:59:59";
			$format = $this->request->data['PatientOtReport']['format'];
			$total = '';

			$conditions = array('OptAppointment.starttime <=' => $to, 'OptAppointment.endtime >=' => $from);
			$location_id = $this->Session->read('locationid');
			// Fetch the data as per the condition
			if($sergery == '' && $sergery_type == ''){
				$record = $this->OptAppointment->find('all',array('order'=>array('OptAppointment.create_time' => 'DESC'),'conditions'=>array($conditions,'OptAppointment.location_id'=>$location_id),'fields' => array('Patient.id', 'Patient.form_received_on', 'Patient.admission_id', 'Patient.lookup_name', 'Patient.age', 'Patient.sex', 'PatientInitial.name','Initial.name', 'Surgery.name', 'OptAppointment.id', 'OptAppointment.operation_type', 'OptAppointment.starttime', 'OptAppointment.endtime', 'OptAppointment.ot_in_date','OptAppointment.out_date','OptAppointment.procedure_complete','DoctorProfile.doctor_name','Opt.name')));
			} else if($sergery != '' && $sergery_type == ''){
				$record = $this->OptAppointment->find('all',array('order'=>array('OptAppointment.create_time' => 'DESC'),'conditions'=>array($conditions,'OptAppointment.surgery_id'=>$sergery,'OptAppointment.location_id'=>$location_id,'OptAppointment.procedure_complete'=>1),'fields' => array('Patient.id', 'Patient.form_received_on', 'Patient.admission_id', 'Patient.lookup_name', 'Patient.age', 'Patient.sex', 'PatientInitial.name','Initial.name', 'Surgery.name', 'OptAppointment.id', 'OptAppointment.operation_type', 'OptAppointment.starttime', 'OptAppointment.endtime', 'OptAppointment.ot_in_date','OptAppointment.out_date','OptAppointment.procedure_complete','DoctorProfile.doctor_name','Opt.name')));
			} else if($sergery == '' && $sergery_type != ''){
				$record = $this->OptAppointment->find('all',array('order'=>array('OptAppointment.create_time' => 'DESC'),'conditions'=>array($conditions,'OptAppointment.operation_type'=>$sergery_type,'OptAppointment.location_id'=>$location_id,'OptAppointment.procedure_complete'=>1),'fields' => array('Patient.id', 'Patient.form_received_on', 'Patient.admission_id', 'Patient.lookup_name', 'Patient.age', 'Patient.sex', 'PatientInitial.name','Initial.name', 'Surgery.name', 'OptAppointment.id', 'OptAppointment.operation_type', 'OptAppointment.starttime', 'OptAppointment.endtime', 'OptAppointment.ot_in_date','OptAppointment.out_date','OptAppointment.procedure_complete','DoctorProfile.doctor_name','Opt.name')));
			} else if($sergery != '' && $sergery_type != ''){
				$record = $this->OptAppointment->find('all',array('order'=>array('OptAppointment.create_time' => 'DESC'),'conditions'=>array($conditions,'OptAppointment.operation_type'=>$sergery_type,'OptAppointment.surgery_id'=>$sergery,'OptAppointment.location_id'=>$location_id,'OptAppointment.procedure_complete'=>1),'fields' => array('Patient.id', 'Patient.form_received_on', 'Patient.admission_id', 'Patient.lookup_name', 'Patient.age', 'Patient.sex', 'PatientInitial.name','Initial.name', 'Surgery.name', 'OptAppointment.id', 'OptAppointment.operation_type', 'OptAppointment.starttime', 'OptAppointment.endtime', 'OptAppointment.ot_in_date','OptAppointment.out_date','OptAppointment.procedure_complete','DoctorProfile.doctor_name','Opt.name')));
			}


			// Calcualate total utilization rate here formula:-> (Total duration of Surgery / 8 * no. Days)*100
			// Collect number of days between daterange
			$d1 = $this->DateFormat->formatDate2STDForReport($this->request->data['PatientOtReport']['from'],Configure::read('date_format'));
			$d2 = $this->DateFormat->formatDate2STDForReport($this->request->data['PatientOtReport']['to'],Configure::read('date_format'));

			$days = (strtotime($d2) - strtotime($d1)) / (60 * 60 * 24) +1;
			//pr($days);exit;
			// Get the total hours of surgery
			foreach($record as $pdfData){
				$t1 = explode(" ", $pdfData['OptAppointment']['starttime']);
				$t2 = explode(" ", $pdfData['OptAppointment']['endtime']);
				$a1 = explode(":",$t1[1]);
				$a2 = explode(":",$t2[1]);
				$time1 = (($a1[0]*60*60)+($a1[1]*60));
				$time2 = (($a2[0]*60*60)+($a2[1]*60));
				$diff = abs($time1-$time2);
				$hours = floor($diff/(60*60));
				$mins = floor(($diff-($hours*60*60))/(60));
				$secs = floor(($diff-(($hours*60*60)+($mins*60))));
				$result = $hours.":".$mins.":".$secs;
				$duration = explode(':',$result);
				$total += $duration[0] * 60;
				$total += $duration[1];


			}

			// Total number of hurs for surgery
			$totalHours = $total / 60;

			// Total time of surgery
			//$date = date('Y-m-d');
			//$split = explode('-',$date);
			// Calculate days of the current month
			//monthDays = cal_days_in_month(CAL_GREGORIAN, $split[1], $split[0]);
			// Get total time alloted for surgery in the current month. per day surgery time is 16 hrs.
			$totalTime = $days * 8;

			// Calculate total utilization rate here formulla: AVG = tota hours/total surgery time*100
			$totalUtilization = $totalHours / $totalTime * 100;
			//pr($totalHours);exit;
			// Get answer up to two decimal places
			$totalUtilization = round($totalUtilization,2);

			//pr($totalUtilization);exit;

			// Set the format of report as per user input of format
			if($format == 'PDF'){

				$this->set('reports',$record);
				$this->set(compact('totalUtilization'));
				$this->render('patient_otutilization_pdf','pdf');
			} else {

				$this->set('reports', $record);
				$this->set(compact('totalUtilization'));
				$this->render('patient_otutilization_excel','');
			}
		}
		$sergery = $this->Surgery->find('list',array('conditions'=>array('Surgery.location_id'=>$this->Session->read('locationid'), 'Surgery.is_deleted'=> 0)));
		$this->set(compact('sergery'));
	}

	/**
	@Name		 : patient_otutilizationrate_report_chart
	@created for : Observation chart by nursing
	@created by  : ANAND
	@created on  : 2/23/2012
	@modified on :
	**/

	public function admin_otutilizationrate_report_chart(){
		$this->uses = array('Surgery','OptAppointment','Patient','Location','Consultant');
		$this->layout = 'advance' ;
		if(!empty($this->request->data)){

			//pr($this->request->data);exit;
			$this->set('title_for_layout', __('Total Ututilizationrate Report Chart', true));


			$reportYear = $this->request->data['PatientRegistrationReport']['year'];
			$consultantName = '';
			//$reportMonth = $this->request->data['PatientRegistrationReport']['month'];
			$sergery_type = $this->request->data['PatientOtReport']['sergery_type'];
			$sergery_id = $this->request->data['PatientOtReport']['surgery'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year


			//$countRecord = $this->Patient->find('count',array('conditions'=>array($conditions,'Patient.known_fam_physician'=>1,'Patient.consultant_id'=>$reference)));
			if($sergery_type != '' && $sergery_id != ''){

				$takenTimeRegCount = $this->OptAppointment->find('all', array('fields' => array('AVG((TIME_TO_SEC(TIMEDIFF(endtime,starttime)))/60) AS takentimeregcount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'OptAppointment.location_id', 'OptAppointment.id', 'OptAppointment.is_deleted'), 'group' => array("month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('OptAppointment.is_deleted' => 0, 'OptAppointment.location_id' => $this->Session->read('locationid'),'OptAppointment.operation_type'=>$sergery_type,'OptAppointment.surgery_id'=>$sergery_id), 'recursive' => -1));

			} else if($sergery_type == '' && $sergery_id != ''){
				$takenTimeRegCount = $this->OptAppointment->find('all', array('fields' => array('AVG((TIME_TO_SEC(TIMEDIFF(endtime,starttime)))/60) AS takentimeregcount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'OptAppointment.location_id', 'OptAppointment.id', 'OptAppointment.is_deleted'), 'group' => array("month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('OptAppointment.is_deleted' => 0, 'OptAppointment.location_id' => $this->Session->read('locationid'),'OptAppointment.surgery_id'=>$sergery_id), 'recursive' => -1));

			} else if($sergery_type != '' && $sergery_id == ''){
				$takenTimeRegCount = $this->OptAppointment->find('all', array('fields' => array('AVG((TIME_TO_SEC(TIMEDIFF(endtime,starttime)))/60) AS takentimeregcount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'OptAppointment.location_id', 'OptAppointment.id', 'OptAppointment.is_deleted'), 'group' => array("month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('OptAppointment.is_deleted' => 0, 'OptAppointment.location_id' => $this->Session->read('locationid'),'OptAppointment.operation_type'=>$sergery_type), 'recursive' => -1));

			} else if($sergery_type == '' && $sergery_id == ''){
				$takenTimeRegCount = $this->OptAppointment->find('all', array('fields' => array('AVG((TIME_TO_SEC(TIMEDIFF(endtime,starttime)))/60) AS takentimeregcount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'OptAppointment.location_id', 'OptAppointment.id', 'OptAppointment.is_deleted'), 'group' => array("month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('OptAppointment.is_deleted' => 0, 'OptAppointment.location_id' => $this->Session->read('locationid')), 'recursive' => -1));
			}

			// Get the total hours of surgery

			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}

			foreach($takenTimeRegCount as $takenTimeRegCountVal) {
				$filterRecordDateArray[] = $takenTimeRegCountVal[0]['month_reports'];
				$filterRecordCountArray[$takenTimeRegCountVal[0]['month_reports']] = $takenTimeRegCountVal[0]['takentimeregcount'];
			}

		}

		//pr($filterRecordCountArray);exit;

		$this->set('filterRecordDateArray', isset($filterRecordDateArray)?$filterRecordDateArray:"");
		$this->set('filterRecordCountArray', isset($filterRecordCountArray)?$filterRecordCountArray:0);
		$this->set('yaxisArray', $yaxisArray);
		$this->set('reportYear',$reportYear);
		$this->set(compact('payment_category'));
		$this->set(compact('countRecord'));
		$this->set(compact('reportMonth'));
	}

	/**
	 * get insurance type by xmlhttprequest
	 *
	 */
	public function getInsuranceTypeList() {
		$this->loadModel('InsuranceType');
		if($this->params['isAjax']) {
			$this->set('insurancetypelist', $this->InsuranceType->find('all', array('fields'=> array('id', 'name'),'conditions' => array('InsuranceType.is_deleted' => 0, 'InsuranceType.credit_type_id' => $this->params->query['paymentCategoryId']))));
			$this->layout = 'ajax';
			$this->render('/Persons/ajaxgetinsurancetypes');
		}
	}


	/**
	 * get insurance company by xmlhttprequest
	 *
	 */
	public function getInsuranceCompanyList() {
		$this->loadModel('InsuranceCompany');
		if($this->params['isAjax']) {
			$this->set('insurancecompanylist', $this->InsuranceCompany->find('all', array('fields'=> array('id', 'name'),'conditions' => array('InsuranceCompany.is_deleted' => 0, 'InsuranceCompany.insurance_type_id' => $this->params->query['insurancetypeid']))));
			$this->layout = 'ajax';
			$this->render('/Persons/ajaxgetinsurancecompanies');
		}
	}

	/**
	 * get corporate by xmlhttprequest
	 *
	 */
	public function getCorporateList() {
		$this->loadModel('Corporate');
		if($this->params['isAjax']) {
			$this->set('corporatelist', $this->Corporate->find('all', array('fields'=> array('id', 'name'),'conditions' => array('Corporate.is_deleted' => 0, 'Corporate.corporate_location_id' => $this->params->query['ajaxcorporatelocationid']))));
			$this->layout = 'ajax';
			$this->render('/Persons/ajaxgetcorporate');
		}
	}

	/**
	 * get corporate by xmlhttprequest
	 *
	 */
	public function getCorporateSublocList() {
		$this->loadModel('CorporateSublocation');
		if($this->params['isAjax']) {
			$this->set('corporatesulloclist', $this->CorporateSublocation->find('all', array('fields'=> array('id', 'name'),'conditions' => array('CorporateSublocation.is_deleted' => 0, 'CorporateSublocation.corporate_id' => $this->params->query['ajaxcorporateid']))));
			$this->layout = 'ajax';
			$this->render('/Persons/ajaxgetcorporatesubloc');
		}
	}


	/**
	 * get payment type by xmlhttprequest
	 *
	 */
	public function getPaymentType() {
		if($this->params['isAjax']) {
			$paytype = $this->params->query['paymentType'];

			if($paytype == "card") {
				$this->render('ajaxgetcredittype');
			}else{
				$this->render('ajaxgetcashtype');
			}
			$this->layout = 'ajax';
		}
	}


	function week_number($date)
	{
		return idate('W', strtotime($date));
	}

	function get_week($weeknum,$date) {
		$currentDay = date($weeknum);
		if($currentDay == 'Monday'){
			$timestampFirstDay = strtotime('monday',$date);
		}else{
			$timestampFirstDay = strtotime('last monday',$date);
		}

		/*$currentDay = $timestampFirstDay;
		 $weekArray=array();
		for ($i = 0 ; $i < 7 ; $i++) {
		array_push($weekArray, date('Y-m-d', $currentDay));
		$currentDay += 24 * 3600;
		}*/
		return $timestampFirstDay;
	}


	public function getselected(){
		$this->uses = array('City','State','Country');
		if($this->params['isAjax']) {
			$field_name = $this->params->query['field_name'];
			//pr($this->params->query);exit;
			if($field_name == 'Sex'){
				$options = array('Male'=>'Male','Female'=>'Female');
			} else if($field_name == 'Blood Group'){
				$options = array('+A'=>'A Positive','-A'=>'A Negative','+B'=>'B Positive','-B'=>'B Negative','+AB'=>'AB Positive','-AB'=>'AB Negative','+O'=>'O Positive','-O'=>'O Negative');
			} else if($field_name == 'City'){
				$options = $this->City->find('list');
			} else if($field_name == 'State'){
				$options = $this->State->find('list');
			} else if($field_name == 'Country'){
				$options = $this->Country->find('list');
			} else {
				$options = '';
			}

			$this->set(compact('options'));
			$this->layout = 'ajax';
			$this->render('ajaxgetselected');
		}

	}


	//BOF pankaj
	function admin_ipd_opd(){
		$this->uses = array('Patient','TariffStandard');
		$this->layout = 'advance' ;
		if($this->request->data){
			
			$this->set('report_title','Patient report- type wise');
			$format = $this->request->data['format'];
			//echo $this->request->data['Report']['format']; exit;
			$search_ele  = $this->request->data;
			$this->Patient->bindModel(array(
					'belongsTo' => array(
							'Location' =>array('foreignKey' => 'location_id'),
							'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id' )),
							'PatientInitial' =>array('foreignKey' => false,'conditions'=>array('PatientInitial.id =Person.initial_id' )),
							'TariffStandard'=>array('foreignKey'=>false,'conditions'=>array('TariffStandard.id=Patient.tariff_standard_id'),'fields'=>array('TariffStandard.name')),
					)),false);
			$search_key = array('Patient.is_deleted'=>0,'Patient.location_id'=>$this->Session->read('locationid'));

			if(!empty($search_ele['PatientAdmissionReport']['from']) && !empty($search_ele['PatientAdmissionReport']['to'])){
				
				//$last_split_date_time = explode(" ",$search_ele['from']);
				$search_ele['PatientAdmissionReport']['from'] = $this->DateFormat->formatDate2STDForReport($search_ele['PatientAdmissionReport']['from'],Configure::read('date_format'));

				//$last_split_date_time = explode(" ",$search_ele['to']);
				$search_ele['PatientAdmissionReport']['to'] = $this->DateFormat->formatDate2STDForReport($search_ele['PatientAdmissionReport']['to'],Configure::read('date_format'))." 23:59:59";
				
				$search_key['Patient.form_received_on BETWEEN ? and ?']=array($search_ele['PatientAdmissionReport']['from'],$search_ele['PatientAdmissionReport']['to']);
			}
			
			if(!empty($search_ele['type'])){
				
				$search_key['Patient.admission_type'] = $search_ele['type'] ;
			}
			
			$fields =array('PatientInitial.name','id','Patient.lookup_name','Patient.admission_id','Patient.patient_id','Patient.admission_type','Patient.form_received_on','Patient.form_completed_on','create_time','doc_ini_assess_on','nurse_assess_on','nurse_assess_end_on','credit_type_id','TariffStandard.name');
			$record = $this->Patient->find('all',array('fields'=>$fields,'conditions'=>$search_key));



			if($format=='GRAPH'){
				$this->set('reportYear',$reportYear);
				$this->set('reports',$record);
				$this->render('ipd_opd_chart');
			}else{
				//debug($format);exit;
			
				if($format == 'PDF'){
					$this->set('reports',$record);
					//$this->layout = 'pdf'; //this will use the pdf.ctp layout
					$this->render('ipd_opd_pdf','pdf');
				} else {
					$this->set('reports', $record);
					$this->render('ipd_opd_excel','');
				}
			}
		}
		//retrive the last yr in db
		$this->Patient->recursive = -1 ;
		$last = $this->Patient->find('first',array('fields'=>array('create_time'),'order'=>'create_time desc'));
		$this->set('endyear',date('Y',strtotime($last['Patient']['create_time']))) ;
	}
	//EOF pankaj

	public function admin_haicent_reports() {
		$this->set('title_for_layout', __('Hospital Acquire Infections Reports', true));
		$this->uses = array('NosocomialInfection', 'PatientExposure');
		$this->layout = 'advance' ;
		$ssiCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS ssicount', 'NosocomialInfection.surgical_site_infection', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.surgical_site_infection' => 'Yes'), 'group' => array('surgical_site_infection')));
		$this->set('ssiCount', $ssiCount);
		$vapCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS vapcount', 'NosocomialInfection.ventilator_associated_pneumonia', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.ventilator_associated_pneumonia' => 'Yes'), 'group' => array('ventilator_associated_pneumonia')));
		$this->set('vapCount', $vapCount);
		$utiCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS uticount', 'NosocomialInfection.urinary_tract_infection', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.urinary_tract_infection' => 'Yes'), 'group' => array('urinary_tract_infection')));
		$this->set('utiCount', $utiCount);
		$bsiCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS bsicount', 'NosocomialInfection.clabsi', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.clabsi' => 'Yes'), 'group' => array('clabsi')));
		$this->set('bsiCount', $bsiCount);
		$thromboCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS thrombocount', 'NosocomialInfection.thrombophlebitis', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.thrombophlebitis' => 'Yes'), 'group' => array('thrombophlebitis')));
		$this->set('thromboCount', $thromboCount);

	}

	public function admin_haicent_xlsreports() {
		$this->set('title_for_layout', __('Hospital Acquire Infections Reports', true));
		$this->uses = array('NosocomialInfection', 'PatientExposure');

		$ssiCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS ssicount', 'NosocomialInfection.surgical_site_infection', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.surgical_site_infection' => 'Yes'), 'group' => array('surgical_site_infection')));
		$this->set('ssiCount', $ssiCount);
		$vapCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS vapcount', 'NosocomialInfection.ventilator_associated_pneumonia', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.ventilator_associated_pneumonia' => 'Yes'), 'group' => array('ventilator_associated_pneumonia')));
		$this->set('vapCount', $vapCount);
		$utiCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS uticount', 'NosocomialInfection.urinary_tract_infection', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.urinary_tract_infection' => 'Yes'), 'group' => array('urinary_tract_infection')));
		$this->set('utiCount', $utiCount);
		$bsiCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS bsicount', 'NosocomialInfection.clabsi', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.clabsi' => 'Yes'), 'group' => array('clabsi')));
		$this->set('bsiCount', $bsiCount);
		$thromboCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS thrombocount', 'NosocomialInfection.thrombophlebitis', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.thrombophlebitis' => 'Yes'), 'group' => array('thrombophlebitis')));
		$this->set('thromboCount', $thromboCount);
		$this->layout = false;
	}

	public function all_report() {
		$this->layout = 'advance' ;
	}

	/**
	 *
	 * ssi rate percentage reports
	 *
	 **/

	public function admin_ssirate_reports() {
		$this->uses = array('NosocomialInfection', 'OptAppointment');
		$this->layout = 'advance' ;
		//$ssiCount = $this->SurgicalSiteInfection->find('all', array('fields' => array('COUNT(*) AS ssicount', 'SurgicalSiteInfection.location_id'), 'conditions' => array('SurgicalSiteInfection.location_id' => $this->Session->read('locationid'), 'SurgicalSiteInfection.is_deleted' => 0), 'group' => array('location_id'),'recursive' => -1));
		$ssiCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS ssicount', 'NosocomialInfection.surgical_site_infection', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.surgical_site_infection' => 'Yes'), 'group' => array('surgical_site_infection')));
		$this->set('ssiCount', $ssiCount);
		$this->set('ssiCount', $ssiCount);
		$spYesCount = $this->OptAppointment->find('all', array('fields' => array('COUNT(*) AS spYescount', 'OptAppointment.location_id'), 'conditions' => array('OptAppointment.location_id' => $this->Session->read('locationid'), 'OptAppointment.procedure_complete' => 1, 'OptAppointment.is_deleted' => 0), 'group' => array('location_id'),'recursive' => -1));
		$this->set('spYesCount', $spYesCount);
			
	}

	/**
	 *
	 * ssi rate xls reports
	 *
	 **/

	public function admin_ssirate_xlsreports() {
		$this->uses = array('NosocomialInfection', 'OptAppointment');
		//$ssiCount = $this->SurgicalSiteInfection->find('all', array('fields' => array('COUNT(*) AS ssicount', 'SurgicalSiteInfection.location_id'), 'conditions' => array('SurgicalSiteInfection.location_id' => $this->Session->read('locationid'), 'SurgicalSiteInfection.is_deleted' => 0), 'group' => array('location_id'),'recursive' => -1));
		$ssiCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS ssicount', 'NosocomialInfection.surgical_site_infection', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.surgical_site_infection' => 'Yes'), 'group' => array('surgical_site_infection')));
		$this->set('ssiCount', $ssiCount);
		$this->set('ssiCount', $ssiCount);
		$spYesCount = $this->OptAppointment->find('all', array('fields' => array('COUNT(*) AS spYescount', 'OptAppointment.location_id'), 'conditions' => array('OptAppointment.location_id' => $this->Session->read('locationid'), 'OptAppointment.procedure_complete' => 1, 'OptAppointment.is_deleted' => 0), 'group' => array('location_id'),'recursive' => -1));
		$this->set('spYesCount', $spYesCount);
		$this->layout = false;
	}

	/**
	 *
	 * uti rate percentage reports
	 *
	 **/

	public function admin_utirate_reports() {
		$this->uses = array('NosocomialInfection', 'PatientExposure');
		$this->layout = 'advance' ;
		$utiCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS uticount', 'NosocomialInfection.urinary_tract_infection', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.urinary_tract_infection' => 'Yes'), 'group' => array('urinary_tract_infection')));
		$this->set('utiCount', $utiCount);
		$ucCount = $this->PatientExposure->find('all', array('fields' => array('COUNT(*) AS uccount', 'PatientExposure.urinary_catheter', 'PatientExposure.location_id', 'PatientExposure.id'), 'conditions' => array('PatientExposure.location_id' => $this->Session->read('locationid'), 'PatientExposure.urinary_catheter' => 'Yes'), 'group' => array('urinary_catheter')));
		$this->set('ucCount', $ucCount);
			
	}

	/**
	 *
	 * uti rate xls reports
	 *
	 **/

	public function admin_utirate_xlsreports() {
		$this->uses = array('NosocomialInfection', 'PatientExposure');
		$this->layout = 'advance' ;
		$utiCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS uticount', 'NosocomialInfection.urinary_tract_infection', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.urinary_tract_infection' => 'Yes'), 'group' => array('urinary_tract_infection')));
		$this->set('utiCount', $utiCount);
		$ucCount = $this->PatientExposure->find('all', array('fields' => array('COUNT(*) AS uccount', 'PatientExposure.urinary_catheter', 'PatientExposure.location_id', 'PatientExposure.id'), 'conditions' => array('PatientExposure.location_id' => $this->Session->read('locationid'), 'PatientExposure.urinary_catheter' => 'Yes'), 'group' => array('urinary_catheter')));
		$this->set('ucCount', $ucCount);
		$this->layout = false;
	}

	/**
	 *
	 * vap rate percentage reports
	 *
	 **/

	public function admin_vaprate_reports() {
		$this->uses = array('NosocomialInfection', 'PatientExposure');
		$this->layout = 'advance' ;
		$vapCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS vapcount', 'NosocomialInfection.ventilator_associated_pneumonia', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.ventilator_associated_pneumonia' => 'Yes'), 'group' => array('ventilator_associated_pneumonia')));
		$this->set('vapCount', $vapCount);
		$mvCount = $this->PatientExposure->find('all', array('fields' => array('COUNT(*) AS mvcount', 'PatientExposure.mechanical_ventilation', 'PatientExposure.location_id', 'PatientExposure.id'), 'conditions' => array('PatientExposure.location_id' => $this->Session->read('locationid'), 'PatientExposure.mechanical_ventilation' => 'Yes'), 'group' => array('mechanical_ventilation')));
		$this->set('mvCount', $mvCount);
	}

	/**
	 *
	 * vap rate xls reports
	 *
	 **/

	public function admin_vaprate_xlsreports() {
		$this->uses = array('NosocomialInfection', 'PatientExposure');
		$vapCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS vapcount', 'NosocomialInfection.ventilator_associated_pneumonia', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.ventilator_associated_pneumonia' => 'Yes'), 'group' => array('ventilator_associated_pneumonia')));
		$this->set('vapCount', $vapCount);
		$mvCount = $this->PatientExposure->find('all', array('fields' => array('COUNT(*) AS mvcount', 'PatientExposure.mechanical_ventilation', 'PatientExposure.location_id', 'PatientExposure.id'), 'conditions' => array('PatientExposure.location_id' => $this->Session->read('locationid'), 'PatientExposure.mechanical_ventilation' => 'Yes'), 'group' => array('mechanical_ventilation')));
		$this->set('mvCount', $mvCount);
		$this->layout = false;
	}

	/**
	 *
	 * bsi rate percentage reports
	 *
	 **/

	public function admin_bsirate_reports() {
		$this->uses = array('NosocomialInfection', 'PatientExposure');
		$this->layout = 'advance' ;
		$bsiCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS bsicount', 'NosocomialInfection.clabsi', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.clabsi' => 'Yes'), 'group' => array('clabsi')));
		$this->set('bsiCount', $bsiCount);
		$clCount = $this->PatientExposure->find('all', array('fields' => array('COUNT(*) AS clcount', 'PatientExposure.central_line', 'PatientExposure.location_id', 'PatientExposure.id'), 'conditions' => array('PatientExposure.location_id' => $this->Session->read('locationid'), 'PatientExposure.central_line' => 'Yes'), 'group' => array('central_line')));
		$this->set('clCount', $clCount);
			
	}

	/**
	 *
	 * bsi rate xls reports
	 *
	 **/

	public function admin_bsirate_xlsreports() {
		$this->uses = array('NosocomialInfection', 'PatientExposure');
		$bsiCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS bsicount', 'NosocomialInfection.clabsi', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.clabsi' => 'Yes'), 'group' => array('clabsi')));
		$this->set('bsiCount', $bsiCount);
		$clCount = $this->PatientExposure->find('all', array('fields' => array('COUNT(*) AS clcount', 'PatientExposure.central_line', 'PatientExposure.location_id', 'PatientExposure.id'), 'conditions' => array('PatientExposure.location_id' => $this->Session->read('locationid'), 'PatientExposure.central_line' => 'Yes'), 'group' => array('central_line')));
		$this->set('clCount', $clCount);
		$this->layout = false;
	}

	/**
	 *
	 * thrombo rate percentage reports
	 *
	 **/

	public function admin_thrombophlebitisrate_reports() {
		$this->uses = array('NosocomialInfection', 'PatientExposure');
		$this->layout = 'advance' ;
		$thromboCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS thrombocount', 'NosocomialInfection.thrombophlebitis', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.thrombophlebitis' => 'Yes'), 'group' => array('thrombophlebitis')));
		$this->set('thromboCount', $thromboCount);
		$plCount = $this->PatientExposure->find('all', array('fields' => array('COUNT(*) AS plcount', 'PatientExposure.peripheral_line', 'PatientExposure.location_id', 'PatientExposure.id'), 'conditions' => array('PatientExposure.location_id' => $this->Session->read('locationid'), 'PatientExposure.peripheral_line' => 'Yes'), 'group' => array('peripheral_line')));
		$this->set('plCount', $plCount);
			
	}

	/**
	 *
	 * thrombo rate xls reports
	 *
	 **/

	public function admin_thrombophlebitisrate_xlsreports() {
		$this->uses = array('NosocomialInfection', 'PatientExposure');
		$thromboCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS thrombocount', 'NosocomialInfection.thrombophlebitis', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.thrombophlebitis' => 'Yes'), 'group' => array('thrombophlebitis')));
		$this->set('thromboCount', $thromboCount);
		$plCount = $this->PatientExposure->find('all', array('fields' => array('COUNT(*) AS plcount', 'PatientExposure.peripheral_line', 'PatientExposure.location_id', 'PatientExposure.id'), 'conditions' => array('PatientExposure.location_id' => $this->Session->read('locationid'), 'PatientExposure.peripheral_line' => 'Yes'), 'group' => array('peripheral_line')));
		$this->set('plCount', $plCount);
		$this->layout = false;
	}

	/**
	 * hospital acquire infections reports chart
	 *
	 */


	public function admin_hai_reports_chart() {
		$this->set('title_for_layout', __('Hospital Associated Infections Reports Chart', true));
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {
			$reportType = $this->request->data['reportType'];
			$reportYear = $this->request->data['reportYear'];
			$reportMonth = $this->request->data['reportMonth'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->hai_allreports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
		}

		$this->set('yaxisArray', $yaxisArray);
		$this->set('reportYear', $reportYear);
		$this->set('reportType', $reportType);
	}


	/**
	 * hospital acquire infections xls reports
	 *
	 */

	public function admin_hai_xlsreports() {
		$this->set('title_for_layout', __('Hospital Acquire Infections Reports', true));
		if ($this->request->is('post')) {
			$reportType = $this->request->data['reportType'];
			$reportYear = $this->request->data['reportYear'];
			$reportMonth = $this->request->data['reportMonth'];
			// if month is selected //
			if(!empty($reportMonth)) {
				// if report type cases or rate is selected //
				if($reportType == 1 || $reportType == 2) {
					$startDate=1;
					$countDays = cal_days_in_month(CAL_GREGORIAN, $reportMonth, $reportYear);
					while($startDate <= $countDays) {
						$dateVal = $reportYear."-".$reportMonth."-".$startDate;
						$yaxisIndex = date("d-F", strtotime($dateVal));
						$yaxisArray[$yaxisIndex] = date("d-F-Y", strtotime($dateVal));
						$startDate++;
					}

					$this->hai_monthcases($yaxisArray,$reportYear);
					$this->set('yaxisArray', $yaxisArray);
				}
					
				// if month is not selected //
			} else {
				$fromDate = $reportYear."-01-01"; // set first date of current year
				$toDate = $reportYear."-12-31"; // set last date of current year
				$this->hai_allreports($fromDate,$toDate);
				while($toDate > $fromDate) {
					$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
					$expfromdate = explode("-", $fromDate);
					$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
				}
				$this->set('yaxisArray', $yaxisArray);

			}
		}
		$this->set('reportType', isset($this->request->data['reportType'])?$this->request->data['reportType']:"1"); // 1 for number of cases
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
		$this->set('reportMonth', isset($this->request->data['reportMonth'])?$this->request->data['reportMonth']:"");
		$this->layout = false;
	}
	/**
	 * hospital acquire infections survey reports
	 *
	 */

	public function admin_hospital_acquire_infections_reports() {
		 
		$this->set('title_for_layout', __('Hospital Associated Infections Cases', true));
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {
			$reportType = $this->request->data['reportType'];
			$reportYear = $this->request->data['reportYear'];
			$reportMonth = $this->request->data['reportMonth'];
			// if month is selected //
			if(!empty($reportMonth)) {
				// if report type cases or rate is selected //
				if($reportType == 1 || $reportType == 2) {
					$startDate=1;
					$countDays = cal_days_in_month(CAL_GREGORIAN, $reportMonth, $reportYear);
					while($startDate <= $countDays) {
						$dateVal = $reportYear."-".$reportMonth."-".$startDate;
						$yaxisIndex = date("d-F", strtotime($dateVal));
						$yaxisArray[$yaxisIndex] = date("d-F-Y", strtotime($dateVal));
						$startDate++;
					}

					$this->hai_monthcases($yaxisArray,$reportYear);
					$this->set('yaxisArray', $yaxisArray);
				}
					
				// if month is not selected //
			} else {
				$fromDate = $reportYear."-01-01"; // set first date of current year
				$toDate = $reportYear."-12-31"; // set last date of current year
				$this->hai_allreports($fromDate,$toDate);
				while($toDate > $fromDate) {
					$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
					$expfromdate = explode("-", $fromDate);
					$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
				}
				$this->set('yaxisArray', $yaxisArray);

			}
		} else {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31"; // set last date of current year
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
			$this->hai_allreports();

		}
		$this->set('reportType', isset($this->request->data['reportType'])?$this->request->data['reportType']:"1"); // 1 for number of cases
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
		$this->set('reportMonth', isset($this->request->data['reportMonth'])?$this->request->data['reportMonth']:"");

	}


	/**
	 * hospital acquire infections survey  filter by month and reprt type is cases
	 *
	 */

	private function hai_monthcases($yaxisArray, $reportYear) {
		$this->uses = array('NosocomialInfection', 'PatientExposure');
		$this->layout = 'advance' ;
		$assignIndex = array_keys($yaxisArray);
		$firstDate = date("Y-m-d", strtotime($yaxisArray[$assignIndex[0]]."-".$reportYear));
		$lastDate = date("Y-m-d", strtotime($yaxisArray[$assignIndex[count($yaxisArray)-1]]."-".$reportYear));

		$ssiCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS ssicount', 'DATE_FORMAT(submit_date, "%d-%M") AS day_reports', 
				'NosocomialInfection.surgical_site_infection', 'submit_date', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 
				'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'),'NosocomialInfection.surgical_site_infection' => 'Yes',
						'NosocomialInfection.submit_date BETWEEN ? AND ?' => array($firstDate, $lastDate)), 'group' => array('submit_date')));
		
		foreach($ssiCount as $ssiCountVal) {			  
			
				$filterSsiDateArray[] = $ssiCountVal[0]['day_reports'];
				$filterSsiCountArray[$ssiCountVal[0]['day_reports']] = $ssiCountVal[0]['ssicount'];
			
		}
		
		$this->set('filterSsiDateArray', isset($filterSsiDateArray)?$filterSsiDateArray:"");
		$this->set('filterSsiCountArray', isset($filterSsiCountArray)?$filterSsiCountArray:0);

		$spCount = $this->PatientExposure->find('all', array('fields' => array('COUNT(*) AS spcount', 'DATE_FORMAT(submit_date, "%d-%M") AS day_reports', 
				'PatientExposure.surgical_procedure', 'submit_date', 'PatientExposure.location_id', 'PatientExposure.id'), 
				'conditions' => array('PatientExposure.location_id' => $this->Session->read('locationid'),'PatientExposure.surgical_procedure' => 'Yes',
						'PatientExposure.submit_date BETWEEN ? AND ?' => array($firstDate, $lastDate)), 'group' => array('submit_date')));
		
		foreach($spCount as $spCountVal) {
			
				$filterSpDateArray[] = $spCountVal[0]['day_reports'];
				$filterSpCountArray[$spCountVal[0]['day_reports']] = $spCountVal[0]['spcount'];
			
		}
		$this->set('filterSpDateArray', isset($filterSpDateArray)?$filterSpDateArray:"");
		$this->set('filterSpCountArray', isset($filterSpCountArray)?$filterSpCountArray:0);

			
		$vapCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS vapcount', 'DATE_FORMAT(submit_date, "%d-%M") AS day_reports', 
				'NosocomialInfection.ventilator_associated_pneumonia', 'submit_date', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 
				'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'),'NosocomialInfection.ventilator_associated_pneumonia' => 'Yes',
						'NosocomialInfection.submit_date BETWEEN ? AND ?' => array($firstDate, $lastDate)), 'group' => array('submit_date')));
		foreach($vapCount as $vapCountVal) {
			
				$filterVapDateArray[] = $vapCountVal[0]['day_reports'];
				$filterVapCountArray[$vapCountVal[0]['day_reports']] = $vapCountVal[0]['vapcount'];
			
		}
		$this->set('filterVapDateArray', isset($filterVapDateArray)?$filterVapDateArray:"");
		$this->set('filterVapCountArray', isset($filterVapCountArray)?$filterVapCountArray:0);

		$mvCount = $this->PatientExposure->find('all', array('fields' => array('COUNT(*) AS mvcount', 'DATE_FORMAT(submit_date, "%d-%M") AS day_reports',
				 'PatientExposure.mechanical_ventilation', 'submit_date', 'PatientExposure.location_id', 'PatientExposure.id'), 
				'conditions' => array('PatientExposure.location_id' => $this->Session->read('locationid'), 'PatientExposure.mechanical_ventilation' => 'Yes',
						'PatientExposure.submit_date BETWEEN ? AND ?' => array($firstDate, $lastDate)), 'group' => array('submit_date')));
		foreach($mvCount as $mvCountVal) {
			
				$filterMvDateArray[] = $mvCountVal[0]['day_reports'];
				$filterMvCountArray[$mvCountVal[0]['day_reports']] = $mvCountVal[0]['mvcount'];
			
		}

		$this->set('filterMvDateArray', isset($filterMvDateArray)?$filterMvDateArray:"");
		$this->set('filterMvCountArray', isset($filterMvCountArray)?$filterMvCountArray:0);

		$utiCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS uticount', 'DATE_FORMAT(submit_date, "%d-%M") AS day_reports', 'NosocomialInfection.urinary_tract_infection', 'submit_date', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.urinary_tract_infection' => 'Yes', 'NosocomialInfection.submit_date BETWEEN ? AND ?' => array($firstDate, $lastDate)), 'group' => array('submit_date')));
		foreach($utiCount as $utiCountVal) {			 
			
				$filterUtiDateArray[] = $utiCountVal[0]['day_reports'];
				$filterUtiCountArray[$utiCountVal[0]['day_reports']] = $utiCountVal[0]['uticount'];
			
		}
		$this->set('filterUtiDateArray', isset($filterUtiDateArray)?$filterUtiDateArray:"");
		$this->set('filterUtiCountArray', isset($filterUtiCountArray)?$filterUtiCountArray:0);

		$ucCount = $this->PatientExposure->find('all', array('fields' => array('COUNT(*) AS uccount', 'DATE_FORMAT(submit_date, "%d-%M") AS day_reports', 'PatientExposure.urinary_catheter', 'submit_date', 'PatientExposure.location_id', 'PatientExposure.id'), 'conditions' => array('PatientExposure.location_id' => $this->Session->read('locationid'), 'PatientExposure.urinary_catheter' => 'Yes', 'PatientExposure.submit_date BETWEEN ? AND ?' => array($firstDate, $lastDate)), 'group' => array('submit_date')));
		foreach($ucCount as $ucCountVal) {
			
				$filterUcDateArray[] = $ucCountVal[0]['day_reports'];
				$filterUcCountArray[$ucCountVal[0]['day_reports']] = $ucCountVal[0]['uccount'];
			
		}
		$this->set('filterUcDateArray', isset($filterUcDateArray)?$filterUcDateArray:"");
		$this->set('filterUcCountArray', isset($filterUcCountArray)?$filterUcCountArray:0);

		$bsiCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS bsicount', 'DATE_FORMAT(submit_date, "%d-%M") AS day_reports', 'NosocomialInfection.clabsi', 'submit_date', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.clabsi' => 'Yes', 'NosocomialInfection.submit_date BETWEEN ? AND ?' => array($firstDate, $lastDate)), 'group' => array('submit_date')));
		foreach($bsiCount as $bsiCountVal) {
			
				$filterBsiDateArray[] = $bsiCountVal[0]['day_reports'];
				$filterBsiCountArray[$bsiCountVal[0]['day_reports']] = $bsiCountVal[0]['bsicount'];
			
		}
		$this->set('filterBsiDateArray', isset($filterBsiDateArray)?$filterBsiDateArray:"");
		$this->set('filterBsiCountArray', isset($filterBsiCountArray)?$filterBsiCountArray:0);

		$clCount = $this->PatientExposure->find('all', array('fields' => array('COUNT(*) AS clcount', 'DATE_FORMAT(submit_date, "%d-%M") AS day_reports', 'PatientExposure.central_line', 'submit_date', 'PatientExposure.location_id', 'PatientExposure.id'), 'conditions' => array('PatientExposure.location_id' => $this->Session->read('locationid'), 'PatientExposure.central_line' => 'Yes', 'PatientExposure.submit_date BETWEEN ? AND ?' => array($firstDate, $lastDate)), 'group' => array('submit_date')));
		foreach($clCount as $clCountVal) {
			
				$filterClDateArray[] = $clCountVal[0]['day_reports'];
				$filterClCountArray[$clCountVal[0]['day_reports']] = $clCountVal[0]['clcount'];
			
		}
		$this->set('filterClDateArray', isset($filterClDateArray)?$filterClDateArray:"");
		$this->set('filterClCountArray', isset($filterClCountArray)?$filterClCountArray:0);

		$thromboCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS thrombocount', 'DATE_FORMAT(submit_date, "%d-%M") AS day_reports', 'NosocomialInfection.thrombophlebitis', 'submit_date', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.thrombophlebitis' => 'Yes', 'NosocomialInfection.submit_date BETWEEN ? AND ?' => array($firstDate, $lastDate)), 'group' => array('submit_date')));
		foreach($thromboCount as $thromboCountVal) {
			
				$filterThromboDateArray[] = $thromboCountVal[0]['day_reports'];
				$filterThromboCountArray[$thromboCountVal[0]['day_reports']] = $thromboCountVal[0]['thrombocount'];
			
		}
		$this->set('filterThromboDateArray', isset($filterThromboDateArray)?$filterThromboDateArray:"");
		$this->set('filterThromboCountArray', isset($filterThromboCountArray)?$filterThromboCountArray:0);

		$plCount = $this->PatientExposure->find('all', array('fields' => array('COUNT(*) AS plcount', 'DATE_FORMAT(submit_date, "%d-%M") AS day_reports', 
				'PatientExposure.peripheral_line', 'submit_date', 'PatientExposure.location_id', 'PatientExposure.id'), 
				'conditions' => array('PatientExposure.location_id' => $this->Session->read('locationid'), 'PatientExposure.peripheral_line' => 'Yes',
						'PatientExposure.submit_date BETWEEN ? AND ?' => array($firstDate, $lastDate)), 'group' => array('submit_date')));
		foreach($plCount as $plCountVal) {
			
				$filterPlDateArray[] = $plCountVal[0]['day_reports'];
				$filterPlCountArray[$plCountVal[0]['day_reports']] = $plCountVal[0]['plcount'];
			
		}
		$this->set('filterPlDateArray', isset($filterPlDateArray)?$filterPlDateArray:"");
		$this->set('filterPlCountArray', isset($filterPlCountArray)?$filterPlCountArray:0);

		$otherCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS othercount', 'DATE_FORMAT(submit_date, "%d-%M") AS day_reports', 'NosocomialInfection.other_nosocomial_infection', 'submit_date', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.other_nosocomial_infection' => 'Yes', 'NosocomialInfection.submit_date BETWEEN ? AND ?' => array($firstDate, $lastDate)), 'group' => array('submit_date')));
		foreach($otherCount as $otherCountVal) {
			
				$filterOtherDateArray[] = $otherCountVal[0]['day_reports'];
				$filterOtherCountArray[$otherCountVal[0]['day_reports']] = $otherCountVal[0]['othercount'];
			
		}
		$this->set('filterOtherDateArray', isset($filterOtherDateArray)?$filterOtherDateArray:"");
		$this->set('filterOtherCountArray', isset($filterOtherCountArray)?$filterOtherCountArray:0);
	}


	/**
	 * hospital acquire infections survey all record reports (default page, yearly report by cases and rate)
	 *
	 */

	private function hai_allreports($fromDate=null,$toDate=null) {
		$this->uses = array('NosocomialInfection', 'PatientExposure','FinalBilling');
		$this->layout = 'advance' ;
		if(empty($fromDate) && empty($toDate)) {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31";
		}
		$ssiCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS ssicount', 'DATE_FORMAT(submit_date, "%M-%Y") AS month_reports', 'NosocomialInfection.surgical_site_infection', 'submit_date', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.surgical_site_infection' => 'Yes','NosocomialInfection.submit_date BETWEEN ? AND ?' => array($fromDate, $toDate)), 'group' => array('surgical_site_infection', 'month_reports')));
		foreach($ssiCount as $ssiCountVal) {
			$filterSsiDateArray[] = $ssiCountVal[0]['month_reports'];
			$filterSsiCountArray[$ssiCountVal[0]['month_reports']] = $ssiCountVal[0]['ssicount'];
		}
		$this->set('filterSsiDateArray', isset($filterSsiDateArray)?$filterSsiDateArray:"");
		$this->set('filterSsiCountArray', isset($filterSsiCountArray)?$filterSsiCountArray:0);

		$spCount = $this->PatientExposure->find('all', array('fields' => array('COUNT(*) AS spcount', 'DATE_FORMAT(submit_date, "%M-%Y") AS month_reports', 'PatientExposure.surgical_procedure', 'submit_date', 'PatientExposure.location_id', 'PatientExposure.id'), 'conditions' => array('PatientExposure.location_id' => $this->Session->read('locationid'), 'PatientExposure.surgical_procedure' => 'Yes','PatientExposure.submit_date BETWEEN ? AND ?' => array($fromDate, $toDate)), 'group' => array('surgical_procedure', 'month_reports')));
		foreach($spCount as $spCountVal) {
			$filterSpDateArray[] = $spCountVal[0]['month_reports'];
			$filterSpCountArray[$spCountVal[0]['month_reports']] = $spCountVal[0]['spcount'];
		}
		$this->set('filterSpDateArray', isset($filterSpDateArray)?$filterSpDateArray:"");
		$this->set('filterSpCountArray', isset($filterSpCountArray)?$filterSpCountArray:0);

			
		$vapCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS vapcount', 'DATE_FORMAT(submit_date, "%M-%Y") AS month_reports', 'NosocomialInfection.ventilator_associated_pneumonia', 'submit_date', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.ventilator_associated_pneumonia' => 'Yes','NosocomialInfection.submit_date BETWEEN ? AND ?' => array($fromDate, $toDate)), 'group' => array('ventilator_associated_pneumonia', 'month_reports')));
		foreach($vapCount as $vapCountVal) {
			$filterVapDateArray[] = $vapCountVal[0]['month_reports'];
			$filterVapCountArray[$vapCountVal[0]['month_reports']] = $vapCountVal[0]['vapcount'];
		}
		$this->set('filterVapDateArray', isset($filterVapDateArray)?$filterVapDateArray:"");
		$this->set('filterVapCountArray', isset($filterVapCountArray)?$filterVapCountArray:0);

		$mvCount = $this->PatientExposure->find('all', array('fields' => array('COUNT(*) AS mvcount', 'DATE_FORMAT(submit_date, "%M-%Y") AS month_reports', 'PatientExposure.mechanical_ventilation', 'submit_date', 'PatientExposure.location_id', 'PatientExposure.id'), 'conditions' => array('PatientExposure.location_id' => $this->Session->read('locationid'), 'PatientExposure.mechanical_ventilation' => 'Yes','PatientExposure.submit_date BETWEEN ? AND ?' => array($fromDate, $toDate)), 'group' => array('mechanical_ventilation', 'month_reports')));
		foreach($mvCount as $mvCountVal) {
			$filterMvDateArray[] = $mvCountVal[0]['month_reports'];
			$filterMvCountArray[$mvCountVal[0]['month_reports']] = $mvCountVal[0]['mvcount'];
		}

		$this->set('filterMvDateArray', isset($filterMvDateArray)?$filterMvDateArray:"");
		$this->set('filterMvCountArray', isset($filterMvCountArray)?$filterMvCountArray:0);

		$utiCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS uticount', 'DATE_FORMAT(submit_date, "%M-%Y") AS month_reports', 'NosocomialInfection.urinary_tract_infection', 'submit_date', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.urinary_tract_infection' => 'Yes','NosocomialInfection.submit_date BETWEEN ? AND ?' => array($fromDate, $toDate)), 'group' => array('urinary_tract_infection', 'month_reports')));
		foreach($utiCount as $utiCountVal) {
			$filterUtiDateArray[] = $utiCountVal[0]['month_reports'];
			$filterUtiCountArray[$utiCountVal[0]['month_reports']] = $utiCountVal[0]['uticount'];
		}
		$this->set('filterUtiDateArray', isset($filterUtiDateArray)?$filterUtiDateArray:"");
		$this->set('filterUtiCountArray', isset($filterUtiCountArray)?$filterUtiCountArray:0);

		$ucCount = $this->PatientExposure->find('all', array('fields' => array('COUNT(*) AS uccount', 'DATE_FORMAT(submit_date, "%M-%Y") AS month_reports', 'PatientExposure.urinary_catheter', 'submit_date', 'PatientExposure.location_id', 'PatientExposure.id'), 'conditions' => array('PatientExposure.location_id' => $this->Session->read('locationid'), 'PatientExposure.urinary_catheter' => 'Yes','PatientExposure.submit_date BETWEEN ? AND ?' => array($fromDate, $toDate)), 'group' => array('urinary_catheter', 'month_reports')));
		foreach($ucCount as $ucCountVal) {
			$filterUcDateArray[] = $ucCountVal[0]['month_reports'];
			$filterUcCountArray[$ucCountVal[0]['month_reports']] = $ucCountVal[0]['uccount'];
		}
		$this->set('filterUcDateArray', isset($filterUcDateArray)?$filterUcDateArray:"");
		$this->set('filterUcCountArray', isset($filterUcCountArray)?$filterUcCountArray:0);

		$bsiCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS bsicount', 'DATE_FORMAT(submit_date, "%M-%Y") AS month_reports', 'NosocomialInfection.clabsi', 'submit_date', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.clabsi' => 'Yes','NosocomialInfection.submit_date BETWEEN ? AND ?' => array($fromDate, $toDate)), 'group' => array('clabsi', 'month_reports')));
		foreach($bsiCount as $bsiCountVal) {
			$filterBsiDateArray[] = $bsiCountVal[0]['month_reports'];
			$filterBsiCountArray[$bsiCountVal[0]['month_reports']] = $bsiCountVal[0]['bsicount'];
		}
		$this->set('filterBsiDateArray', isset($filterBsiDateArray)?$filterBsiDateArray:"");
		$this->set('filterBsiCountArray', isset($filterBsiCountArray)?$filterBsiCountArray:0);

		$clCount = $this->PatientExposure->find('all', array('fields' => array('COUNT(*) AS clcount', 'DATE_FORMAT(submit_date, "%M-%Y") AS month_reports', 'PatientExposure.central_line', 'submit_date', 'PatientExposure.location_id', 'PatientExposure.id'), 'conditions' => array('PatientExposure.location_id' => $this->Session->read('locationid'), 'PatientExposure.central_line' => 'Yes','PatientExposure.submit_date BETWEEN ? AND ?' => array($fromDate, $toDate)), 'group' => array('central_line', 'month_reports')));
		foreach($clCount as $clCountVal) {
			$filterClDateArray[] = $clCountVal[0]['month_reports'];
			$filterClCountArray[$clCountVal[0]['month_reports']] = $clCountVal[0]['clcount'];
		}
		$this->set('filterClDateArray', isset($filterClDateArray)?$filterClDateArray:"");
		$this->set('filterClCountArray', isset($filterClCountArray)?$filterClCountArray:0);

		$thromboCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS thrombocount', 'DATE_FORMAT(submit_date, "%M-%Y") AS month_reports', 'NosocomialInfection.thrombophlebitis', 'submit_date', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.thrombophlebitis' => 'Yes','NosocomialInfection.submit_date BETWEEN ? AND ?' => array($fromDate, $toDate)), 'group' => array('thrombophlebitis', 'month_reports')));
		foreach($thromboCount as $thromboCountVal) {
			$filterThromboDateArray[] = $thromboCountVal[0]['month_reports'];
			$filterThromboCountArray[$thromboCountVal[0]['month_reports']] = $thromboCountVal[0]['thrombocount'];
		}
		$this->set('filterThromboDateArray', isset($filterThromboDateArray)?$filterThromboDateArray:"");
		$this->set('filterThromboCountArray', isset($filterThromboCountArray)?$filterThromboCountArray:0);

		$plCount = $this->PatientExposure->find('all', array('fields' => array('COUNT(*) AS plcount', 'DATE_FORMAT(submit_date, "%M-%Y") AS month_reports', 'PatientExposure.peripheral_line', 'submit_date', 'PatientExposure.location_id', 'PatientExposure.id'), 'conditions' => array('PatientExposure.location_id' => $this->Session->read('locationid'), 'PatientExposure.peripheral_line' => 'Yes','PatientExposure.submit_date BETWEEN ? AND ?' => array($fromDate, $toDate)), 'group' => array('peripheral_line', 'month_reports')));
		foreach($plCount as $plCountVal) {
			$filterPlDateArray[] = $plCountVal[0]['month_reports'];
			$filterPlCountArray[$plCountVal[0]['month_reports']] = $plCountVal[0]['plcount'];
		}
		$this->set('filterPlDateArray', isset($filterPlDateArray)?$filterPlDateArray:"");
		$this->set('filterPlCountArray', isset($filterPlCountArray)?$filterPlCountArray:0);

		$otherCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS othercount', 'DATE_FORMAT(submit_date, "%M-%Y") AS month_reports', 'NosocomialInfection.other_nosocomial_infection', 'submit_date', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.other_nosocomial_infection' => 'Yes','NosocomialInfection.submit_date BETWEEN ? AND ?' => array($fromDate, $toDate)), 'group' => array('other_nosocomial_infection', 'month_reports')));
		foreach($otherCount as $otherCountVal) {
			$filterOtherDateArray[] = $otherCountVal[0]['month_reports'];
			$filterOtherCountArray[$otherCountVal[0]['month_reports']] = $otherCountVal[0]['othercount'];
		}
		$this->set('filterOtherDateArray', isset($filterOtherDateArray)?$filterOtherDateArray:"");
		$this->set('filterOtherCountArray', isset($filterOtherCountArray)?$filterOtherCountArray:0);
	}

	/**
	 *
	 * ssi percentage reports
	 *
	 **/

	public function admin_ssi_reports() {
		$this->uses = array('SurgicalSiteInfection', 'OptAppointment');
		$this->layout = 'advance' ;
		$ssiCount = $this->SurgicalSiteInfection->find('all', array('fields' => array('COUNT(*) AS ssicount', 'SurgicalSiteInfection.location_id'), 'conditions' => array('SurgicalSiteInfection.location_id' => $this->Session->read('locationid'), 'SurgicalSiteInfection.is_deleted' => 0), 'group' => array('location_id'),'recursive' => -1));
		$this->set('ssiCount', $ssiCount);
		$spYesCount = $this->OptAppointment->find('all', array('fields' => array('COUNT(*) AS spYescount', 'OptAppointment.location_id'), 'conditions' => array('OptAppointment.location_id' => $this->Session->read('locationid'), 'OptAppointment.procedure_complete' => 1, 'OptAppointment.is_deleted' => 0), 'group' => array('location_id'),'recursive' => -1));
		$this->set('spYesCount', $spYesCount);
			
	}

	/**
	 *
	 * ssi percentage reports
	 *
	 **/

	public function admin_ssi_xlsreports() {
		$this->uses = array('SurgicalSiteInfection', 'OptAppointment');
		$this->layout = 'advance' ;
		$ssiCount = $this->SurgicalSiteInfection->find('all', array('fields' => array('COUNT(*) AS ssicount', 'SurgicalSiteInfection.location_id'), 'conditions' => array('SurgicalSiteInfection.location_id' => $this->Session->read('locationid'), 'SurgicalSiteInfection.is_deleted' => 0), 'group' => array('location_id'),'recursive' => -1));
		$this->set('ssiCount', $ssiCount);
		$spYesCount = $this->OptAppointment->find('all', array('fields' => array('COUNT(*) AS spYescount', 'OptAppointment.location_id'), 'conditions' => array('OptAppointment.location_id' => $this->Session->read('locationid'), 'OptAppointment.procedure_complete' => 1, 'OptAppointment.is_deleted' => 0), 'group' => array('location_id'),'recursive' => -1));
		$this->set('spYesCount', $spYesCount);
		$this->layout = false;
	}



	/**
	@name : admin_patient_admission_report
	@created for: Admission report
	@created on : 2/15/2012
	@created By : Anand

	**/
	public function admin_patient_admission_report(){
		$this->uses = array('Patient','Location','Person','Consultant','User','DoctorProfile', 'Department','TariffList');
		$this->layout = 'advance' ;
		$fieldsArr = array('department_id'=>'Department','previous_receivable'=>'Previous receivable','email'=>'Email',
				/*'sponsers_auth'=>'Authorization from Sponsor','relative_name'=>'Relatives name','relation'=>'Relationship with patient','doc_ini_assess_on'=>'Start of assessment by Doctor','doc_ini_assess_end_on'=>'End of assessment by Doctor','nurse_assess_on'=>'Start of Nursing Assessment',
				'nurse_assess_end_on'=>'End of Nursing Assessment','nurse_assessment'=>'Registration Completed by patient','nutritional_assess_on'=>'Start of Nutritional Assessment',
				'doc_ini_assessment'=>'Form received by Patient', 'instructions' => 'Note','name_of_ip' => 'Name of the Employee', 'executive_emp_id_no' => 'Card Number','nutritional_assess_end_on'=>'End of Nutritional Assessment',*/
				'form_received_on'=>'Form received Date','mobile_phone'=>'Relative Phone No.','admission_id'=>'Registration Number','form_received_on'=>'Date Of Admission', 'discharge_date'=>'Date Of Discharge', 'bill_number' => 'Bill Number', 'total_amount' => 'Total Bill', 'amount_paid' => 'Advance Recieved', 
				'discount_rupees' => 'Discount Amount', 'amount_pending' => 'Balance');
		$this->set('fieldsArr',$fieldsArr);

		if($this->request->data){
			//debug($this->request->data);exit;
			// Collect required values in variables
			$format = $this->request->data['PatientAdmissionReport']['format'];
			$from = $this->request->data['PatientAdmissionReport']['from'];
			$to =   $this->request->data['PatientAdmissionReport']['to'];
			$sex = $this->request->data['PatientAdmissionReport']['sex'];
			$age = $this->request->data['PatientAdmissionReport']['age'];
			$patient_location = $this->request->data['PatientAdmissionReport']['patient_location'];
			$blood_group = $this->request->data['PatientAdmissionReport']['blood_group'];
			$reference_doctor = $this->request->data['PatientAdmissionReport']['reference_doctor'];
			$patient_type = $this->request->data['PatientAdmissionReport']['type'];
			$tarrif_std_id=$this->request->data['PatientAdmissionReport']['pt_type'];
			$doctor_type = $this->request->data['doctor'];
			$department_type = $this->request->data['PatientAdmissionReport']['department_type'];

			if(isset($this->request->data['PatientAdmissionReport']['treatment_type'])){
				$treatment_type = $this->request->data['PatientAdmissionReport']['treatment_type'];
			}
			//$sponsor = $this->request->data['PatientRegistrationReport']['sponsor'];
			$record = '';
			//BOF pankaj code

			$this->Patient->bindModel(array(
					'belongsTo' => array(
							'Location' =>array('foreignKey' => 'location_id'),
							'Person'=>array('foreignKey'=>'person_id'),
							'DoctorProfile'=>array('foreignKey'=>false,'conditions'=>array('DoctorProfile.user_id=Patient.doctor_id')),
							'User'=>array('foreignKey'=>false,'conditions'=>array('User.id=Patient.doctor_id')),
							'Initial'=>array('foreignKey'=>false,'conditions'=>array('Initial.id=User.initial_id')),
							'Consultant'=>array('foreignKey'=>'consultant_id'),
							'Department'=>array('foreignKey'=>'department_id'),
							'FinalBilling'=>array('foreignKey'=>false,'conditions'=>array('FinalBilling.patient_id=Patient.id')),
							'Billing'=>array('foreignKey'=>false,'conditions'=>array('Billing.patient_id=Patient.id')),
							'TariffStandard'=>array('foreignKey'=>false,'conditions'=>array('Patient.tariff_standard_id=TariffStandard.id')),

							'PatientInitial' =>array('foreignKey' => false,'conditions'=>array('PatientInitial.id =Person.initial_id' )),
							'Appointment'=>array('foreignKey'=>false,'conditions'=>array('Appointment.patient_id=Patient.id')),
							'OpdInvoice'=>array('foreignKey'=>false,'conditions'=>array('OpdInvoice.patient_id=Patient.id')),
					)),false);


			if(!empty($to) && !empty($from)){
				$from = $this->DateFormat->formatDate2STDForReport($this->request->data['PatientAdmissionReport']['from'],Configure::read('date_format'))." 00:00:00";
				$to = $this->DateFormat->formatDate2STDForReport($this->request->data['PatientAdmissionReport']['to'],Configure::read('date_format'))." 23:59:59";
				// get record between two dates. Make condition
				$search_key = array('Patient.form_received_on <=' => $to, 'Patient.form_received_on >=' => $from,'Patient.is_deleted'=>0,'Patient.location_id'=>$this->Session->read('locationid'));
			}else{
				$search_key =array('Patient.location_id'=>$this->Session->read('locationid')) ;
			}
			if(!(empty($sex))){
				$search_key['Person.sex'] =  $sex;
			}
			if(!(empty($age))){
				$ageRange = explode('-',$age);
				$search_key['Person.age between ? and ?'] =  array($ageRange[0],$ageRange[1]);
			}
			if(!(empty($blood_group))){
				$search_key['Person.blood_group'] =  $blood_group;
			}
			if(!empty($patient_location)){
				$search_key['Person.city'] =  $patient_location;
			}
			if(!empty($reference_doctor)){
				$search_key['Patient.consultant_id'] =  $reference_doctor;
			}
			if(!empty($patient_type)){
				if($patient_type == 'Emergency'){
					$search_key['Patient.is_emergency'] = 1;
					$search_key['Patient.admission_type'] =  'IPD';
				} else if($patient_type == 'IPD'){
					$search_key['Patient.admission_type'] =  'IPD';
				} else if($patient_type == 'OPD'){
					if(isset($treatment_type) AND $treatment_type != ''){
						$search_key['Patient.treatment_type'] = $treatment_type;
						$search_key['Patient.admission_type'] =  'OPD';
					} else {
						$search_key['Patient.admission_type'] =  'OPD';
					}
				}
			}

			if(!empty($doctor_type)){
				$search_key['Patient.doctor_id'] =  $doctor_type;
			}
			if(!empty($department_type)){
				$search_key['Patient.department_id'] =  $department_type;
			}
			
			if($tarrif_std_id){
				$this->loadModel('TariffStandard');
				$privateID = $this->TariffStandard->getPrivateTariffID();
				if(strtolower($tarrif_std_id)=='private'){
					$search_key['Patient.tariff_standard_id']=$privateID;
					$patType='Private';
				}else{
					if(!empty($this->request->data['PatientAdmissionReport']['tariff_standard_id'])){
						$search_key['Patient.tariff_standard_id']=$this->request->data['PatientAdmissionReport']['tariff_standard_id'];
						$patType=$this->TariffStandard->getTariffStandardName($this->request->data['PatientAdmissionReport']['tariff_standard_id']);
					}else{
						$search_key['Patient.tariff_standard_id NOT']=$privateID;
						$patType='Corporate';
					}
				}
			}else{
				$patType='Private/Corporate';
			}
			$this->set('patType',$patType);
			
			$selectedFields = '';
			// if you select fields of finalbilling table //
			$finalBillingFields = array('bill_number', 'total_amount', 'amount_paid', 'discount_rupees', 'amount_pending');
			if(!empty($this->request->data['PatientAdmissionReport']['field_id'])){
				foreach($this->request->data['PatientAdmissionReport']['field_id'] as $key=>$value){

					if($value=='department_id'){
						$selectedFields .= ",Department.name";
					} /*elseif($value=='name_of_ip'){
						$selectedFields .= ",Person.name_of_ip";
					} elseif($value=='executive_emp_id_no'){
						$selectedFields .= ",Person.executive_emp_id_no";
					} */elseif(in_array($value, $finalBillingFields)) {
						$selectedFields .= ",FinalBilling.".$this->request->data['PatientAdmissionReport']['field_id'][$key];
					} else {
						$selectedFields .= ",Patient.".$this->request->data['PatientAdmissionReport']['field_id'][$key];
					}
				}
			}
			$fields =array('OpdInvoice.bill_number','Appointment.token_no','PatientInitial.name,Patient.id,Patient.patient_id,Patient.lookup_name,Patient.is_emergency,Patient.admission_type,Patient.treatment_type,Person.city,Patient.form_received_on,
					Patient.admission_id,Patient.mobile_phone,Person.age,Person.sex,Person.blood_group,Department.name AS deptname,TariffStandard.name
					,CONCAT(Initial.name," ",DoctorProfile.doctor_name) AS doctor_name ,CONCAT(Consultant.first_name," ",Consultant.last_name),FinalBilling.amount_paid,SUM(Billing.amount) as paidAmount'.$selectedFields);


			$record = $this->Patient->find('all',array('order'=>array('Patient.form_received_on' => 'ASC'),
									'fields'=>$fields,'conditions'=>$search_key,'group'=>array('Patient.id')));
			$this->set('selctedFields',$this->request->data['PatientAdmissionReport']['field_id']);
			
			//EOF pankaj code
			//pr($record);exit;
			if($format == 'PDF'){
				$this->set('reports',$record);
				$this->set(compact('fieldName'));
				$this->set(compact('patient_type'));
				$this->render('patient_admission_pdf','pdf');
			} else {
				$this->set('reports', $record);
				$this->set(compact('fieldName'));
				$this->set(compact('patient_type'));
				$this->render('patient_admission_excel','');
			}
		}
		//For visit type
		$OPCheckUpOptions=$this->TariffList->find('list',array('fields'=>array('id','name'),'conditions'=>array('is_deleted'=>'0','check_status'=>'1','location_id'=>$this->Session->read('locationid'))));
		$this->set('opdoptions',$OPCheckUpOptions);
		//patient location
		$this->set('patient_location',$this->Person->find('list',array('fields'=>array('city','city'))));
		$this->set('refrences',$this->Consultant->getConsultant());
		// get department list //
		$departmentList = $this->Department->find('list', array('fields' => array('Department.id', 'Department.name'), 'conditions' => array('Department.location_id' => $this->Session->read('locationid'), 'Department.is_active' => 1)));
		$this->set('departmentList', $departmentList);
		$this->set('doctorList', $this->DoctorProfile->getDoctors());
		$this->loadModel('TariffStandard');
		$this->set('tariffStandard', $this->TariffStandard->getAllCorporateTariffs());

	}


	/**
	@name : admin_patient_admission_report_chart
	@created for: Admission report
	@created on : 2/15/2012
	@created By : Anand
	This action get triggred when user select graph in format list on admission report.
	**/
	public function admin_patient_admission_report_chart(){

		$this->uses = array('Patient','Location','Person','Consultant','User','DoctorProfile');
		$this->layout = 'advance' ;
		if(!empty($this->request->data)){

			$this->set('title_for_layout', __('Total Admissions Report Chart', true));

			$reportYear = $this->request->data['PatientAdmissionReport']['year'];
			$reference = $this->request->data['PatientAdmissionReport']['reference_doctor'];
			$patient_type = $this->request->data['PatientAdmissionReport']['type'];
			$doctor_type = $this->request->data['doctor'];
			$department_type = $this->request->data['PatientAdmissionReport']['department_type'];
			$location_id = $this->Session->read('locationid');
			$consultantName = '';
			$type = 'All';
			$reportMonth = $this->request->data['PatientAdmissionReport']['month'];
			if(!empty($reportMonth)){
				$countDays = cal_days_in_month(CAL_GREGORIAN, $reportMonth, $reportYear); // Days of the month selected
				$fromDate = $reportYear."-".$reportMonth."-01";
				$toDate = $reportYear."-".$reportMonth."-".$countDays;
			} else {
				$fromDate = $reportYear."-01-01"; // set first date of current year
				$toDate = $reportYear."-12-31"; // set last date of current year
			}

			// Bind Models
			$this->Patient->bindModel(array(
					'belongsTo' => array(
							'Location' =>array('foreignKey' => 'location_id'),
							'Person'=>array('foreignKey'=>'person_id'),
							/*'DoctorProfile'=>array('foreignKey'=>false,'conditions'=>array('DoctorProfile.user_id=Patient.doctor_id')),*/
							'Consultant'=>array('foreignKey'=>'consultant_id'),
							'Department'=>array('foreignKey'=>'department_id'),
					)),false);
			// This will not change the actual from date
			$setDate = $fromDate;
			// Create Y axix array as per month
			while($toDate > $setDate) {
				$yaxisArray[date("F-Y", strtotime($setDate))] = date("F", strtotime($setDate));
				$expfromdate = explode("-", $setDate);
				$setDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}

			if($fromDate != '' AND $toDate != ''){
				$toSearch = array('Patient.form_received_on <=' => $toDate, 'Patient.form_received_on >=' => $fromDate, 'Patient.is_deleted'=>0,'Patient.location_id'=>$this->Session->read('locationid'));
			}

			if(!empty($reference)){
				$toSearch['Patient.consultant_id'] = $reference; // Condition reference doctors
			}

			if(!empty($patient_type)){
				if($patient_type == 'Emergency'){
					$toSearch['Patient.is_emergency'] = 1;
					$toSearch['Patient.admission_type'] = 'IPD'; // Condition for year and month
					$type = $patient_type;
				} else {
					$toSearch['Patient.admission_type'] = $patient_type; // Condition for year and month
					$type = $patient_type;

				}
			}
			if(!empty($doctor_type)){
				$toSearch['Patient.doctor_id'] = $doctor_type; // Condition reference doctors
			}
			if(!empty($department_type)){
				$toSearch['Patient.department_id'] = $department_type; // Condition reference doctors
			}

			// Collect record here
			$countRecord = $this->Patient->find('all', array('fields' => array('COUNT(*) AS recordcount', 'DATE_FORMAT(form_received_on, "%M-%Y") AS month_reports',
					'Patient.form_received_on', 'Patient.doctor_id','Patient.admission_type','Patient.is_emergency','CONCAT(Consultant.first_name," ",Consultant.last_name)'),
					'conditions' => $toSearch ,'group' => array('month_reports')));

			//pr($countRecord);exit;

			// Set data for view as per record counted
			foreach($countRecord as $countRecordVal) {
				$filterRecordDateArray[] = $countRecordVal[0]['month_reports'];
				$filterRecordCountArray[$countRecordVal[0]['month_reports']] = $countRecordVal[0]['recordcount'];
			}
			$this->set('reportYear', isset($reportYear)?$reportYear:date("Y"));
			$this->set('filterRecordDateArray', isset($filterRecordDateArray)?$filterRecordDateArray:"");
			$this->set('filterRecordCountArray', isset($filterRecordCountArray)?$filterRecordCountArray:0);
			$this->set('yaxisArray', $yaxisArray);
			$this->set(compact('countRecord'));
			$this->set(compact('reportMonth'));
			$this->set(compact('type'));

		}
	}


	/**
	@name : admin_patient_discharge_report
	@created for: Admission report
	@created on : 2/15/2012
	@created By : Anand

	**/

	public function admin_patient_discharge_report(){
		
		$this->uses = array('FinalBilling','Location','Patient','Person','TariffStandard');
		$this->layout = 'advance' ;
		if($this->request->data){//debug($this->request->data);exit;

			$from = $this->DateFormat->formatDate2STDForReport($this->request->data['PatientDischargeReport']['from'],Configure::read('date_format'))." 00:00:00";
			$to = $this->DateFormat->formatDate2STDForReport($this->request->data['PatientDischargeReport']['to'],Configure::read('date_format'))." 23:59:59";
			
			$format = $this->request->data['PatientDischargeReport']['format'];
			$reason = $this->request->data['PatientDischargeReport']['reason'];
			$payment_category = $this->request->data['PatientRegistrationReport']['payment_category'];
			$credit_type = $this->request->data['PatientRegistrationReport']['sponsor'];
			$corporate_loc = $this->request->data['PatientRegistrationReport']['corporate_location_id'];
			$corporate = $this->request->data['PatientRegistrationReport']['corporate_id'];
			$corporate_sub_loc = $this->request->data['PatientRegistrationReport']['sublocation_id'];
			$insurance_type = $this->request->data['PatientRegistrationReport']['insurance_type_id'];
			$insurance_com = $this->request->data['PatientRegistrationReport']['insurenceCom_id'];


			$this->FinalBilling->bindModel(array(
					'belongsTo' => array(
							
							'Patient' =>array('type'=>'inner','foreignKey' => false,'conditions'=>array('Patient.id =FinalBilling.patient_id' )),
							'Corporate' =>array('foreignKey' => false,'conditions'=>array('Corporate.id=Patient.corporate_id')),
							//by swapnil to get the patient tariff on 01.10.2015
							'TariffStandard' =>array('foreignKey' => false,'conditions'=>array('TariffStandard.id=Patient.tariff_standard_id')),
							'InsuranceCompany'=>array('foreignKey'=>false,'conditions'=>array("Patient.insurance_company_id=InsuranceCompany.id")),
							
							'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id =Patient.person_id' )),
							'PatientInitial' =>array('foreignKey' => false,'conditions'=>array('PatientInitial.id =Person.initial_id' )),
							'Corporate' =>array('foreignKey' => false,'conditions'=>array('Corporate.id=Patient.corporate_id' )),
							'InsuranceCompany' =>array('foreignKey' => false,'conditions'=>array('InsuranceCompany.id=Patient.insurance_company_id' )),
					)),false);

			// get record between two dates. Make condition
			
			$conditions = array('FinalBilling.discharge_date <=' => $to, 'FinalBilling.discharge_date >=' => $from);
			
			
			if(!(empty($payment_category))){
				$patientCond['Patient']['payment_category']=$conditions['Patient']['payment_category'] =  $payment_category;
			}
			if(!(empty($credit_type))){
				$patientCond['Patient']['credit_type_id']=$conditions['Patient']['credit_type_id'] =  $credit_type;
			}
			if(!(empty($corporate_loc))){
				$patientCond['Patient']['corporate_location_id']=$conditions['Patient']['corporate_location_id'] =  $corporate_loc;
			}
			if(!(empty($corporate))){
				$patientCond['Patient']['corporate_id']=$conditions['Patient']['corporate_id'] =  $corporate;
			}
			if(!(empty($corporate_sub_loc))){
				$patientCond['Patient']['corporate_sublocation_id']=$conditions['Patient']['corporate_sublocation_id'] =  $corporate_sub_loc;
			}
			if(!(empty($insurance_type))){
				$patientCond['Patient']['insurnace_type_id']=$conditions['Patient']['insurnace_type_id'] =  $insurance_type;
			}
			if(!(empty($insurance_com))){
				$patientCond['Patient']['insurance_company_id']=$conditions['Patient']['insurance_company_id'] =  $insurance_com;
			}

			$patientCond['Patient']['location_id']=$conditions['Patient']['location_id'] = $this->Session->read('locationid');
			$patientCond['Patient']['is_deleted']=$conditions['Patient']['is_deleted'] = 0;
			$patientCond['Patient']['is_discharge']=$conditions['Patient']['is_discharge'] = 1;
			if($this->request->data['PatientDischargeReport']['admission_type']){
				$patientCond['Patient']['admission_type']=$conditions['Patient']['admission_type'] = $this->request->data['PatientDischargeReport']['admission_type'];
			}
			$conditions['FinalBilling']['location_id'] = $this->Session->read('locationid');
			#$conditions['FinalBilling']['discharge_date NOT'] = NULL;
			
			$patientCond['Patient']['discharge_date <=']=$conditions['Patient']['discharge_date <='] = $to;
			$patientCond['Patient']['discharge_date >=']=$conditions['Patient']['discharge_date >='] = $from;
			if($reason !="") {
				$conditions['FinalBilling']['reason_of_discharge'] = $reason;
			}

			if($this->request->data['PatientDischargeReport']['tariff_standard_id']){
				$patientCond['Patient']['tariff_standard_id']=$conditions['Patient']['tariff_standard_id'] = $this->request->data['PatientDischargeReport']['tariff_standard_id'];
			} 
			$conditions = $this->postConditions($conditions);
			#debug($conditions);exit;
			$record = $this->FinalBilling->find('all',array(
				'fields'=>array('Patient.form_received_on, Patient.create_time, Patient.admission_id,PatientInitial.name,Patient.id,
					Patient.lookup_name, Patient.admission_type, Patient.discharge_date,Corporate.name,
					InsuranceCompany.name,FinalBilling.discharge_date, FinalBilling.reason_of_discharge,FinalBilling.amount_paid,
					FinalBilling.total_amount, TariffStandard.name','Person.plot_no','Person.city','Person.state','Person.vip_chk','FinalBilling.bill_uploading_date','FinalBilling.dr_claim_date','TariffStandard.id','FinalBilling.hospital_invoice_amount','FinalBilling.date','FinalBilling.other_deduction','FinalBilling.tds'),
				'order'=>array('Patient.discharge_date' => 'ASC'),
				'conditions' => $conditions));
				
			#debug($this->FinalBilling->getDataSource()->getLog(false, false));exit;
			#pr($record);exit;

			/*******************For correct bill amount  Added by -- pooja **************************/
			#debug($patientCond);
			$listcondition = $this->postConditions($patientCond);

			#dpr($listcondition);exit;
			$patientList=$this->Patient->find('list',array('fields'=>array('id','id'),
					'conditions'=>array($listcondition)));
			$this->loadModel('Billing');
			$billCondition['Patient.id']=$patientList;
			$patientBill=$this->Billing->getAllPatientTotalBillForReport($billCondition);
			#debug($record);exit;
			$this->set('patientBill',$patientBill);
			/****************EOF Patient total bill***********************/

			if($format == 'PDF'){
					
				$this->set('reports',$record);
					
				$this->render('patient_discharge_pdf','pdf');
			} else {
					
				$this->set('reports', $record);
					
				$this->render('patient_discharge_excel','');
		 }
		}

		$this->loadModel('TariffStandard');
		$this->set('tariffStandardList',$this->TariffStandard->getAllTariffStandard());
	}


	//BOF pankaj
	function admin_incedence_report(){
		$this->uses = array('Incident','FinalBilling','IncidentType');
		$this->layout = 'advance' ;
		if($this->request->data){
			//debug($this->request->data['Report']['format']);exit;
			$this->set('report_title','Incendence Report');
			$format = $this->request->data['Report']['format'];
			$search_ele  = $this->request->data['Report'];
			$this->Incident->bindModel(array(
					'belongsTo' => array(
							'Location' =>array('foreignKey' => 'location_id'),
							'IncidentType'=>array('foreignKey'=>'analysis_option'),
							'FinalBilling'=>array('foreignKey'=>false,'conditions'=>array('FinalBilling.patient_id=Incident.patient_id',"reason_of_discharge != '' "))
					)),false);
			$search_key = array('Incident.location_id'=>$this->Session->read('locationid'));

			if(!empty($search_ele['year'])){
				$search_key = array('Incident.incident_date >='=>$search_ele['year']."-01-01",'Incident.incident_date <='=>$search_ele['year']."-12-31",'Incident.location_id'=>$this->Session->read('locationid'));
			}

			$fields =array('monthname(incident_date) as month','count(*) as count','medication_error','analysis_option','incident_date','FinalBilling.reason_of_discharge','IncidentType.name');
			$search_key["FinalBilling.reason_of_discharge != "]= '' ;
			$search_key["FinalBilling.discharge_date != "]= '' ;

			$record = $this->Incident->find('all',array('fields'=>$fields,'conditions'=>$search_key,'group'=>array('IncidentType.name,MONTH( incident_date )')));
			$mediKey = $search_key ;
			$mediKey['medication_error !='] = '';
			$medicationRecord = $this->Incident->find('all',array('fields'=>array('monthname(incident_date) as month','count(*) as count','medication_error'),'conditions'=>$mediKey,'group'=>array('MONTH( incident_date )')));

			$discharge = $this->FinalBilling->find('all',array('fields'=>array('monthname(discharge_date) as month,year(discharge_date) as year ,count(*) as count'),
					'conditions'=>array("reason_of_discharge != ''","discharge_date !='' "),'group'=>array('MONTH( discharge_date ) , YEAR( discharge_date )')));

			$incidentRes  = $this->IncidentType->Find('all',array('fields'=>array('name'),'conditions'=>array('location_id'=>$this->Session->read('locationid'))));
			foreach($record as $key =>$value){
				$finalArr[$value[0]['month']][$value['IncidentType']['name']] = $value[0]['count'];
			}
			foreach($medicationRecord as $medKey => $medVal){
				$finalArr[$medVal[0]['month']]['medication_error'] = $medVal[0]['count'];
			}

			foreach($discharge as $key =>$disMonth){
				$monthCount[$disMonth[0]['month']]  = $disMonth[0]['count'] ;
			}
            
			$this->set(array('record'=>$finalArr,'discharge'=>$monthCount,'incidentType'=>$incidentRes,'year'=>$search_ele['year']));

			/*if(!empty($discharge)){

			//discharge count
			$monthCount = array();

			foreach($discharge as $key =>$disMonth){
			$monthCount[$disMonth[0]['month']]  = $disMonth[0]['count'] ;
			}

			$m = 1 ;
			$f = 1;
			$fa = 1;
			$s =1 ;
			$in =1 ;

			foreach($record as $pdfData){

			if(!empty($pdfData['FinalBilling']['reason_of_discharge'])){

			$medication_error = $pdfData['Incident']['medication_error'];
			$analysis_option  = $pdfData['Incident']['analysis_option'];
			$month =date('M',strtotime($pdfData['Incident']['incident_date'])) ;
			$error = array();
			if(!empty($medication_error)){
			$error[$month][]     =1 ;
			}
			if($analysis_option=='tranfusion error'){
			$fusionJan[$month]   =1;
			}
			if($analysis_option=='patient fall'){
			$fallJan[$month][]   =1;
			}
			if($analysis_option=='bed sores') {
			$soreJan[$month][]   =1;
			}
			if($analysis_option=='needle stick injury'){
			$injuryJan[$month][] =1;
			}
			}
			}

			$month =array('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec');
			$fullMonth =array('Jan'=>'January','Feb'=>'February','Mar'=>'March','Apr'=>'April','May'=>'May','Jun'=>'June','Jul'=>'July','Aug'=>'August','Sep'=>'September','Oct'=>'October','Nov'=>'November','Dec'=>'December');

			foreach($month as $mon){
			$fullMonthCount = $monthCount[$fullMonth[$mon]] ;
			if($fullMonthCount > 0 ){
			$medicationErrorArray[$fullMonth[$mon]]  = (count($error[$mon])/$fullMonthCount)*100;
			$fusionArray[$fullMonth[$mon]]			 = (count($fusionJan[$mon])/$fullMonthCount)*100;
			$fallArray[$fullMonth[$mon]]			 = (count($fallJan[$mon])/$fullMonthCount)*100;
			$soreArray[$fullMonth[$mon]]			 = (count($soreJan[$mon])/$fullMonthCount)*100;
			$injuryArray[$fullMonth[$mon]]			 = (count($injuryJan[$mon])/$fullMonthCount)*100;
			}
			}


			$this->set(array('medicationArray'=>$medicationErrorArray,'fusionArray'=>$fusionArray,'fallArray'=>$fallArray,'soreArray'=>$soreArray,'injuryArray'=>$injuryArray));
			}*/
			
			if($format == 'PDF'){
				$this->set('reports',$record);
				//$this->layout = 'pdf'; //this will use the pdf.ctp layout
				$this->render('incedence_pdf','pdf');
			} else {
				$this->set('reports', $record);
				$this->render('incedence_excel','');
				
			}
		}
		//retrive the last yr in db
		$this->Incident->recursive = -1 ;
		$last = $this->Incident->find('first',array('fields'=>array('incident_date'),'order'=>'incident_date desc'));
		$this->set('endyear',date('Y',strtotime($last['Incident']['incident_date']))) ;
	}


	function admin_incedence_chart_report(){
		$this->uses = array('Incident','FinalBilling','IncidentType');
		$this->layout = 'advance' ;
		if($this->request->data){

			$this->set('report_title','Incendence Report');
			$format = $this->request->data['Report']['format'];
			$search_ele  = $this->request->data['Report'];
			$this->Incident->bindModel(array(
					'belongsTo' => array(
							'Location' =>array('foreignKey' => 'location_id'),
							'IncidentType'=>array('foreignKey'=>'analysis_option'),
							'FinalBilling'=>array('foreignKey'=>false,'conditions'=>array('FinalBilling.patient_id=Incident.patient_id',"reason_of_discharge != '' "))
					)),false);
			$search_key = array('Incident.location_id'=>$this->Session->read('locationid'));

			if(!empty($search_ele['year'])){
				$search_key = array('Incident.incident_date >='=>$search_ele['year']."-01-01",'Incident.incident_date <='=>$search_ele['year']."-12-31",'Incident.location_id'=>$this->Session->read('locationid'));
			}

			$fields =array('monthname(incident_date) as month','count(*) as count','medication_error','analysis_option','incident_date','FinalBilling.reason_of_discharge','IncidentType.name');
			$search_key["FinalBilling.reason_of_discharge != "]= '' ;
			$search_key["FinalBilling.discharge_date != "]= '' ;

			$record = $this->Incident->find('all',array('fields'=>$fields,'conditions'=>$search_key,'group'=>array('IncidentType.name,MONTH( incident_date )')));
			$mediKey = $search_key ;
			$mediKey['medication_error !='] = '';
			$medicationRecord = $this->Incident->find('all',array('fields'=>array('monthname(incident_date) as month','count(*) as count','medication_error'),'conditions'=>$mediKey,'group'=>array('MONTH( incident_date )')));

			$discharge = $this->FinalBilling->find('all',array('fields'=>array('monthname(discharge_date) as month,year(discharge_date) as year ,count(*) as count'),
					'conditions'=>array("reason_of_discharge != ''","discharge_date !='' "),'group'=>array('MONTH( discharge_date ) , YEAR( discharge_date )')));

			$incidentRes  = $this->IncidentType->Find('all',array('fields'=>array('name'),'conditions'=>array('location_id'=>$this->Session->read('locationid'))));
			foreach($record as $key =>$value){
				$finalArr[$value[0]['month']][$value['IncidentType']['name']] = $value[0]['count'];
			}
			foreach($medicationRecord as $medKey => $medVal){
				$finalArr[$medVal[0]['month']]['medication_error'] = $medVal[0]['count'];
			}

			foreach($discharge as $key =>$disMonth){
				$monthCount[$disMonth[0]['month']]  = $disMonth[0]['count'] ;
			}
            
			$this->set(array('record'=>$finalArr,'discharge'=>$monthCount,'incidentType'=>$incidentRes,'year'=>$search_ele['year']));


			//retrive the last yr in db
			$this->Incident->recursive = -1 ;
			$last = $this->Incident->find('first',array('fields'=>array('incident_date'),'order'=>'incident_date desc'));
			$this->set('pdfData',$last);
		}else{
			$this->redirect($this->referer());

		}
			
	}


	/**
	 *
	 * length of stay reports
	 *
	 **/

	public function admin_length_of_stay() {
		$this->set('title_for_layout', __('Average length of stay', true));
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->losreports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		} else {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31"; // set last date of current year
			$this->losreports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);

		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));

	}

	/**
	 *
	 * length of stay reports query and to calculate inpatient days for ward occupancy report
	 *
	 **/

	private function losreports($fromDate=NULL, $toDate=NULL) {
		$this->uses = array('Patient', 'FinalBilling', 'WardPatient');
		$this->layout = 'advance' ;
		$admitDatePerPatient = $this->WardPatient->find('all', array('fields' => array('DATE_FORMAT(in_date, "%M-%Y") AS month_reports', 'DATE_FORMAT(in_date, "%Y-%m-%d") AS admit_date',  'WardPatient.location_id','WardPatient.patient_id'), 'conditions' => array('WardPatient.location_id' => $this->Session->read('locationid'),'WardPatient.is_deleted' => 0), 'group' => array("patient_id  HAVING  admit_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'order' => 'in_date'));

		$dischargeDatePerPatient = $this->WardPatient->find('all', array('fields' => array('DATE_FORMAT(out_date, "%M-%Y") AS month_reports', 'DATE_FORMAT(out_date, "%Y-%m-%d") AS discharge_date',  'WardPatient.location_id','WardPatient.patient_id'), 'conditions' => array('WardPatient.location_id' => $this->Session->read('locationid'), 'is_discharge'=> 1,'WardPatient.is_deleted' => 0), 'group' => array("patient_id  HAVING  discharge_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'order' => 'out_date'));

		foreach($admitDatePerPatient as $admitDatePerPatientVal) {
			$patientAdmitDetails[$admitDatePerPatientVal['WardPatient']['patient_id']]['month'] = $admitDatePerPatientVal[0]['month_reports'];
			$patientAdmitDetails[$admitDatePerPatientVal['WardPatient']['patient_id']]['admit_date'] = $admitDatePerPatientVal[0]['admit_date'];
		}

		foreach($dischargeDatePerPatient as $dischargeDatePerPatientVal) {
			$patientDischargeDetails[$dischargeDatePerPatientVal['WardPatient']['patient_id']]['month'] = $dischargeDatePerPatientVal[0]['month_reports'];
			$patientDischargeDetails[$dischargeDatePerPatientVal['WardPatient']['patient_id']]['discharge_date'] = $dischargeDatePerPatientVal[0]['discharge_date'];
			$dischargePatientIdArray[] = $dischargeDatePerPatientVal['WardPatient']['patient_id'];
		}
			
		$lastval = "";
		foreach($patientAdmitDetails as $key => $patientAdmitDetailsVal ) {
			// store last month value  //
			$cnt++;
			// check last month value if same or not //
			if($lastval == $patientAdmitDetailsVal['month']) {
				// if admit and dischare are on same month otherwise go to else //
				if($patientAdmitDetailsVal['month'] == $patientDischargeDetails[$key]['month']) {
					$interval = $this->DateFormat->dateDiff($patientAdmitDetailsVal['admit_date'], $patientDischargeDetails[$key]['discharge_date']);
					$timeDay 	= $interval->days+1;
					if($timeDay > 0) {
						$filterIpdCountArray[$patientAdmitDetailsVal['month']] += $timeDay;
					} elseif($timeDay == 0) {
						$filterIpdCountArray[$patientAdmitDetailsVal['month']] += 1;
					} else {
						$filterIpdCountArray[$patientAdmitDetailsVal['month']] += 0;
					}
				} else {
					// if discharge date exist but more than one month //
					if(in_array($key, $dischargePatientIdArray)) {
						$expPatientAdmitDate = explode("-", $patientAdmitDetailsVal['admit_date']);
						$expPatientDischargeDate = explode("-", $patientDischargeDetails[$key]['discharge_date']);
						// more than one month gap //
						$diffDate = date("m-Y" , strtotime($patientDischargeDetails[$key]['discharge_date'])) - date("m-Y", strtotime($patientAdmitDetailsVal['admit_date']));

						$i=0;
						while($i <= $diffDate) {

							if($i == 0) {
								$maxDate = $expPatientAdmitDate[0]."-".$expPatientAdmitDate[1]."-".cal_days_in_month(CAL_GREGORIAN, $expPatientAdmitDate[1], $expPatientAdmitDate[0]);
								$interval = $this->DateFormat->dateDiff($patientAdmitDetailsVal['admit_date'],$maxDate);
								$timeDay 	= $interval->days+1;
								if($timeDay > 0) {
									$filterIpdDateArray[] = $patientAdmitDetailsVal['month'];
									$filterIpdCountArray[$patientAdmitDetailsVal['month']] += $timeDay;
								} elseif($timeDay == 0) {
									$filterIpdDateArray[] = $patientAdmitDetailsVal['month'];
									$filterIpdCountArray[$patientAdmitDetailsVal['month']] += 1;
								} else {
									$filterIpdDateArray[] = $patientAdmitDetailsVal['month'];
									$filterIpdCountArray[$patientAdmitDetailsVal['month']] += 0;
								}
							} else if($i == $diffDate) {
								$maxDate = $patientDischargeDetails[$key]['discharge_date'];
								$startDate = $expPatientDischargeDate[0]."-".$expPatientDischargeDate[1]."-"."01";
								$interval = $this->DateFormat->dateDiff($startDate,$maxDate);
									
								$timeDay 	= $interval->days+1;
								if($timeDay > 0) {
									$filterIpdDateArray[] = date("F-Y" ,strtotime($patientDischargeDetails[$key]['discharge_date']));
									$filterIpdCountArray[date("F-Y" ,strtotime($patientDischargeDetails[$key]['discharge_date']))] += $timeDay;
								} elseif($timeDay == 0) {
									$filterIpdDateArray[] = date("F-Y" ,strtotime($patientDischargeDetails[$key]['discharge_date']));
									$filterIpdCountArray[date("F-Y" ,strtotime($patientDischargeDetails[$key]['discharge_date']))] += 1;
								} else {
									$filterIpdDateArray[] = date("F-Y" ,strtotime($patientDischargeDetails[$key]['discharge_date']));
									$filterIpdCountArray[date("F-Y" ,strtotime($patientDischargeDetails[$key]['discharge_date']))] += 0;
								}
							} else {
								$maxDate = $expPatientAdmitDate[0]."-".($expPatientAdmitDate[1]+$i)."-".cal_days_in_month(CAL_GREGORIAN, ($expPatientAdmitDate[1]+$i), $expPatientAdmitDate[0]);
								$startDate = $expPatientAdmitDate[0]."-".($expPatientAdmitDate[1]+$i)."-"."01";
									
								$interval = $this->DateFormat->dateDiff($startDate,$maxDate);
								$timeDay 	= $interval->days+1;
								if($timeDay > 0) {
									$filterIpdDateArray[] = date("F-Y", strtotime($maxDate));
									$filterIpdCountArray[date("F-Y", strtotime($maxDate))] += $timeDay;
								} elseif($timeDay == 0) {
									$filterIpdDateArray[] = date("F-Y", strtotime($maxDate));
									$filterIpdCountArray[date("F-Y", strtotime($maxDate))] += 1;
								} else {
									$filterIpdDateArray[] = date("F-Y", strtotime($maxDate));
									$filterIpdCountArray[date("F-Y", strtotime($maxDate))] += 0;
								}
							}
							$i++;
						}
						// if discharge date is not exist then calculate upto date  //
					} else {

						$expPatientAdmitDate = explode("-", $patientAdmitDetailsVal['admit_date']);
						// more than one month gap //
						$diffDate = date("m-Y") - date("m-Y", strtotime($patientAdmitDetailsVal['admit_date']));

						$i=0;
						while($i <= $diffDate) {
							if($i == 0) {
								//$maxDate = $expPatientAdmitDate[0]."-".$expPatientAdmitDate[1]."-".cal_days_in_month(CAL_GREGORIAN, $expPatientAdmitDate[1], $expPatientAdmitDate[0]);
								$maxDate = $this->DateFormat->formatDate2STDForReport(date("Y-m-d"),Configure::read('date_format_yyyy_mm_dd'));
								$interval = $this->DateFormat->dateDiff($patientAdmitDetailsVal['admit_date'],$maxDate);
								$timeDay 	= $interval->days+1;

								if($timeDay > 0) {
									$filterIpdDateArray[] = $patientAdmitDetailsVal['month'];
									$filterIpdCountArray[$patientAdmitDetailsVal['month']] += $timeDay;
								} elseif($timeDay == 0) {
									$filterIpdDateArray[] = $patientAdmitDetailsVal['month'];
									$filterIpdCountArray[$patientAdmitDetailsVal['month']] += 1;
								} else {
									$filterIpdDateArray[] = $patientAdmitDetailsVal['month'];
									$filterIpdCountArray[$patientAdmitDetailsVal['month']] += 0;
								}
							} else if($i == $diffDate) {
								//$maxDate = date("Y")."-".date("m")."-".cal_days_in_month(CAL_GREGORIAN, date("m"), date("Y"));
								$maxDate = $this->DateFormat->formatDate2STDForReport(date("Y-m-d"),Configure::read('date_format_yyyy_mm_dd'));
								$startDate = date("Y")."-".date("m")."-"."01";
								$interval = $this->DateFormat->dateDiff($startDate,$maxDate);
									
								$timeDay 	= $interval->days+1;
								if($timeDay > 0) {
									$filterIpdDateArray[] = date("F-Y");
									$filterIpdCountArray[date("F-Y")] += $timeDay;
								} elseif($timeDay == 0) {
									$filterIpdDateArray[] = date("F-Y");
									$filterIpdCountArray[date("F-Y")] += 1;
								} else {
									$filterIpdDateArray[] = date("F-Y");
									$filterIpdCountArray[date("F-Y")] += 0;
								}
							} else {
								$maxDate = $expPatientAdmitDate[0]."-".($expPatientAdmitDate[1]+$i)."-".cal_days_in_month(CAL_GREGORIAN, ($expPatientAdmitDate[1]+$i), $expPatientAdmitDate[0]);
								$startDate = $expPatientAdmitDate[0]."-".($expPatientAdmitDate[1]+$i)."-"."01";
									
								$interval = $this->DateFormat->dateDiff($startDate,$maxDate);
								$timeDay 	= $interval->days+1;
								if($timeDay > 0) {
									$filterIpdDateArray[] = date("F-Y", strtotime($maxDate));
									$filterIpdCountArray[date("F-Y", strtotime($maxDate))] += $timeDay;
								} elseif($timeDay == 0) {
									$filterIpdDateArray[] = date("F-Y", strtotime($maxDate));
									$filterIpdCountArray[date("F-Y", strtotime($maxDate))] += 1;
								} else {
									$filterIpdDateArray[] = date("F-Y", strtotime($maxDate));
									$filterIpdCountArray[date("F-Y", strtotime($maxDate))] += 0;
								}
							}
							$i++;
						}

					}

				}
				// close lastval if conditions  //
			} else {
				// if admit and dischare are on same month otherwise go to else //
				if($patientAdmitDetailsVal['month'] == $patientDischargeDetails[$key]['month']) {
					$interval = $this->DateFormat->dateDiff($patientAdmitDetailsVal['admit_date'], $patientDischargeDetails[$key]['discharge_date']);
					$timeDay 	= $interval->days+1;
					if($timeDay > 0) {
						$filterIpdCountArray[$patientAdmitDetailsVal['month']] = $timeDay;
					} elseif($timeDay == 0) {
						$filterIpdCountArray[$patientAdmitDetailsVal['month']] = 1;
					} else {
						$filterIpdCountArray[$patientAdmitDetailsVal['month']] = 0;
					}
				} else {
					if(in_array($key, $dischargePatientIdArray)) {
						$expPatientAdmitDate = explode("-", $patientAdmitDetailsVal['admit_date']);
						$expPatientDischargeDate = explode("-", $patientDischargeDetails[$key]['discharge_date']);
						// more than one month gap //
						$diffDate = date("m-Y" , strtotime($patientDischargeDetails[$key]['discharge_date'])) - date("m-Y", strtotime($patientAdmitDetailsVal['admit_date']));

						$i=0;
						while($i <= $diffDate) {
							if($i == 0) {
								$maxDate = $expPatientAdmitDate[0]."-".$expPatientAdmitDate[1]."-".cal_days_in_month(CAL_GREGORIAN, $expPatientAdmitDate[1], $expPatientAdmitDate[0]);
								$interval = $this->DateFormat->dateDiff($patientAdmitDetailsVal['admit_date'],$maxDate);
								$timeDay 	= $interval->days+1;
								if($timeDay > 0) {
									$filterIpdDateArray[] = $patientAdmitDetailsVal['month'];
									$filterIpdCountArray[$patientAdmitDetailsVal['month']] += $timeDay;
								} elseif($timeDay == 0) {
									$filterIpdDateArray[] = $patientAdmitDetailsVal['month'];
									$filterIpdCountArray[$patientAdmitDetailsVal['month']] += 1;
								} else {
									$filterIpdDateArray[] = $patientAdmitDetailsVal['month'];
									$filterIpdCountArray[$patientAdmitDetailsVal['month']] += 0;
								}
							} else if($i == $diffDate) {
								$maxDate = $patientDischargeDetails[$key]['discharge_date'];
								$startDate = $expPatientDischargeDate[0]."-".$expPatientDischargeDate[1]."-"."01";
								$interval = $this->DateFormat->dateDiff($startDate,$maxDate);
									
								$timeDay 	= $interval->days+1;
								if($timeDay > 0) {
									$filterIpdDateArray[] = date("F-Y" ,strtotime($patientDischargeDetails[$key]['discharge_date']));
									$filterIpdCountArray[date("F-Y" ,strtotime($patientDischargeDetails[$key]['discharge_date']))] += $timeDay;
								} elseif($timeDay == 0) {
									$filterIpdDateArray[] = date("F-Y" ,strtotime($patientDischargeDetails[$key]['discharge_date']));
									$filterIpdCountArray[date("F-Y" ,strtotime($patientDischargeDetails[$key]['discharge_date']))] += 1;
								} else {
									$filterIpdDateArray[] = date("F-Y" ,strtotime($patientDischargeDetails[$key]['discharge_date']));
									$filterIpdCountArray[date("F-Y" ,strtotime($patientDischargeDetails[$key]['discharge_date']))] += 0;
								}
							} else {
								$maxDate = $expPatientAdmitDate[0]."-".($expPatientAdmitDate[1]+$i)."-".cal_days_in_month(CAL_GREGORIAN, ($expPatientAdmitDate[1]+$i), $expPatientAdmitDate[0]);
								$startDate = $expPatientAdmitDate[0]."-".($expPatientAdmitDate[1]+$i)."-"."01";
									
								$interval = $this->DateFormat->dateDiff($startDate,$maxDate);
								$timeDay 	= $interval->days+1;
								if($timeDay > 0) {
									$filterIpdDateArray[] = date("F-Y", strtotime($maxDate));
									$filterIpdCountArray[date("F-Y", strtotime($maxDate))] += $timeDay;
								} elseif($timeDay == 0) {
									$filterIpdDateArray[] = date("F-Y", strtotime($maxDate));
									$filterIpdCountArray[date("F-Y", strtotime($maxDate))] += 1;
								} else {
									$filterIpdDateArray[] = date("F-Y", strtotime($maxDate));
									$filterIpdCountArray[date("F-Y", strtotime($maxDate))] += 0;
								}
							}
							$i++;
						}
					} else {
						$expPatientAdmitDate = explode("-", $patientAdmitDetailsVal['admit_date']);
						// more than one month gap //
						$diffDate = date("m-Y") - date("m-Y", strtotime($patientAdmitDetailsVal['admit_date']));

						$i=0;
						while($i <= $diffDate) {
							if($i == 0) {
								//$maxDate = $expPatientAdmitDate[0]."-".$expPatientAdmitDate[1]."-".cal_days_in_month(CAL_GREGORIAN, $expPatientAdmitDate[1], $expPatientAdmitDate[0]);
								$maxDate = $this->DateFormat->formatDate2STDForReport(date("Y-m-d"),Configure::read('date_format_yyyy_mm_dd'));
								$interval = $this->DateFormat->dateDiff($patientAdmitDetailsVal['admit_date'],$maxDate);
								$timeDay 	= $interval->days+1;
								if($timeDay > 0) {
									$filterIpdDateArray[] = $patientAdmitDetailsVal['month'];
									$filterIpdCountArray[$patientAdmitDetailsVal['month']] += $timeDay;
								} elseif($timeDay == 0) {
									$filterIpdDateArray[] = $patientAdmitDetailsVal['month'];
									$filterIpdCountArray[$patientAdmitDetailsVal['month']] += 1;
								} else {
									$filterIpdDateArray[] = $patientAdmitDetailsVal['month'];
									$filterIpdCountArray[$patientAdmitDetailsVal['month']] += 0;
								}
							} else if($i == $diffDate) {
								//$maxDate = date("Y")."-".date("m")."-".cal_days_in_month(CAL_GREGORIAN, date("m"), date("Y"));
								$maxDate = $this->DateFormat->formatDate2STDForReport(date("Y-m-d"),Configure::read('date_format_yyyy_mm_dd'));
								$startDate = date("Y")."-".date("m")."-"."01";
								$interval = $this->DateFormat->dateDiff($startDate,$maxDate);
									
								$timeDay 	= $interval->days+1;
								if($timeDay > 0) {
									$filterIpdDateArray[] = date("F-Y");
									$filterIpdCountArray[date("F-Y")] += $timeDay;
								} elseif($timeDay == 0) {
									$filterIpdDateArray[] = date("F-Y");
									$filterIpdCountArray[date("F-Y")] += 1;
								} else {
									$filterIpdDateArray[] = date("F-Y");
									$filterIpdCountArray[date("F-Y")] += 0;
								}
							} else {
								$maxDate = $expPatientAdmitDate[0]."-".($expPatientAdmitDate[1]+$i)."-".cal_days_in_month(CAL_GREGORIAN, ($expPatientAdmitDate[1]+$i), $expPatientAdmitDate[0]);
								$startDate = $expPatientAdmitDate[0]."-".($expPatientAdmitDate[1]+$i)."-"."01";
									
								$interval = $this->DateFormat->dateDiff($startDate,$maxDate);
								$timeDay 	= $interval->days+1;
								if($timeDay > 0) {
									$filterIpdDateArray[] = date("F-Y", strtotime($maxDate));
									$filterIpdCountArray[date("F-Y", strtotime($maxDate))] += $timeDay;
								} elseif($timeDay == 0) {
									$filterIpdDateArray[] = date("F-Y", strtotime($maxDate));
									$filterIpdCountArray[date("F-Y", strtotime($maxDate))] += 1;
								} else {
									$filterIpdDateArray[] = date("F-Y", strtotime($maxDate));
									$filterIpdCountArray[date("F-Y", strtotime($maxDate))] += 0;
								}
							}
							$i++;
						}
					}

				}
			}

			//print_r($filterIpdDateArray);exit;
			$lastval = $patientAdmitDetailsVal['month'];
		}
			
		$this->set('filterIpdDateArray', isset($filterIpdDateArray)?$filterIpdDateArray:"");
		$this->set('filterIpdCountArray', isset($filterIpdCountArray)?$filterIpdCountArray:0);

		$dischargeDeathCount = $this->FinalBilling->find('all', array('fields' => array('COUNT(*) AS dischargedeathcount', 'DATE_FORMAT(discharge_date, "%M-%Y") AS month_reports', 'DATE_FORMAT(discharge_date, "%Y-%m-%d") AS discharge_date', 'FinalBilling.location_id', 'FinalBilling.id'), 'group' => array("month_reports  HAVING  discharge_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('FinalBilling.location_id' => $this->Session->read('locationid'), 'FinalBilling.reason_of_discharge' =>  array('Recovered', 'DAMA','Death'))));

		foreach($dischargeDeathCount as $dischargeDeathCountVal) {
			$filterdischargeDeathDateArray[] = $dischargeDeathCountVal[0]['month_reports'];
			$filterdischargeDeathCountArray[$dischargeDeathCountVal[0]['month_reports']] = $dischargeDeathCountVal[0]['dischargedeathcount'];
		}
		$this->set('filterdischargeDeathDateArray', isset($filterdischargeDeathDateArray)?$filterdischargeDeathDateArray:"");
		$this->set('filterdischargeDeathCountArray', isset($filterdischargeDeathCountArray)?$filterdischargeDeathCountArray:0);
	}

	/**
	 * length of stay reports chart
	 *
	 */


	public function admin_length_of_stay_chart() {
		$this->set('title_for_layout', __('Average length of stay Chart', true));
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->losreports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
		}
		$this->set('yaxisArray', $yaxisArray);
		$this->set('reportYear', $reportYear);
	}


	/**
	 * length of stay xls reports
	 *
	 */

	public function admin_length_of_stay_xls() {
		if ($this->request->is('post')) {
			$this->layout = 'advance' ;
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->losreports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		} else {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31"; // set last date of current year
			$this->losreports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);

		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
		$this->layout = false;
	}

	/**
	 * Ward Occupancy Rate Report
	 */

	public function ward_occupancy_rate(){
		$this->uses = array('Bed','Patient');
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {#echo $this->request->data['reportYear'];exit;
			$reportYear = $this->request->data['reportYear'];
			$reportMonth = $this->request->data['reportMonth'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			
			$this->Bed->bindModel(array(
					'belongsTo'=>array(
							'Room'=>array('foreignKey'=>false,'conditions'=>array('Room.id=Bed.room_id')),
							'Ward'=>array('foreignKey'=>false,'conditions'=>array('Room.ward_id=Ward.id')),
					)),false);
			if(!empty($reportMonth)) {
				$startDate=1;
				$countDays = cal_days_in_month(CAL_GREGORIAN, $reportMonth, $reportYear);
				while($startDate <= $countDays) {
					$dateVal = $reportYear."-".$reportMonth."-".$startDate;
					$yaxisIndex = date("d-M", strtotime($dateVal));
					$yaxisArray[$yaxisIndex] = date("d-F-Y", strtotime($dateVal));
					$startDate++;
				}
				$this->monthlyWardOccupancy($yaxisArray,$reportYear);
				$this->set('yaxisArray', $yaxisArray);
				$this->set('reportMonth', $reportMonth);
			} else {
				// date for last day midnight time //
				if($reportYear == date("Y")) {
					$lastMidFromoDate = $reportYear."-01-01 00:00:00";
					$lastMidToDate = date("Y-m-d H:i:s", mktime(23, 59, 59, date("m"), date("d")-1, date("Y")));
				} else {
					$lastMidFromoDate = $reportYear."-01-01 00:00:00";
					$lastMidToDate = $reportYear."-12-31 23:59:59";
				}
				$wardOccupancyCount = $this->Bed->find('all', array('conditions' => array('Ward.is_deleted'=>'0','Bed.modify_time BETWEEN ? AND ?' => array($lastMidFromoDate,$lastMidToDate), 'patient_id' =>0, 'Bed.location_id' => $this->Session->read('locationid')), 'fields' => array('COUNT(*) AS bedcount', 'DATE_FORMAT(Bed.modify_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(Bed.modify_time, "%Y-%m-%d %H:%i:%s") AS bed_date', 'Bed.location_id', 'Bed.id','Bed.patient_id'), 'group' => array("month_reports")));
				// this will gives number of inpatient days //
				$this->losreports($fromDate,$toDate);
					
				foreach($wardOccupancyCount as $wardOccupancy) {
					$filterWardArray[] = $wardOccupancy[0]['month_reports'];
					$filterWardCountArray[$wardOccupancy[0]['month_reports']] = $wardOccupancy[0]['bedcount'];
				}#pr($filterWardCountArray);exit;
				$this->set('filterWardArray', isset($filterWardArray)?$filterWardArray:"");
				$this->set('filterWardCountArray', isset($filterWardCountArray)?$filterWardCountArray:0);
					
				while($toDate > $fromDate) {
					$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
					$expfromdate = explode("-", $fromDate);
					$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
				}
		 }
		 $this->set('yaxisArray',$yaxisArray);
		 // by default page //
		}else{

			$fromDate = date("Y")."-01-01";
			$toDate = date("Y")."-12-31";
			$lastMidFromoDate = date("Y")."-01-01 00:00:00";
			$lastMidToDate = date("Y-m-d H:i:s", mktime(23, 59, 59, date("m"), date("d")-1, date("Y")));

			// total bed days //

			$wardOccupancyCount = $this->Bed->find('all', array('conditions' => array('Bed.modify_time BETWEEN ? AND ?' => 
					array($lastMidFromoDate,$lastMidToDate), 'patient_id' =>0,
					 'Bed.location_id' => $this->Session->read('locationid')),
					 'fields' => array('COUNT(*) AS bedcount', 'DATE_FORMAT(Bed.modify_time, "%M-%Y") AS month_reports', 
					 		'DATE_FORMAT(Bed.modify_time, "%Y-%m-%d %H:%i:%s") AS bed_date', 'Bed.location_id', 
					 		'Bed.id','Bed.patient_id'), 'group' => array("month_reports")));
			// this will gives number of inpatient days //
			$this->losreports($fromDate,$toDate);
			
			foreach($wardOccupancyCount as $wardOccupancy) {
				$filterWardArray[] = $wardOccupancy[0]['month_reports'];
				$filterWardCountArray[$wardOccupancy[0]['month_reports']] = $wardOccupancy[0]['bedcount'];
			}
			$this->set('filterWardArray', isset($filterWardArray)?$filterWardArray:"");
			$this->set('filterWardCountArray', isset($filterWardCountArray)?$filterWardCountArray:0);

			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray',$yaxisArray);
		}

		$this->Bed->bindModel(array(
				'belongsTo'=>array(
						'Room'=>array('foreignKey'=>false,'conditions'=>array('Room.id=Bed.room_id')),
						'Ward'=>array('foreignKey'=>false,'conditions'=>array('Room.ward_id=Ward.id')),
				)),false);
		$totalBed = $this->Bed->find('count',array('conditions'=>array('Bed.location_id'=>$this->Session->read('locationid'),
				'Ward.is_deleted'=>'0')));
		$this->set('totalBed', $totalBed);
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
	}

	/**
	 *
	 *
	 * monthly Ward Occupancy query
	 *
	 *
	 **/
	private function monthlyWardOccupancy($yaxisArray, $reportYear) {
		$this->loadModel('WardPatient');
		$this->layout = 'advance' ;
		//$assignIndex = array_keys($yaxisArray);
		//$fromDate = date("Y-m-d", strtotime($yaxisArray[$assignIndex[0]]."-".$reportYear)); echo $fromDate;exit;
		//$toDate = date("Y-m-d", strtotime($yaxisArray[$assignIndex[count($yaxisArray)-1]]."-".$reportYear));
		$fromDate = $reportYear."-01-01"; // set first date of current year
		$toDate = $reportYear."-12-31"; // set last date of current year
		
		$admitDatePerPatient = $this->WardPatient->find('all', array('fields' => array('DATE_FORMAT(in_date, "%M-%Y") AS month_reports',
				 'DATE_FORMAT(in_date, "%Y-%m-%d") AS admit_date','WardPatient.location_id','WardPatient.patient_id'), 
				'conditions' => array('WardPatient.location_id' => $this->Session->read('locationid'),
						'WardPatient.is_deleted' => 0), 
				'group' => array("patient_id  HAVING  admit_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'order' => 'in_date'));
		
		$dischargeDatePerPatient = $this->WardPatient->find('all', array('fields' => array('DATE_FORMAT(out_date, "%M-%Y") AS month_reports',
				 'DATE_FORMAT(out_date, "%Y-%m-%d") AS discharge_date',  'WardPatient.location_id','WardPatient.patient_id'),
				 'conditions' => array('WardPatient.location_id' => $this->Session->read('locationid'), 
				 		'is_discharge'=> 1,'WardPatient.is_deleted' => 0),
				 'group' => array("patient_id  HAVING  discharge_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'order' => 'out_date'));
		
		foreach($admitDatePerPatient as $admitDatePerPatientVal) {
			$patientAdmitDetails[$admitDatePerPatientVal['WardPatient']['patient_id']]['month'] = $admitDatePerPatientVal[0]['month_reports'];
			$patientAdmitDetails[$admitDatePerPatientVal['WardPatient']['patient_id']]['admit_date'] = $admitDatePerPatientVal[0]['admit_date'];
		}

		foreach($dischargeDatePerPatient as $dischargeDatePerPatientVal) {
			$patientDischargeDetails[$dischargeDatePerPatientVal['WardPatient']['patient_id']]['month'] = $dischargeDatePerPatientVal[0]['month_reports'];
			$patientDischargeDetails[$dischargeDatePerPatientVal['WardPatient']['patient_id']]['discharge_date'] = $dischargeDatePerPatientVal[0]['discharge_date'];
			$dischargePatientIdArray[] = $dischargeDatePerPatientVal['WardPatient']['patient_id'];
		}
		$lastval = "";
		foreach($patientAdmitDetails as $key => $patientAdmitDetailsVal ) {
			// store last month value  //
			$cnt++;

			if($lastval == $patientAdmitDetailsVal['month']) {
				// if admit and dischare are on same month otherwise go to else //
				if($patientAdmitDetailsVal['month'] == $patientDischargeDetails[$key]['month']) {
					$interval = $this->DateFormat->dateDiff($patientAdmitDetailsVal['admit_date'], $patientDischargeDetails[$key]['discharge_date']);
					$timeDay 	= $interval->days;
					$j=0;
					// create days and store the value in it
					while($j <= $timeDay) {
						$filterIpdDateArray[] = date('d-M', strtotime(date("Y-m-d", strtotime($patientAdmitDetailsVal['admit_date'])) . " +$j day"));
						$filterIpdCountArray[date('d-M', strtotime(date("Y-m-d", strtotime($patientAdmitDetailsVal['admit_date'])) . " +$j day"))] += 1;
						$j++;
					}
				} else {
					if(in_array($key, $dischargePatientIdArray)) {
						$expPatientAdmitDate = explode("-", $patientAdmitDetailsVal['admit_date']);
						$expPatientDischargeDate = explode("-", $patientDischargeDetails[$key]['discharge_date']);
						// more than one month gap //
						$diffDate = date("m-Y" , strtotime($patientDischargeDetails[$key]['discharge_date'])) - date("m-Y", strtotime($patientAdmitDetailsVal['admit_date']));

						$i=0;
						while($i <= $diffDate) {
							if($i == 0) {
								$maxDate = $expPatientAdmitDate[0]."-".$expPatientAdmitDate[1]."-".cal_days_in_month(CAL_GREGORIAN, $expPatientAdmitDate[1], $expPatientAdmitDate[0]);
								$interval = $this->DateFormat->dateDiff($patientAdmitDetailsVal['admit_date'],$maxDate);
								$timeDay 	= $interval->days;
								$j=0;
								// create days and store the value in it
								while($j <= $timeDay) {
									$filterIpdDateArray[] = date('d-M', strtotime(date("Y-m-d", strtotime($patientAdmitDetailsVal['admit_date'])) . " +$j day"));
									$filterIpdCountArray[date('d-M', strtotime(date("Y-m-d", strtotime($patientAdmitDetailsVal['admit_date'])) . " +$j day"))] += 1;
									$j++;
								}

							} else if($i == $diffDate) {
								$maxDate = $patientDischargeDetails[$key]['discharge_date'];
								$startDate = $expPatientDischargeDate[0]."-".$expPatientDischargeDate[1]."-"."01";
								$interval = $this->DateFormat->dateDiff($startDate,$maxDate);
								$timeDay 	= $interval->days;
								// create days and store the value in it
								$j=0;
								while($j <= $timeDay) {
									//$filterIpdDateArray[] = date('d-M', strtotime(date("Y-m-d", strtotime($startDate)) . " +$j day"));
									$filterIpdCountArray[date('d-M', strtotime(date("Y-m-d", strtotime($startDate)) . " +$j day"))] += 1;
									$j++;
								}

							} else {
								$maxDate = $expPatientAdmitDate[0]."-".($expPatientAdmitDate[1]+$i)."-".cal_days_in_month(CAL_GREGORIAN, ($expPatientAdmitDate[1]+$i), $expPatientAdmitDate[0]);
								$startDate = $expPatientAdmitDate[0]."-".($expPatientAdmitDate[1]+$i)."-"."01";
								$interval = $this->DateFormat->dateDiff($startDate,$maxDate);
								$timeDay 	= $interval->days;
								// create days and store the value in it
								$j=0;
								while($j <= $timeDay) {
									$filterIpdDateArray[] = date('d-M', strtotime(date("Y-m-d", strtotime($maxDate)) . " +$j day"));
									$filterIpdCountArray[date('d-M', strtotime(date("Y-m-d", strtotime($maxDate)) . " +$j day"))] += 1;
									$j++;
								}

							}
							$i++;
						}

					} else {

						$expPatientAdmitDate = explode("-", $patientAdmitDetailsVal['admit_date']);
						// more than one month gap //
						$diffDate = date("m-Y") - date("m-Y", strtotime($patientAdmitDetailsVal['admit_date']));

						$i=0;
						while($i <= $diffDate) {
							if($i == 0) {
								//$maxDate = $expPatientAdmitDate[0]."-".$expPatientAdmitDate[1]."-".cal_days_in_month(CAL_GREGORIAN, $expPatientAdmitDate[1], $expPatientAdmitDate[0]);
								$maxDate = $this->DateFormat->formatDate2STDForReport(date("Y-m-d"),Configure::read('date_format_yyyy_mm_dd'));
								$interval = $this->DateFormat->dateDiff($patientAdmitDetailsVal['admit_date'],$maxDate);
								$timeDay 	= $interval->days;
								// create days and store the value in it
								$j=0;
								while($j <= $timeDay) {
									$filterIpdDateArray[] = date('d-M', strtotime(date("Y-m-d", strtotime($patientAdmitDetailsVal['admit_date'])) . " +$j day"));
									$filterIpdCountArray[date('d-M', strtotime(date("Y-m-d", strtotime($patientAdmitDetailsVal['admit_date'])) . " +$j day"))] += 1;
									$j++;
								}

							} else if($i == $diffDate) {
								//$maxDate = date("Y")."-".date("m")."-".cal_days_in_month(CAL_GREGORIAN, date("m"), date("Y"));
								$maxDate = $this->DateFormat->formatDate2STDForReport(date("Y-m-d"),Configure::read('date_format_yyyy_mm_dd'));
								$startDate = date("Y")."-".date("m")."-"."01";
								$interval = $this->DateFormat->dateDiff($startDate,$maxDate);
								$timeDay 	= $interval->days;
								// create days and store the value in it
								$j=0;
								while($j <= $timeDay) {
									$filterIpdDateArray[] = date('d-M', strtotime(date("Y-m-d", strtotime($startDate)) . " +$j day"));
									$filterIpdCountArray[date('d-M', strtotime(date("Y-m-d", strtotime($startDate)) . " +$j day"))] += 1;
									$j++;
								}
							} else {
								$maxDate = $expPatientAdmitDate[0]."-".($expPatientAdmitDate[1]+$i)."-".cal_days_in_month(CAL_GREGORIAN, ($expPatientAdmitDate[1]+$i), $expPatientAdmitDate[0]);
								$startDate = $expPatientAdmitDate[0]."-".($expPatientAdmitDate[1]+$i)."-"."01";
									
								$interval = $this->DateFormat->dateDiff($startDate,$maxDate);
								$timeDay 	= $interval->days;
								// create days and store the value in it
								$j=0;
								while($j <= $timeDay) {
									$filterIpdDateArray[] = date('d-M', strtotime(date("Y-m-d", strtotime($startDate)) . " +$j day"));
									$filterIpdCountArray[date('d-M', strtotime(date("Y-m-d", strtotime($startDate)) . " +$j day"))] += 1;
									$j++;
								}

							}
							$i++;
						}

					}

				}
				// close if admit //
			} else {
				// if admit and dischare are on same month otherwise go to else //
				if($patientAdmitDetailsVal['month'] == $patientDischargeDetails[$key]['month']) {
					$interval = $this->DateFormat->dateDiff($patientAdmitDetailsVal['admit_date'], $patientDischargeDetails[$key]['discharge_date']);
					$timeDay 	= $interval->days;
					// create days and store the value in it
					$j=0;
					while($j <= $timeDay) {
						$filterIpdDateArray[date('d-M', strtotime(date("Y-m-d", strtotime($patientAdmitDetailsVal['admit_date'])) . " +$j day"))][] = date('d-M', strtotime(date("Y-m-d", strtotime($patientAdmitDetailsVal['admit_date'])) . " +$j day"));
						$filterIpdCountArray[date('d-M', strtotime(date("Y-m-d", strtotime($patientAdmitDetailsVal['admit_date'])) . " +$j day"))] += 1;
						$j++;
					}
				} else {
					if(in_array($key, $dischargePatientIdArray)) {
						$expPatientAdmitDate = explode("-", $patientAdmitDetailsVal['admit_date']);
						$expPatientDischargeDate = explode("-", $patientDischargeDetails[$key]['discharge_date']);
						// more than one month gap //
						$diffDate = date("m-Y" , strtotime($patientDischargeDetails[$key]['discharge_date'])) - date("m-Y", strtotime($patientAdmitDetailsVal['admit_date']));

						$i=0;
						while($i <= $diffDate) {
							if($i == 0) {
								$maxDate = $expPatientAdmitDate[0]."-".$expPatientAdmitDate[1]."-".cal_days_in_month(CAL_GREGORIAN, $expPatientAdmitDate[1], $expPatientAdmitDate[0]);
								$interval = $this->DateFormat->dateDiff($patientAdmitDetailsVal['admit_date'],$maxDate);
								$timeDay 	= $interval->days;
								// create days and store the value in it
								$j=0;
								while($j <= $timeDay) {
									$filterIpdDateArray[] = date('d-M', strtotime(date("Y-m-d", strtotime($patientAdmitDetailsVal['admit_date'])) . " +$j day"));
									$filterIpdCountArray[date('d-M', strtotime(date("Y-m-d", strtotime($patientAdmitDetailsVal['admit_date'])) . " +$j day"))] += 1;
									$j++;
								}
							} else if($i == $diffDate) {
								$maxDate = $patientDischargeDetails[$key]['discharge_date'];
								$startDate = $expPatientDischargeDate[0]."-".$expPatientDischargeDate[1]."-"."01";
								$interval = $this->DateFormat->dateDiff($startDate,$maxDate);
								$timeDay 	= $interval->days;
								// create days and store the value in it
									
								$j=0;
								while($j <= $timeDay) {
									$filterIpdDateArray[] = date('d-M', strtotime(date("Y-m-d", strtotime($startDate)) . " +$j day"));
									$filterIpdCountArray[date('d-M', strtotime(date("Y-m-d", strtotime($startDate)) . " +$j day"))] += 1;
									$j++;
								}

							} else {
								$maxDate = $expPatientAdmitDate[0]."-".($expPatientAdmitDate[1]+$i)."-".cal_days_in_month(CAL_GREGORIAN, ($expPatientAdmitDate[1]+$i), $expPatientAdmitDate[0]);
								$startDate = $expPatientAdmitDate[0]."-".($expPatientAdmitDate[1]+$i)."-"."01";
								$interval = $this->DateFormat->dateDiff($startDate,$maxDate);
								$timeDay 	= $interval->days;
								// create days and store the value in it
								$j=0;
								while($j <= $timeDay) {
									$filterIpdDateArray[] = date('d-M', strtotime(date("Y-m-d", strtotime($startDate)) . " +$j day"));
									$filterIpdCountArray[date('d-M', strtotime(date("Y-m-d", strtotime($startDate)) . " +$j day"))] += 1;
									$j++;
								}

							}
							$i++;
						}
					} else {
						$expPatientAdmitDate = explode("-", $patientAdmitDetailsVal['admit_date']);
						// more than one month gap //
						$diffDate = date("m-Y") - date("m-Y", strtotime($patientAdmitDetailsVal['admit_date']));
						debug(date("m-Y"));debug($patientAdmitDetailsVal['admit_date']);
						$i=0;
						while($i <= $diffDate) {
							if($i == 0) {
								//$maxDate = $expPatientAdmitDate[0]."-".$expPatientAdmitDate[1]."-".cal_days_in_month(CAL_GREGORIAN, $expPatientAdmitDate[1], $expPatientAdmitDate[0]);
								$maxDate = $this->DateFormat->formatDate2STDForReport(date("Y-m-d"),Configure::read('date_format_yyyy_mm_dd'));
								$interval = $this->DateFormat->dateDiff($patientAdmitDetailsVal['admit_date'],$maxDate);
								$timeDay 	= $interval->days;
								// create days and store the value in it
								$j=0;
								while($j <= $timeDay) {
									$filterIpdDateArray[] = date('d-M', strtotime(date("Y-m-d", strtotime($patientAdmitDetailsVal['admit_date'])) . " +$j day"));
									$filterIpdCountArray[date('d-M', strtotime(date("Y-m-d", strtotime($patientAdmitDetailsVal['admit_date'])) . " +$j day"))] += 1;
									$j++;
								}

							} else if($i == $diffDate) {
								//$maxDate = date("Y")."-".date("m")."-".cal_days_in_month(CAL_GREGORIAN, date("m"), date("Y"));
								$maxDate = $this->DateFormat->formatDate2STDForReport(date("Y-m-d"),Configure::read('date_format_yyyy_mm_dd'));
								$startDate = date("Y")."-".date("m")."-"."01";
								$interval = $this->DateFormat->dateDiff($startDate,$maxDate);
								$timeDay 	= $interval->days;
								// create days and store the value in it
								$j=0;
								while($j <= $timeDay) {
									$filterIpdDateArray[] = date('d-M', strtotime(date("Y-m-d", strtotime($startDate)) . " +$j day"));
									$filterIpdCountArray[date('d-M', strtotime(date("Y-m-d", strtotime($startDate)) . " +$j day"))] += 1;
									$j++;
								}
							} else {
								$maxDate = $expPatientAdmitDate[0]."-".($expPatientAdmitDate[1]+$i)."-".cal_days_in_month(CAL_GREGORIAN, ($expPatientAdmitDate[1]+$i), $expPatientAdmitDate[0]);
								$startDate = $expPatientAdmitDate[0]."-".($expPatientAdmitDate[1]+$i)."-"."01";
								$interval = $this->DateFormat->dateDiff($startDate,$maxDate);
								$timeDay 	= $interval->days;
								// create days and store the value in it
								$j=0;
								while($j <= $timeDay) {
									$filterIpdDateArray[] = date('d-M', strtotime(date("Y-m-d", strtotime($startDate)) . " +$j day"));
									$filterIpdCountArray[date('d-M', strtotime(date("Y-m-d", strtotime($startDate)) . " +$j day"))] += 1;
									$j++;
								}

							}
							$i++;
						}
					}

				}
			}

			//print_r($filterIpdDateArray);exit;
			$lastval = $patientAdmitDetailsVal['month'];
		}
		//debug($filterIpdDateArray);
		$this->set('filterIpdDateArray', isset($filterIpdDateArray)?$filterIpdDateArray:"");
		$this->set('filterIpdCountArray', isset($filterIpdCountArray)?$filterIpdCountArray:0);
			
			
	}
	/**
	 * Ward Occupancy Rate Excel Report
	 */

	public function ward_occupancy_rate_xls(){
		#echo 'here';exit;
		$this->uses = array('Bed','Patient');
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {#echo $this->request->data['reportYear'];exit;
			$reportYear = $this->request->data['reportYear'];
			$reportMonth = $this->request->data['reportMonth'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			
			$this->Bed->bindModel(array(
					'belongsTo'=>array(
							'Room'=>array('foreignKey'=>false,'conditions'=>array('Room.id=Bed.room_id')),
							'Ward'=>array('foreignKey'=>false,'conditions'=>array('Room.ward_id=Ward.id'))
							)),false);
			
			if(!empty($reportMonth)) {
				$startDate=1;
				$countDays = cal_days_in_month(CAL_GREGORIAN, $reportMonth, $reportYear);
				while($startDate <= $countDays) {
					$dateVal = $reportYear."-".$reportMonth."-".$startDate;
					$yaxisIndex = date("d-M", strtotime($dateVal));
					$yaxisArray[$yaxisIndex] = date("d-F-Y", strtotime($dateVal));
					$startDate++;
				}
				$this->monthlyWardOccupancy($yaxisArray,$reportYear);
				$this->set('yaxisArray', $yaxisArray);
				$this->set('reportMonth', $reportMonth);
			} else {
				if($reportYear == date("Y")) {
					$lastMidFromoDate = $reportYear."-01-01 00:00:00";
					$lastMidToDate = date("Y-m-d H:i:s", mktime(23, 59, 59, date("m"), date("d")-1, date("Y")));
				} else {
					$lastMidFromoDate = $reportYear."-01-01 00:00:00";
					$lastMidToDate = $reportYear."-12-31 23:59:59";
				}
				
				$wardOccupancyCount = $this->Bed->find('all', array('conditions' => array('Ward.is_deleted'=>'0','modify_time BETWEEN ? AND ?' => array($lastMidFromoDate,$lastMidToDate), 'patient_id' =>0, 'Bed.location_id' => $this->Session->read('locationid')), 'fields' => array('COUNT(*) AS bedcount', 'DATE_FORMAT(modify_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(modify_time, "%Y-%m-%d %H:%i:%s") AS bed_date', 'Bed.location_id', 'Bed.id','Bed.patient_id'), 'group' => array("month_reports")));
				$this->losreports($fromDate,$toDate);

				foreach($wardOccupancyCount as $wardOccupancy) {
					$filterWardArray[] = $wardOccupancy[0]['month_reports'];
					$filterWardCountArray[$wardOccupancy[0]['month_reports']] = $wardOccupancy[0]['bedcount'];
				}#pr($filterWardCountArray);exit;
				$this->set('filterWardArray', isset($filterWardArray)?$filterWardArray:"");
				$this->set('filterWardCountArray', isset($filterWardCountArray)?$filterWardCountArray:0);
					
				while($toDate > $fromDate) {
					$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
					$expfromdate = explode("-", $fromDate);
					$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
				}
				$this->set('yaxisArray',$yaxisArray);
			}
		}else{

			$fromDate = date("Y")."-01-01";
			$toDate = date("Y")."-12-31";
			$lastMidFromoDate = date("Y")."-01-01 00:00:00";
			$lastMidToDate = date("Y-m-d H:i:s", mktime(23, 59, 59, date("m"), date("d")-1, date("Y")));

			$wardOccupancyCount = $this->Bed->find('all', array('conditions' => array('Ward.is_deleted'=>'0','Bed.modify_time BETWEEN ? AND ?' => array($lastMidFromoDate,$lastMidToDate), 'Bed.patient_id' =>0, 'Bed.location_id' => $this->Session->read('locationid')), 'fields' => array('COUNT(*) AS bedcount', 'DATE_FORMAT(Bed.modify_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(Bed.modify_time, "%Y-%m-%d %H:%i:%s") AS bed_date', 'Bed.location_id', 'Bed.id','Bed.patient_id'), 'group' => array("month_reports")));
			$this->losreports($fromDate,$toDate);

			foreach($wardOccupancyCount as $wardOccupancy) {
				$filterWardArray[] = $wardOccupancy[0]['month_reports'];
				$filterWardCountArray[$wardOccupancy[0]['month_reports']] = $wardOccupancy[0]['bedcount'];
			}#pr($filterWardCountArray);exit;
			$this->set('filterWardArray', isset($filterWardArray)?$filterWardArray:"");
			$this->set('filterWardCountArray', isset($filterWardCountArray)?$filterWardCountArray:0);

			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray',$yaxisArray);
		}
		$totalBed = $this->Bed->find('count',array('conditions'=>array('Ward.is_deleted'=>'0','Bed.location_id'=>$this->Session->read('locationid'))));
		$this->set('totalBed', $totalBed);
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
		//pr($filterWardCountArray);exit;
		$this->layout = false;
	}

	/**
	 * Ward Occupancy Rate Excel Report
	 */

	public function ward_occupancy_rate_chart(){
		$this->uses = array('Bed','Patient');
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {#echo $this->request->data['reportYear'];exit;
			$reportYear = $this->request->data['reportYear'];
			$reportMonth = $this->request->data['reportMonth'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			
			$this->Bed->bindModel(array(
					'belongsTo'=>array(
							'Room'=>array('foreignKey'=>false,'conditions'=>array('Room.id=Bed.room_id')),
							'Ward'=>array('foreignKey'=>false,'conditions'=>array('Room.ward_id=Ward.id'))
					)),false);
			
			if(!empty($reportMonth)) {
				$startDate=1;
				$countDays = cal_days_in_month(CAL_GREGORIAN, $reportMonth, $reportYear);
				while($startDate <= $countDays) {
					$dateVal = $reportYear."-".$reportMonth."-".$startDate;
					$yaxisIndex = date("d-M", strtotime($dateVal));
					$yaxisArray[$yaxisIndex] = date("d-F-Y", strtotime($dateVal));
					$startDate++;
				}
				$this->monthlyWardOccupancy($yaxisArray,$reportYear);
				$this->set('yaxisArray', $yaxisArray);
				$this->set('reportMonth', $reportMonth);
			} else {
				if($reportYear == date("Y")) {
					$lastMidFromoDate = $reportYear."-01-01 00:00:00";
					$lastMidToDate = date("Y-m-d H:i:s", mktime(23, 59, 59, date("m"), date("d")-1, date("Y")));
				} else {
					$lastMidFromoDate = $reportYear."-01-01 00:00:00";
					$lastMidToDate = $reportYear."-12-31 23:59:59";
				}

				$wardOccupancyCount = $this->Bed->find('all', array('conditions' => array('Ward.is_deleted'=>'0','Bed.modify_time BETWEEN ? AND ?' => array($lastMidFromoDate,$lastMidToDate), 'Bed.patient_id' =>0, 'Bed.location_id' => $this->Session->read('locationid')), 'fields' => array('COUNT(*) AS bedcount', 'DATE_FORMAT(Bed.modify_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(Bed.modify_time, "%Y-%m-%d %H:%i:%s") AS bed_date', 'Bed.location_id', 'Bed.id','Bed.patient_id'), 'group' => array("month_reports")));
				$this->losreports($fromDate,$toDate);

				foreach($wardOccupancyCount as $wardOccupancy) {
					$filterWardArray[] = $wardOccupancy[0]['month_reports'];
					$filterWardCountArray[$wardOccupancy[0]['month_reports']] = $wardOccupancy[0]['bedcount'];
				}#pr($filterWardCountArray);exit;
				$this->set('filterWardArray', isset($filterWardArray)?$filterWardArray:"");
				$this->set('filterWardCountArray', isset($filterWardCountArray)?$filterWardCountArray:0);
					
				while($toDate > $fromDate) {
					$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
					$expfromdate = explode("-", $fromDate);
					$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
				}
				$this->set('yaxisArray',$yaxisArray);
			}
			$totalBed = $this->Bed->find('count',array('conditions'=>array('Ward.is_deleted'=>'0','Bed.location_id'=>$this->Session->read('locationid'))));
			$this->set('totalBed', $totalBed);
			$this->set('reportYear', $reportYear);
		}

	}

	/**
	 * staff survey chart
	 *
	 */

	public function admin_staff_survey_chart() {
		$this->set('title_for_layout', __('Staff Survey Reports Chart', true));
		$this->uses = array('StaffSurvey');
		$this->layout = 'advance' ;
		$totalNumber = $this->StaffSurvey->find('count', array('conditions' => array('StaffSurvey.location_id' => $this->Session->read('locationid')), 'group' => array('user_id')));

		$yesResults = $this->StaffSurvey->find('all', array('fields' => array('COUNT(*) AS report_results', 'question_id', 'answer', 'location_id', 'id'), 'conditions' => array('StaffSurvey.location_id' => $this->Session->read('locationid'), 'StaffSurvey.answer' => 'Y'), 'group' => array('question_id', 'answer'), 'order' => array('question_id')));
		foreach($yesResults as $yesResultsVal) {
			$yesQuestionIdArray[] = $yesResultsVal['StaffSurvey']['question_id'];
			$yesResultArray[$yesResultsVal['StaffSurvey']['question_id']] = $yesResultsVal[0]['report_results'];
		}
		$noResults = $this->StaffSurvey->find('all', array('fields' => array('COUNT(*) AS report_results', 'question_id', 'answer', 'location_id', 'id'), 'conditions' => array('StaffSurvey.location_id' => $this->Session->read('locationid'), 'StaffSurvey.answer' => 'N'), 'group' => array('question_id', 'answer'), 'order' => array('question_id')));
		foreach($noResults as $noResultsVal) {
			$noQuestionIdArray[] = $noResultsVal['StaffSurvey']['question_id'];
			$noResultArray[$noResultsVal['StaffSurvey']['question_id']] = $noResultsVal[0]['report_results'];
		}
		//print_r($yesQuestionIdArray);exit;
		$this->set('yesQuestionIdArray', $yesQuestionIdArray);
		$this->set('yesResultArray', $yesResultArray);
		$this->set('noQuestionIdArray', $noQuestionIdArray);
		$this->set('noResultArray', $noResultArray);
		$this->set('totalNumber', $totalNumber);
	}

	/**
	 * patient survey chart
	 *
	 */

	public function admin_patient_survey_chart() {
		$this->set('title_for_layout', __('Patient Survey Reports Chart', true));
		$this->uses = array('PatientSurvey');
		$this->layout = 'advance' ;
		$totalNumber = $this->PatientSurvey->find('count', array('conditions' => array('PatientSurvey.location_id' => $this->Session->read('locationid')), 'group' => array('PatientSurvey.patient_id')));

		$strongAgreeResults = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS report_results', 'question_id', 'answer', 'location_id', 'id'), 'conditions' => array('PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.answer' => 'Strongly Agree'), 'group' => array('question_id', 'answer'), 'order' => array('question_id')));
		foreach($strongAgreeResults as $strongAgreeResultsVal) {
			$strongAgreeQuestionIdArray[] = $strongAgreeResultsVal['PatientSurvey']['question_id'];
			$strongAgreeResultArray[$strongAgreeResultsVal['PatientSurvey']['question_id']] = $strongAgreeResultsVal[0]['report_results'];
			$this->set('strongAgreeQuestionIdArray', $strongAgreeQuestionIdArray);
			$this->set('strongAgreeResultArray', $strongAgreeResultArray);
		}
		$agreeResults = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS report_results', 'question_id', 'answer', 'location_id', 'id'), 'conditions' => array('PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.answer' => 'Agree'), 'group' => array('question_id', 'answer'), 'order' => array('question_id')));
		foreach($agreeResults as $agreeResultsVal) {
			$agreeQuestionIdArray[] = $agreeResultsVal['PatientSurvey']['question_id'];
			$agreeResultArray[$agreeResultsVal['PatientSurvey']['question_id']] = $agreeResultsVal[0]['report_results'];
			$this->set('agreeQuestionIdArray', $agreeQuestionIdArray);
			$this->set('agreeResultArray', $agreeResultArray);
		}
		$nandResults = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS report_results', 'question_id', 'answer', 'location_id', 'id'), 'conditions' => array('PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.answer' => 'Neither Agree Nor  Disagree'), 'group' => array('question_id', 'answer'), 'order' => array('question_id')));
		foreach($nandResults as $nandResultsVal) {
			$nandQuestionIdArray[] = $nandResultsVal['PatientSurvey']['question_id'];
			$nandResultArray[$nandResultsVal['PatientSurvey']['question_id']] = $nandResultsVal[0]['report_results'];
			$this->set('nandQuestionIdArray', $nandQuestionIdArray);
			$this->set('nandResultArray', $nandResultArray);
		}
		$disagreeResults = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS report_results', 'question_id', 'answer', 'location_id', 'id'), 'conditions' => array('PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.answer' => 'Disagree'), 'group' => array('question_id', 'answer'), 'order' => array('question_id')));
		foreach($disagreeResults as $disagreeResultsVal) {
			$disagreeQuestionIdArray[] = $disagreeResultsVal['PatientSurvey']['question_id'];
			$disagreeResultArray[$disagreeResultsVal['PatientSurvey']['question_id']] = $disagreeResultsVal[0]['report_results'];
			$this->set('disagreeQuestionIdArray', $disagreeQuestionIdArray);
			$this->set('disagreeResultArray', $disagreeResultArray);
		}
		$strongDisagreeResults = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS report_results', 'question_id', 'answer', 'location_id', 'id'), 'conditions' => array('PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.answer' => 'Strongly Disagree'), 'group' => array('question_id', 'answer'), 'order' => array('question_id')));
		foreach($strongDisagreeResults as $strongDisagreeResultsVal) {
			$strongDisagreeQuestionIdArray[] = $strongDisagreeResultsVal['PatientSurvey']['question_id'];
			$strongDisagreeResultArray[$strongDisagreeResultsVal['PatientSurvey']['question_id']] = $strongDisagreeResultsVal[0]['report_results'];
			$this->set('strongDisagreeQuestionIdArray', $strongDisagreeQuestionIdArray);
			$this->set('strongDisagreeResultArray', $strongDisagreeResultArray);
		}
		$naResults = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS report_results', 'question_id', 'answer', 'location_id', 'id'), 'conditions' => array('PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.answer' => 'Not Applicable'), 'group' => array('question_id', 'answer'), 'order' => array('question_id')));
		foreach($naResults as $naResultsVal) {
			$naQuestionIdArray[] = $naResultsVal['PatientSurvey']['question_id'];
			$naResultArray[$naResultsVal['PatientSurvey']['question_id']] = $naResultsVal[0]['report_results'];
			$this->set('naQuestionIdArray', $naQuestionIdArray);
			$this->set('naResultArray', $naResultArray);
		}
		$this->set('totalNumber', $totalNumber);
	}

	/**
	 *
	 * surgical site infections reports
	 *
	 **/

	public function admin_surgical_site_infections() {
		$this->set('title_for_layout', __('Surgical Site Infections Report', true));
		$this->uses = array('SurgicalSiteInfection', 'OptAppointment');
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->ssireports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		} else {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31"; // set last date of current year
			$this->ssireports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);

		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));

	}

	/**
	 *
	 * surgical site infection reports query
	 *
	 **/

	private function ssireports($fromDate=NULL, $toDate=NULL) {
		$this->layout = 'advance' ;
		// ssi for surgical site infections count in surgical_site_infections table
		$ssiCount = $this->SurgicalSiteInfection->find('all', array('fields' => array('COUNT(*) AS ssicount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'SurgicalSiteInfection.patient_id', 'SurgicalSiteInfection.location_id', 'SurgicalSiteInfection.id'), 'group' => array("month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('SurgicalSiteInfection.location_id' => $this->Session->read('locationid')), 'recursive' => -1));
		foreach($ssiCount as $ssiCountVal) {
			$filterSsiDateArray[] = $ssiCountVal[0]['month_reports'];
			$filterSsiCountArray[$ssiCountVal[0]['month_reports']] = $ssiCountVal[0]['ssicount'];
		}
		$this->set('filterSsiDateArray', isset($filterSsiDateArray)?$filterSsiDateArray:"");
		$this->set('filterSsiCountArray', isset($filterSsiCountArray)?$filterSsiCountArray:0);
		// sp for surgical procedure completed count in opt_appointments table
		$spCount = $this->OptAppointment->find('all', array('fields' => array('COUNT(*) AS spcount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'OptAppointment.location_id', 'OptAppointment.procedure_complete', 'OptAppointment.id'), 'group' => array("month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('OptAppointment.location_id' => $this->Session->read('locationid'), 'OptAppointment.procedure_complete' =>  1), 'recursive' => -1));

		foreach($spCount as $spCountVal) {
			$filterSpDateArray[] = $spCountVal[0]['month_reports'];
			$filterSpCountArray[$spCountVal[0]['month_reports']] = $spCountVal[0]['spcount'];
		}
		$this->set('filterSpDateArray', isset($filterSpDateArray)?$filterSpDateArray:"");
		$this->set('filterSpCountArray', isset($filterSpCountArray)?$filterSpCountArray:0);
	}

	/**
	 * surgical site infection  chart
	 *
	 */


	public function admin_surgical_site_infections_chart() {
		$this->layout = 'advance' ;
		$this->set('title_for_layout', __('Surgical Site Infections Chart', true));
		$this->uses = array('SurgicalSiteInfection', 'OptAppointment');
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->ssireports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
		}
		$this->set('yaxisArray', $yaxisArray);
		$this->set('reportYear', $reportYear);
	}


	/**
	 * surgical site infections xls reports
	 *
	 */

	public function admin_surgical_site_infections_xls() {
		$this->uses = array('SurgicalSiteInfection', 'OptAppointment');
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->ssireports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		} else {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31"; // set last date of current year
			$this->ssireports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);

		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
		$this->layout = false;
	}



	/**
	 * hospital associated infetctions cent report
	 *
	 */

	public function admin_hai_cent() {
		$this->set('title_for_layout', __('Hospital Associated Infections Cent Report', true));
		$this->uses = array('NosocomialInfection', 'PatientExposure', 'FinalBilling');
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->hai_allreports($fromDate,$toDate);
			$dischargeDeathCount = $this->FinalBilling->find('all', array('fields' => array('COUNT(*) AS dischargedeathcount', 'DATE_FORMAT(discharge_date, "%M-%Y") AS month_reports', 'DATE_FORMAT(discharge_date, "%Y-%m-%d") AS discharge_date', 'FinalBilling.location_id', 'FinalBilling.id'), 'group' => array("month_reports  HAVING  discharge_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('FinalBilling.location_id' => $this->Session->read('locationid'), 'FinalBilling.reason_of_discharge' =>  array('Recovered', 'DAMA','Death'))));

			foreach($dischargeDeathCount as $dischargeDeathCountVal) {
				$filterdischargeDeathDateArray[] = $dischargeDeathCountVal[0]['month_reports'];
				$filterdischargeDeathCountArray[$dischargeDeathCountVal[0]['month_reports']] = $dischargeDeathCountVal[0]['dischargedeathcount'];
			}
			$this->set('filterdischargeDeathDateArray', isset($filterdischargeDeathDateArray)?$filterdischargeDeathDateArray:"");
			$this->set('filterdischargeDeathCountArray', isset($filterdischargeDeathCountArray)?$filterdischargeDeathCountArray:0);

			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		} else {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31"; // set last date of current year
			$this->hai_allreports($fromDate,$toDate);
			$dischargeDeathCount = $this->FinalBilling->find('all', array('fields' => array('COUNT(*) AS dischargedeathcount', 'DATE_FORMAT(discharge_date, "%M-%Y") AS month_reports', 'DATE_FORMAT(discharge_date, "%Y-%m-%d") AS discharge_date', 'FinalBilling.location_id', 'FinalBilling.id'), 'group' => array("month_reports  HAVING  discharge_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('FinalBilling.location_id' => $this->Session->read('locationid'), 'FinalBilling.reason_of_discharge' =>  array('Recovered', 'DAMA','Death'))));

			foreach($dischargeDeathCount as $dischargeDeathCountVal) {
				$filterdischargeDeathDateArray[] = $dischargeDeathCountVal[0]['month_reports'];
				$filterdischargeDeathCountArray[$dischargeDeathCountVal[0]['month_reports']] = $dischargeDeathCountVal[0]['dischargedeathcount'];
			}
			$this->set('filterdischargeDeathDateArray', isset($filterdischargeDeathDateArray)?$filterdischargeDeathDateArray:"");
			$this->set('filterdischargeDeathCountArray', isset($filterdischargeDeathCountArray)?$filterdischargeDeathCountArray:0);

			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);

		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));

	}


	/**
	 * hospital associated cent reports chart
	 *
	 */


	public function admin_hai_cent_chart() {
		$this->set('title_for_layout', __('Hospital Associated Infections Cent Report Chart', true));
		$this->uses = array('NosocomialInfection', 'PatientExposure', 'FinalBilling');
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->hai_allreports($fromDate,$toDate);

			$dischargeDeathCount = $this->FinalBilling->find('all', array('fields' => array('COUNT(*) AS dischargedeathcount', 'DATE_FORMAT(discharge_date, "%M-%Y") AS month_reports', 'DATE_FORMAT(discharge_date, "%Y-%m-%d") AS discharge_date', 'FinalBilling.location_id', 'FinalBilling.id'), 'group' => array("month_reports  HAVING  discharge_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('FinalBilling.location_id' => $this->Session->read('locationid'), 'FinalBilling.reason_of_discharge' =>  array('Recovered', 'DAMA','Death'))));

			foreach($dischargeDeathCount as $dischargeDeathCountVal) {
				$filterdischargeDeathDateArray[] = $dischargeDeathCountVal[0]['month_reports'];
				$filterdischargeDeathCountArray[$dischargeDeathCountVal[0]['month_reports']] = $dischargeDeathCountVal[0]['dischargedeathcount'];
			}
			$this->set('filterdischargeDeathDateArray', isset($filterdischargeDeathDateArray)?$filterdischargeDeathDateArray:"");
			$this->set('filterdischargeDeathCountArray', isset($filterdischargeDeathCountArray)?$filterdischargeDeathCountArray:0);

			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);


		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
	}


	/**
	 * hospital associated cent reports xls reports
	 *
	 */

	public function admin_hai_cent_xls() {
		$this->set('title_for_layout', __('Hospital Associated Infections Cent Report', true));
		$this->uses = array('NosocomialInfection', 'PatientExposure', 'FinalBilling');
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->hai_allreports($fromDate,$toDate);
			$dischargeDeathCount = $this->FinalBilling->find('all', array('fields' => array('COUNT(*) AS dischargedeathcount', 'DATE_FORMAT(discharge_date, "%M-%Y") AS month_reports', 'DATE_FORMAT(discharge_date, "%Y-%m-%d") AS discharge_date', 'FinalBilling.location_id', 'FinalBilling.id'), 'group' => array("month_reports  HAVING  discharge_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('FinalBilling.location_id' => $this->Session->read('locationid'), 'FinalBilling.reason_of_discharge' =>  array('Recovered', 'DAMA','Death'))));

			foreach($dischargeDeathCount as $dischargeDeathCountVal) {
				$filterdischargeDeathDateArray[] = $dischargeDeathCountVal[0]['month_reports'];
				$filterdischargeDeathCountArray[$dischargeDeathCountVal[0]['month_reports']] = $dischargeDeathCountVal[0]['dischargedeathcount'];
			}
			$this->set('filterdischargeDeathDateArray', isset($filterdischargeDeathDateArray)?$filterdischargeDeathDateArray:"");
			$this->set('filterdischargeDeathCountArray', isset($filterdischargeDeathCountArray)?$filterdischargeDeathCountArray:0);

			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);

		}

		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
		$this->layout = false;
	}

	/**
	@Name			: getCorporateLocationList
	@Created for	: To get the coporate location on selecting corporate as type. will call bye ajax.
	@created By		: Anand
	@created On		: 2/23/2012
	**/
	public function getCorporateLocationList() {
		$this->loadModel('CorporateLocation');
		$this->loadModel('InsuranceType');
		if($this->params['isAjax']) {
			$paycatid = $this->params->query['paymentCategoryId'];
			if($paycatid == "2") {
				$this->set('insurancetypelist', $this->InsuranceType->find('list', array('fields'=> array('id', 'name'),'conditions' => array('InsuranceType.is_deleted' => 0, 'InsuranceType.credit_type_id' => $paycatid),'order'=>array('name'))));
				$this->render('ajaxgetinsutypes');
			}else if($paycatid == "1") {
				$this->set('corporatelocationlist', $this->CorporateLocation->find('list', array('fields'=> array('id', 'name'),'conditions' => array('CorporateLocation.is_deleted' => 0, 'CorporateLocation.credit_type_id' => $paycatid,'CorporateLocation.location_id'=>$this->Session->read('locationid')),'order'=>array('CorporateLocation.name'))));
				$this->render('ajaxgetcorplocations');
			} else {
				$this->render('ajaxgetcashtype');
			}

			$this->layout = 'ajax';
		}
	}


	/**
	@Name			: getCropList
	@Created for	: To get the coporate location on selecting corporate as type. will call bye ajax.
	@created By		: Anand
	@created On		: 2/23/2012
	**/
	public function getCropList() {
		$this->loadModel('Corporate');
		if($this->params['isAjax']) {
			$this->set('corporatelist', $this->Corporate->find('list', array('fields'=> array('id', 'name'),'conditions' => array('Corporate.is_deleted' => 0, 'Corporate.corporate_location_id' => $this->params->query['ajaxcorporateid'],'Corporate.location_id'=>$this->Session->read('locationid')),'order'=>array('Corporate.name'))));
			$this->layout = 'ajax';
			$this->render('ajaxgetcorporate');
		}
	}


	/**
	@Name			: getInsComLis
	@Created for	: To get the coporate location on selecting corporate as type. will call bye ajax.
	@created By		: Anand
	@created On		: 2/23/2012
	**/
	public function getInsComList() {
		$this->loadModel('InsuranceCompany');
		if($this->params['isAjax']) {
			$this->set('insurancecompanylist', $this->InsuranceCompany->find('list', array('fields'=> array('id', 'name'),'conditions' => array('InsuranceCompany.is_deleted' => 0, 'InsuranceCompany.insurance_type_id' => $this->params->query['insurancetypeid'],'InsuranceCompany.location_id'=>$this->Session->read('locationid')))));
			$this->layout = 'ajax';
			$this->render('ajaxgetinsucomp');
		}
	}

	/**
	@Name			: getcorpsublocation
	@Created for	: To get the coporate as type. will call bye ajax.
	@created By		: Anand
	@created On		: 2/23/2012
	**/

	public function getcorpsublocation(){
		$this->uses = array('Corporate','CorporateSublocation');
		if($this->params['isAjax']) {

		 $this->set('corporatesulloclist', $this->CorporateSublocation->find('list', array('fields'=> array('id', 'name'),'conditions' => array('CorporateSublocation.is_deleted' => 0, 'CorporateSublocation.corporate_id' => $this->params->query['ajaxcorporateid']),'order'=>array('CorporateSublocation.name'))));

		 $this->layout = 'ajax';
		 $this->render('ajaxgetcorpsublocation');
	 }
	}


	/**
	 *
	 * annually staff survey reports
	 *
	 **/

	public function admin_staffsurvey_reports() {
		$this->set('title_for_layout', __('Staff Survey Reports', true));
		$this->uses = array('StaffSurvey');
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->staffreports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		} else {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31"; // set last date of current year
			$this->staffreports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);

		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));

	}

	/**
	 *
	 * staff survey report query
	 *
	 **/

	private function staffreports($fromDate=NULL, $toDate=NULL) {
		$yesAnsCount = $this->StaffSurvey->find('all', array('fields' => array('COUNT(*) AS yesanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'StaffSurvey.question_id', 'StaffSurvey.location_id', 'StaffSurvey.id'), 'group' => array("question_id, month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('StaffSurvey.answer' => 'Y', 'StaffSurvey.location_id' => $this->Session->read('locationid')), 'recursive' => -1));
		$this->layout = 'advance' ;
		foreach($yesAnsCount as $yesAnsCountVal) {
			$filterYesAnsDateArray[] = $yesAnsCountVal[0]['month_reports'];
			$filterYesAnsQuestIdArray[] = $yesAnsCountVal['StaffSurvey']['question_id'];
			$filterYesAnsCountArray[$yesAnsCountVal['StaffSurvey']['question_id']][$yesAnsCountVal[0]['month_reports']] = $yesAnsCountVal[0]['yesanscount'];
		}
		//pr($filterYesAnsCountArray);
		$this->set('filterYesAnsDateArray', isset($filterYesAnsDateArray)?$filterYesAnsDateArray:"");
		$this->set('filterYesAnsQuestIdArray', isset($filterYesAnsQuestIdArray)?$filterYesAnsQuestIdArray:"");
		$this->set('filterYesAnsCountArray', isset($filterYesAnsCountArray)?$filterYesAnsCountArray:0);

		$noAnsCount = $this->StaffSurvey->find('all', array('fields' => array('COUNT(*) AS noanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'StaffSurvey.question_id', 'StaffSurvey.location_id', 'StaffSurvey.id'), 'group' => array("question_id, month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('StaffSurvey.answer' => 'N', 'StaffSurvey.location_id' => $this->Session->read('locationid')), 'recursive' => -1));

		foreach($noAnsCount as $noAnsCountVal) {
			$filterNoAnsDateArray[] = $noAnsCountVal[0]['month_reports'];
			$filterNoAnsQuestIdArray[] = $noAnsCountVal['StaffSurvey']['question_id'];
			$filterNoAnsCountArray[$noAnsCountVal['StaffSurvey']['question_id']][$noAnsCountVal[0]['month_reports']] = $noAnsCountVal[0]['noanscount'];
		}
		$this->set('filterNoAnsDateArray', isset($filterNoAnsDateArray)?$filterNoAnsDateArray:"");
		$this->set('filterNoAnsQuestIdArray', isset($filterNoAnsQuestIdArray)?$filterNoAnsQuestIdArray:"");
		$this->set('filterNoAnsCountArray', isset($filterNoAnsCountArray)?$filterNoAnsCountArray:0);
	}

	/**
	 * staff survey reports chart
	 *
	 */


	public function admin_staffsurvey_chart() {
		$this->set('title_for_layout', __('Staff Survey Reports Chart', true));
		$this->uses = array('StaffSurvey');
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year

			$yesAnsCount = $this->StaffSurvey->find('all', array('fields' => array('COUNT(*) AS yesanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'StaffSurvey.question_id', 'StaffSurvey.location_id', 'StaffSurvey.id'), 'group' => array("month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('StaffSurvey.answer' => 'Y', 'StaffSurvey.location_id' => $this->Session->read('locationid')), 'recursive' => -1));

			foreach($yesAnsCount as $yesAnsCountVal) {
				$filterYesAnsDateArray[] = $yesAnsCountVal[0]['month_reports'];
				$filterYesAnsCountArray[$yesAnsCountVal[0]['month_reports']] = $yesAnsCountVal[0]['yesanscount'];
			}

			$this->set('filterYesAnsDateArray', isset($filterYesAnsDateArray)?$filterYesAnsDateArray:"");
			$this->set('filterYesAnsCountArray', isset($filterYesAnsCountArray)?$filterYesAnsCountArray:0);

			$noAnsCount = $this->StaffSurvey->find('all', array('fields' => array('COUNT(*) AS noanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'StaffSurvey.question_id', 'StaffSurvey.location_id', 'StaffSurvey.id'), 'group' => array("month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('StaffSurvey.answer' => 'N', 'StaffSurvey.location_id' => $this->Session->read('locationid')), 'recursive' => -1));

			foreach($noAnsCount as $noAnsCountVal) {
				$filterNoAnsDateArray[] = $noAnsCountVal[0]['month_reports'];
				$filterNoAnsCountArray[$noAnsCountVal[0]['month_reports']] = $noAnsCountVal[0]['noanscount'];
			}
			$this->set('filterNoAnsDateArray', isset($filterNoAnsDateArray)?$filterNoAnsDateArray:"");
			$this->set('filterNoAnsCountArray', isset($filterNoAnsCountArray)?$filterNoAnsCountArray:0);


			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
		}
		$this->set('yaxisArray', $yaxisArray);
		$this->set('reportYear', $reportYear);
	}


	/**
	 * staff survey  xls reports
	 *
	 */

	public function admin_staffsurvey_xls() {
		$this->uses = array('StaffSurvey');
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->staffreports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		} else {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31"; // set last date of current year
			$this->staffreports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
		$this->layout = false;
	}

	/**
	 *
	 * annually patient survey reports
	 *
	 **/

	public function admin_patientsurvey_reports() {
		$this->set('title_for_layout', __('Patient Survey Reports', true));
		$this->uses = array('PatientSurvey');
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->patientreports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		} else {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31"; // set last date of current year
			$this->patientreports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);

		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));

	}

	/**
	 *
	 * patient survey report query
	 *
	 **/

	private function patientreports($fromDate=NULL, $toDate=NULL) {
		$this->layout = 'advance' ;
		$stAgreeAnsCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS stagreeanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("question_id, month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Strongly Agree', 'PatientSurvey.location_id' => $this->Session->read('locationid')), 'recursive' => -1));

		foreach($stAgreeAnsCount as $stAgreeAnsCountVal) {
			$filterStAgreeDateArray[] = $stAgreeAnsCountVal[0]['month_reports'];
			$filterStAgreeQuestIdArray[] = $stAgreeAnsCountVal['PatientSurvey']['question_id'];
			$filterStAgreeAnsCountArray[$stAgreeAnsCountVal['PatientSurvey']['question_id']][$stAgreeAnsCountVal[0]['month_reports']] = $stAgreeAnsCountVal[0]['stagreeanscount'];
		}
		$this->set('filterStAgreeDateArray', isset($filterStAgreeDateArray)?$filterStAgreeDateArray:"");
		$this->set('filterStAgreeQuestIdArray', isset($filterStAgreeQuestIdArray)?$filterStAgreeQuestIdArray:"");
		$this->set('filterStAgreeAnsCountArray', isset($filterStAgreeAnsCountArray)?$filterStAgreeAnsCountArray:0);

		$agreeAnsCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS agreeanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("question_id, month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Agree', 'PatientSurvey.location_id' => $this->Session->read('locationid')), 'recursive' => -1));

		foreach($agreeAnsCount as $agreeAnsCountVal) {
			$filterAgreeDateArray[] = $agreeAnsCountVal[0]['month_reports'];
			$filterAgreeQuestIdArray[] = $agreeAnsCountVal['PatientSurvey']['question_id'];
			$filterAgreeAnsCountArray[$agreeAnsCountVal['PatientSurvey']['question_id']][$agreeAnsCountVal[0]['month_reports']] = $agreeAnsCountVal[0]['agreeanscount'];
		}
		$this->set('filterAgreeDateArray', isset($filterAgreeDateArray)?$filterAgreeDateArray:"");
		$this->set('filterAgreeQuestIdArray', isset($filterAgreeQuestIdArray)?$filterAgreeQuestIdArray:"");
		$this->set('filterAgreeAnsCountArray', isset($filterAgreeAnsCountArray)?$filterAgreeAnsCountArray:0);

		$nandAnsCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS nandanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("question_id, month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Neither Agree Nor  Disagree', 'PatientSurvey.location_id' => $this->Session->read('locationid')), 'recursive' => -1));

		foreach($nandAnsCount as $nandAnsCountVal) {
			$filterNandDateArray[] = $nandAnsCountVal[0]['month_reports'];
			$filterNandQuestIdArray[] = $nandAnsCountVal['PatientSurvey']['question_id'];
			$filterNandAnsCountArray[$nandAnsCountVal['PatientSurvey']['question_id']][$nandAnsCountVal[0]['month_reports']] = $nandAnsCountVal[0]['nandanscount'];
		}
		$this->set('filterNandDateArray', isset($filterNandDateArray)?$filterNandDateArray:"");
		$this->set('filterNandQuestIdArray', isset($filterNandQuestIdArray)?$filterNandQuestIdArray:"");
		$this->set('filterNandAnsCountArray', isset($filterNandAnsCountArray)?$filterNandAnsCountArray:0);

		$disagreeAnsCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS disagreeanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("question_id, month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Disagree', 'PatientSurvey.location_id' => $this->Session->read('locationid')), 'recursive' => -1));

		foreach($disagreeAnsCount as $disagreeAnsCountVal) {
			$filterDisgreeDateArray[] = $disagreeAnsCountVal[0]['month_reports'];
			$filterDisgreeQuestIdArray[] = $disagreeAnsCountVal['PatientSurvey']['question_id'];
			$filterDisgreeAnsCountArray[$disagreeAnsCountVal['PatientSurvey']['question_id']][$disagreeAnsCountVal[0]['month_reports']] = $disagreeAnsCountVal[0]['disagreeanscount'];
		}
		$this->set('filterDisgreeDateArray', isset($filterDisgreeDateArray)?$filterDisgreeDateArray:"");
		$this->set('filterDisgreeQuestIdArray', isset($filterDisgreeQuestIdArray)?$filterDisgreeQuestIdArray:"");
		$this->set('filterDisgreeAnsCountArray', isset($filterDisgreeAnsCountArray)?$filterDisgreeAnsCountArray:0);

		$stdAnsCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS stdanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("question_id, month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Strongly Disagree', 'PatientSurvey.location_id' => $this->Session->read('locationid')), 'recursive' => -1));

		foreach($stdAnsCount as $stdAnsCountVal) {
			$filterStdDateArray[] = $stdAnsCountVal[0]['month_reports'];
			$filterStdQuestIdArray[] = $stdAnsCountVal['PatientSurvey']['question_id'];
			$filterStdAnsCountArray[$stdAnsCountVal['PatientSurvey']['question_id']][$stdAnsCountVal[0]['month_reports']] = $stdAnsCountVal[0]['stdanscount'];
		}
		$this->set('filterStdDateArray', isset($filterStdDateArray)?$filterStdDateArray:"");
		$this->set('filterStdQuestIdArray', isset($filterStdQuestIdArray)?$filterStdQuestIdArray:"");
		$this->set('filterStdAnsCountArray', isset($filterStdAnsCountArray)?$filterStdAnsCountArray:0);

		$naAnsCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS naanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("question_id, month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Not Applicable', 'PatientSurvey.location_id' => $this->Session->read('locationid')), 'recursive' => -1));

		foreach($naAnsCount as $naAnsCountVal) {
			$filterNaDateArray[] = $naAnsCountVal[0]['month_reports'];
			$filterNaQuestIdArray[] = $naAnsCountVal['PatientSurvey']['question_id'];
			$filterNaAnsCountArray[$naAnsCountVal['PatientSurvey']['question_id']][$naAnsCountVal[0]['month_reports']] = $naAnsCountVal[0]['naanscount'];
		}
		$this->set('filterNaDateArray', isset($filterNaDateArray)?$filterNaDateArray:"");
		$this->set('filterNaQuestIdArray', isset($filterNaQuestIdArray)?$filterNaQuestIdArray:"");
		$this->set('filterNaAnsCountArray', isset($filterNaAnsCountArray)?$filterNaAnsCountArray:0);
	}

	/**
	 * patient reports chart
	 *
	 */


	public function admin_patientsurvey_chart() {
		$this->set('title_for_layout', __('Patient Survey Reports Chart', true));
		$this->uses = array('PatientSurvey');
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			// chart query for all options include strong agree, disagree and so on //
			$stAgreeAnsCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS stagreeanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Strongly Agree', 'PatientSurvey.location_id' => $this->Session->read('locationid')), 'recursive' => -1));

			foreach($stAgreeAnsCount as $stAgreeAnsCountVal) {
				$filterStAgreeDateArray[] = $stAgreeAnsCountVal[0]['month_reports'];
				$filterStAgreeAnsCountArray[$stAgreeAnsCountVal[0]['month_reports']] = $stAgreeAnsCountVal[0]['stagreeanscount'];
			}
			$this->set('filterStAgreeDateArray', isset($filterStAgreeDateArray)?$filterStAgreeDateArray:"");
			$this->set('filterStAgreeAnsCountArray', isset($filterStAgreeAnsCountArray)?$filterStAgreeAnsCountArray:0);

			$agreeAnsCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS agreeanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Agree', 'PatientSurvey.location_id' => $this->Session->read('locationid')), 'recursive' => -1));

			foreach($agreeAnsCount as $agreeAnsCountVal) {
				$filterAgreeDateArray[] = $agreeAnsCountVal[0]['month_reports'];
				$filterAgreeAnsCountArray[$agreeAnsCountVal[0]['month_reports']] = $agreeAnsCountVal[0]['agreeanscount'];
			}
			$this->set('filterAgreeDateArray', isset($filterAgreeDateArray)?$filterAgreeDateArray:"");
			$this->set('filterAgreeAnsCountArray', isset($filterAgreeAnsCountArray)?$filterAgreeAnsCountArray:0);

			$nandAnsCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS nandanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Neither Agree Nor  Disagree', 'PatientSurvey.location_id' => $this->Session->read('locationid')), 'recursive' => -1));

			foreach($nandAnsCount as $nandAnsCountVal) {
				$filterNandDateArray[] = $nandAnsCountVal[0]['month_reports'];
				$filterNandAnsCountArray[$nandAnsCountVal[0]['month_reports']] = $nandAnsCountVal[0]['nandanscount'];
			}
			$this->set('filterNandDateArray', isset($filterNandDateArray)?$filterNandDateArray:"");
			$this->set('filterNandAnsCountArray', isset($filterNandAnsCountArray)?$filterNandAnsCountArray:0);

			$disagreeAnsCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS disagreeanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Disagree', 'PatientSurvey.location_id' => $this->Session->read('locationid')), 'recursive' => -1));

			foreach($disagreeAnsCount as $disagreeAnsCountVal) {
				$filterDisgreeDateArray[] = $disagreeAnsCountVal[0]['month_reports'];
				$filterDisgreeAnsCountArray[$disagreeAnsCountVal[0]['month_reports']] = $disagreeAnsCountVal[0]['disagreeanscount'];
			}
			$this->set('filterDisgreeDateArray', isset($filterDisgreeDateArray)?$filterDisgreeDateArray:"");
			$this->set('filterDisgreeAnsCountArray', isset($filterDisgreeAnsCountArray)?$filterDisgreeAnsCountArray:0);

			$stdAnsCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS stdanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Strongly Disagree', 'PatientSurvey.location_id' => $this->Session->read('locationid')), 'recursive' => -1));

			foreach($stdAnsCount as $stdAnsCountVal) {
				$filterStdDateArray[] = $stdAnsCountVal[0]['month_reports'];
				$filterStdAnsCountArray[$stdAnsCountVal[0]['month_reports']] = $stdAnsCountVal[0]['stdanscount'];
			}
			$this->set('filterStdDateArray', isset($filterStdDateArray)?$filterStdDateArray:"");
			$this->set('filterStdAnsCountArray', isset($filterStdAnsCountArray)?$filterStdAnsCountArray:0);

			$naAnsCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS naanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Not Applicable', 'PatientSurvey.location_id' => $this->Session->read('locationid')), 'recursive' => -1));

			foreach($naAnsCount as $naAnsCountVal) {
				$filterNaDateArray[] = $naAnsCountVal[0]['month_reports'];
				$filterNaAnsCountArray[$naAnsCountVal[0]['month_reports']] = $naAnsCountVal[0]['naanscount'];
			}
			$this->set('filterNaDateArray', isset($filterNaDateArray)?$filterNaDateArray:"");
			$this->set('filterNaAnsCountArray', isset($filterNaAnsCountArray)?$filterNaAnsCountArray:0);
			// end //
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
		}
		$this->set('yaxisArray', $yaxisArray);
		$this->set('reportYear', $reportYear);
	}


	/**
	 * patient survey  xls reports
	 *
	 */

	public function admin_patientsurvey_xls() {
		$this->uses = array('PatientSurvey');
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->patientreports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		} else {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31"; // set last date of current year
			$this->patientreports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
		$this->layout = false;
	}

	/**
	 * patient registration reports chart
	 *
	 */


	public function admin_patient_registration_chart() {
		$this->set('title_for_layout', __('Patient Registration Report Chart', true));
		$this->layout = 'advance' ;
		$this->uses = array('Person');
		$reportYear = date('Y');
		$fromDate = $reportYear."-01-01"; // set first date of current year
		$toDate = $reportYear."-12-31"; // set last date of current year

		$patientRegCount = $this->Person->find('all', array('fields' => array('COUNT(*) AS patientregcount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'Person.patient_uid', 'Person.location_id', 'Person.id', 'Person.is_deleted'), 'group' => array("month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('Person.is_deleted' => 0, 'Person.location_id' => $this->Session->read('locationid')), 'recursive' => -1));

		foreach($patientRegCount as $patientRegCountVal) {
			$filterPatientRegDateArray[] = $patientRegCountVal[0]['month_reports'];
			$filterPatientRegCountArray[$patientRegCountVal[0]['month_reports']] = $patientRegCountVal[0]['patientregcount'];
		}

		$this->set('filterPatientRegDateArray', isset($filterPatientRegDateArray)?$filterPatientRegDateArray:"");
		$this->set('filterPatientRegCountArray', isset($filterPatientRegCountArray)?$filterPatientRegCountArray:0);

			
		while($toDate > $fromDate) {
			$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
			$expfromdate = explode("-", $fromDate);
			$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
		}
			
		$this->set('yaxisArray', $yaxisArray);
		$this->set('reportYear', $reportYear);
	}

	/**
	 * patient ot reports chart
	 *
	 */


	public function admin_patient_ot_chart() {
		$this->set('title_for_layout', __('Patient OT Report Chart', true));
		$this->uses = array('OptAppointment');
		$this->layout = 'advance' ;
		$reportYear = date("Y");
		$fromDate = $reportYear."-01-01"; // set first date of current year
		$toDate = $reportYear."-12-31"; // set last date of current year

		$majorCount = $this->OptAppointment->find('all', array('fields' => array('COUNT(*) AS majorcount', 'DATE_FORMAT(schedule_date, "%M-%Y") AS month_reports', 'OptAppointment.schedule_date', 'OptAppointment.operation_type', 'OptAppointment.location_id', 'OptAppointment.id','OptAppointment.procedure_complete'), 'group' => array("month_reports  HAVING  schedule_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('OptAppointment.procedure_complete' => 1, 'OptAppointment.operation_type' => 'major', 'OptAppointment.location_id' => $this->Session->read('locationid'), 'OptAppointment.is_deleted' => 0), 'recursive' => -1));

		foreach($majorCount as $majorCountVal) {
			$filterMajorDateArray[] = $majorCountVal[0]['month_reports'];
			$filterMajorCountArray[$majorCountVal[0]['month_reports']] = $majorCountVal[0]['majorcount'];
		}

		$this->set('filterMajorDateArray', isset($filterMajorDateArray)?$filterMajorDateArray:"");
		$this->set('filterMajorCountArray', isset($filterMajorCountArray)?$filterMajorCountArray:0);

		$minorCount = $this->OptAppointment->find('all', array('fields' => array('COUNT(*) AS minorcount', 'DATE_FORMAT(schedule_date, "%M-%Y") AS month_reports', 'OptAppointment.schedule_date', 'OptAppointment.operation_type', 'OptAppointment.location_id', 'OptAppointment.id','OptAppointment.procedure_complete'), 'group' => array("month_reports  HAVING  schedule_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('OptAppointment.procedure_complete' => 1, 'OptAppointment.operation_type' => 'minor', 'OptAppointment.location_id' => $this->Session->read('locationid'), 'OptAppointment.is_deleted' => 0), 'recursive' => -1));

		foreach($minorCount as $minorCountVal) {
			$filterMinorDateArray[] = $minorCountVal[0]['month_reports'];
			$filterMinorCountArray[$minorCountVal[0]['month_reports']] = $minorCountVal[0]['minorcount'];
		}

		$this->set('filterMinorDateArray', isset($filterMinorDateArray)?$filterMinorDateArray:"");
		$this->set('filterMinorCountArray', isset($filterMinorCountArray)?$filterMinorCountArray:0);


		while($toDate > $fromDate) {
			$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
			$expfromdate = explode("-", $fromDate);
			$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
		}
			
		$this->set('yaxisArray', $yaxisArray);
		$this->set('reportYear', $reportYear);
	}

	/**
	 * patient discharge reports chart
	 *
	 */


	public function admin_patient_discharge_chart() {
		$this->set('title_for_layout', __('Patient Discharge Report Chart', true));
		$this->uses = array('FinalBilling');
		$this->layout = 'advance' ;
		$reportYear = isset($this->request->data['PatientAdmissionReport']['year'])?$this->request->data['PatientAdmissionReport']['year']:date("Y");

		$fromDate = $reportYear."-01-01"; // set first date of current year
		$toDate = $reportYear."-12-31"; // set last date of current year

		$recoverCount = $this->FinalBilling->find('all', array('fields' => array('COUNT(*) AS recovercount', 'DATE_FORMAT(discharge_date, "%M-%Y") AS month_reports', 'FinalBilling.discharge_date', 'FinalBilling.reason_of_discharge', 'FinalBilling.location_id', 'FinalBilling.id'), 'group' => array("month_reports  HAVING  discharge_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('FinalBilling.reason_of_discharge' => 'Recovered', 'FinalBilling.location_id' => $this->Session->read('locationid')), 'recursive' => -1));
		foreach($recoverCount as $recoverCountVal) {
			$filterRecoverDateArray[] = $recoverCountVal[0]['month_reports'];
			$filterRecoverCountArray[$recoverCountVal[0]['month_reports']] = $recoverCountVal[0]['recovercount'];
		}
		
		$this->set('filterRecoverDateArray', isset($filterRecoverDateArray)?$filterRecoverDateArray:"");
		$this->set('filterRecoverCountArray', isset($filterRecoverCountArray)?$filterRecoverCountArray:0);

		$damaCount = $this->FinalBilling->find('all', array('fields' => array('COUNT(*) AS damarcount', 'DATE_FORMAT(discharge_date, "%M-%Y") AS month_reports', 'FinalBilling.discharge_date', 'FinalBilling.reason_of_discharge', 'FinalBilling.location_id', 'FinalBilling.id'), 'group' => array("month_reports  HAVING  discharge_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('FinalBilling.reason_of_discharge' => 'DAMA', 'FinalBilling.location_id' => $this->Session->read('locationid')), 'recursive' => -1));
		foreach($damaCount as $damaCountVal) {
			$filterDamaDateArray[] = $damaCountVal[0]['month_reports'];
			$filterDamaCountArray[$damaCountVal[0]['month_reports']] = $damaCountVal[0]['damarcount'];
		}

		$this->set('filterDamaDateArray', isset($filterDamaDateArray)?$filterDamaDateArray:"");
		$this->set('filterDamaCountArray', isset($filterDamaCountArray)?$filterDamaCountArray:0);

		$deathCount = $this->FinalBilling->find('all', array('fields' => array('COUNT(*) AS deathcount', 'DATE_FORMAT(discharge_date, "%M-%Y") AS month_reports', 'FinalBilling.discharge_date', 'FinalBilling.reason_of_discharge', 'FinalBilling.location_id', 'FinalBilling.id'), 'group' => array("month_reports  HAVING  discharge_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 
		'conditions' => array('FinalBilling.reason_of_discharge' => 'Death', 'FinalBilling.location_id' => $this->Session->read('locationid')), 'recursive' => -1));
		foreach($deathCount as $deathCountVal) {
			$filterDeathDateArray[] = $deathCountVal[0]['month_reports'];
			$filterDeathCountArray[$deathCountVal[0]['month_reports']] = $deathCountVal[0]['deathcount'];
		}
		//debug($filterDeathCountArray);
		$this->set('filterDeathDateArray', isset($filterDeathDateArray)?$filterDeathDateArray:"");
		$this->set('filterDeathCountArray', isset($filterDeathCountArray)?$filterDeathCountArray:0);


		while($toDate > $fromDate) {
			$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
			$expfromdate = explode("-", $fromDate);
			$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
		}
			
		$this->set('yaxisArray', $yaxisArray);
		$this->set('reportYear', $reportYear);
	}

	/**
	 * patient surveys type
	 *
	 */

	public function admin_patient_survey_type() {
		$this->layout ='advance';
	}

	/**
	 *
	 * annually OPD patient survey reports
	 *
	 **/

	public function admin_opdpatientsurvey_reports() {
		$this->set('title_for_layout', __('OPD Patient Survey Reports', true));
		$this->uses = array('PatientSurvey');
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->cleanliness_survey($fromDate,$toDate);
			$this->service_survey($fromDate,$toDate);
			$this->satisfaction_survey($fromDate,$toDate);
			$this->recommendation_survey($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		} else {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31"; // set last date of current year
			$this->cleanliness_survey($fromDate,$toDate);
			$this->service_survey($fromDate,$toDate);
			$this->satisfaction_survey($fromDate,$toDate);
			$this->recommendation_survey($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);

		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));

	}

	/**
	 *
	 * cleanliness survey report query
	 *
	 **/

	private function cleanliness_survey($fromDate=NULL, $toDate=NULL) {
		$stAgreeCleanCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS stagreeanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("question_id, month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Strongly Agree', 'PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.survey_category' => 'cleanliness', 'PatientSurvey.patient_type' => 'OPD'), 'recursive' => -1));

		foreach($stAgreeCleanCount as $stAgreeCleanCountVal) {
			$stAgreeDateCleanArray[] = $stAgreeCleanCountVal[0]['month_reports'];
			$stAgreeQuestIdCleanArray[] = $stAgreeCleanCountVal['PatientSurvey']['question_id'];
			$stAgreeAnsCountCleanArray[$stAgreeCleanCountVal['PatientSurvey']['question_id']][$stAgreeCleanCountVal[0]['month_reports']] = $stAgreeCleanCountVal[0]['stagreeanscount'];
		}
		$this->set('stAgreeDateCleanArray', isset($stAgreeDateCleanArray)?$stAgreeDateCleanArray:"");
		$this->set('stAgreeQuestIdCleanArray', isset($stAgreeQuestIdCleanArray)?$stAgreeQuestIdCleanArray:"");
		$this->set('stAgreeAnsCountCleanArray', isset($stAgreeAnsCountCleanArray)?$stAgreeAnsCountCleanArray:0);

		$agreeCleanCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS agreeanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("question_id, month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Agree', 'PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.survey_category' => 'cleanliness', 'PatientSurvey.patient_type' => 'OPD'), 'recursive' => -1));

		foreach($agreeCleanCount as $agreeCleanCountVal) {
			$agreeDateCleanArray[] = $agreeCleanCountVal[0]['month_reports'];
			$agreeQuestIdCleanArray[] = $agreeCleanCountVal['PatientSurvey']['question_id'];
			$agreeAnsCountCleanArray[$agreeCleanCountVal['PatientSurvey']['question_id']][$agreeCleanCountVal[0]['month_reports']] = $agreeCleanCountVal[0]['agreeanscount'];
		}
		$this->set('agreeDateCleanArray', isset($agreeDateCleanArray)?$agreeDateCleanArray:"");
		$this->set('agreeQuestIdCleanArray', isset($agreeQuestIdCleanArray)?$agreeQuestIdCleanArray:"");
		$this->set('agreeAnsCountCleanArray', isset($agreeAnsCountCleanArray)?$agreeAnsCountCleanArray:0);

		$nandAnsCleanCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS nandanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("question_id, month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Neither Agree Nor  Disagree', 'PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.survey_category' => 'cleanliness', 'PatientSurvey.patient_type' => 'OPD'), 'recursive' => -1));

		foreach($nandAnsCleanCount as $nandAnsCleanCountVal) {
			$nandDateCleanArray[] = $nandAnsCleanCountVal[0]['month_reports'];
			$nandQuestIdCleanArray[] = $nandAnsCleanCountVal['PatientSurvey']['question_id'];
			$nandAnsCountCleanArray[$nandAnsCleanCountVal['PatientSurvey']['question_id']][$nandAnsCleanCountVal[0]['month_reports']] = $nandAnsCleanCountVal[0]['nandanscount'];
		}
		$this->set('nandDateCleanArray', isset($nandDateCleanArray)?$nandDateCleanArray:"");
		$this->set('nandQuestIdCleanArray', isset($nandQuestIdCleanArray)?$nandQuestIdCleanArray:"");
		$this->set('nandAnsCountCleanArray', isset($nandAnsCountCleanArray)?$nandAnsCountCleanArray:0);

		$disagreeAnsCleanCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS disagreeanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("question_id, month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Disagree', 'PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.survey_category' => 'cleanliness', 'PatientSurvey.patient_type' => 'OPD'), 'recursive' => -1));

		foreach($disagreeAnsCleanCount as $disagreeAnsCleanCountVal) {
			$disgreeDateCleanArray[] = $disagreeAnsCleanCountVal[0]['month_reports'];
			$disgreeQuestIdCleanArray[] = $disagreeAnsCleanCountVal['PatientSurvey']['question_id'];
			$disgreeAnsCountCleanArray[$disagreeAnsCleanCountVal['PatientSurvey']['question_id']][$disagreeAnsCleanCountVal[0]['month_reports']] = $disagreeAnsCleanCountVal[0]['disagreeanscount'];
		}
		$this->set('disgreeDateCleanArray', isset($disgreeDateCleanArray)?$disgreeDateCleanArray:"");
		$this->set('disgreeQuestIdCleanArray', isset($disgreeQuestIdCleanArray)?$disgreeQuestIdCleanArray:"");
		$this->set('disgreeAnsCountCleanArray', isset($disgreeAnsCountCleanArray)?$disgreeAnsCountCleanArray:0);

		$stdAnsCleanCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS stdanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("question_id, month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Strongly Disagree', 'PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.survey_category' => 'cleanliness', 'PatientSurvey.patient_type' => 'OPD'), 'recursive' => -1));

		foreach($stdAnsCleanCount as $stdAnsCleanCountVal) {
			$stdDateCleanArray[] = $stdAnsCleanCountVal[0]['month_reports'];
			$stdQuestIdCleanArray[] = $stdAnsCleanCountVal['PatientSurvey']['question_id'];
			$stdAnsCountCleanArray[$stdAnsCleanCountVal['PatientSurvey']['question_id']][$stdAnsCleanCountVal[0]['month_reports']] = $stdAnsCleanCountVal[0]['stdanscount'];
		}
		$this->set('stdDateCleanArray', isset($stdDateCleanArray)?$stdDateCleanArray:"");
		$this->set('stdQuestIdCleanArray', isset($stdQuestIdCleanArray)?$stdQuestIdCleanArray:"");
		$this->set('stdAnsCountCleanArray', isset($stdAnsCountCleanArray)?$stdAnsCountCleanArray:0);


	}

	/**
	 *
	 * service survey report query
	 *
	 **/

	private function service_survey($fromDate=NULL, $toDate=NULL) {
		$stAgreeServiceCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS stagreeanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("question_id, month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Strongly Agree', 'PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.survey_category' => 'service', 'PatientSurvey.patient_type' => 'OPD'), 'recursive' => -1));

		foreach($stAgreeServiceCount as $stAgreeServiceCountVal) {
			$stAgreeDateServiceArray[] = $stAgreeServiceCountVal[0]['month_reports'];
			$stAgreeQuestIdServiceArray[] = $stAgreeServiceCountVal['PatientSurvey']['question_id'];
			$stAgreeAnsCountServiceArray[$stAgreeServiceCountVal['PatientSurvey']['question_id']][$stAgreeServiceCountVal[0]['month_reports']] = $stAgreeServiceCountVal[0]['stagreeanscount'];
		}
		$this->set('stAgreeDateServiceArray', isset($stAgreeDateServiceArray)?$stAgreeDateServiceArray:"");
		$this->set('stAgreeQuestIdServiceArray', isset($stAgreeQuestIdServiceArray)?$stAgreeQuestIdServiceArray:"");
		$this->set('stAgreeAnsCountServiceArray', isset($stAgreeAnsCountServiceArray)?$stAgreeAnsCountServiceArray:0);

		$agreeServiceCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS agreeanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("question_id, month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Agree', 'PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.survey_category' => 'service', 'PatientSurvey.patient_type' => 'OPD'), 'recursive' => -1));

		foreach($agreeServiceCount as $agreeServiceCountVal) {
			$agreeDateServiceArray[] = $agreeServiceCountVal[0]['month_reports'];
			$agreeQuestIdServiceArray[] = $agreeServiceCountVal['PatientSurvey']['question_id'];
			$agreeAnsCountServiceArray[$agreeServiceCountVal['PatientSurvey']['question_id']][$agreeServiceCountVal[0]['month_reports']] = $agreeServiceCountVal[0]['agreeanscount'];
		}
		$this->set('agreeDateServiceArray', isset($agreeDateServiceArray)?$agreeDateServiceArray:"");
		$this->set('agreeQuestIdServiceArray', isset($agreeQuestIdServiceArray)?$agreeQuestIdServiceArray:"");
		$this->set('agreeAnsCountServiceArray', isset($agreeAnsCountServiceArray)?$agreeAnsCountServiceArray:0);

		$nandAnsServiceCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS nandanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("question_id, month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Neither Agree Nor  Disagree', 'PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.survey_category' => 'service', 'PatientSurvey.patient_type' => 'OPD'), 'recursive' => -1));

		foreach($nandAnsServiceCount as $nandAnsServiceCountVal) {
			$nandDateServiceArray[] = $nandAnsServiceCountVal[0]['month_reports'];
			$nandQuestIdServiceArray[] = $nandAnsServiceCountVal['PatientSurvey']['question_id'];
			$nandAnsCountServiceArray[$nandAnsServiceCountVal['PatientSurvey']['question_id']][$nandAnsServiceCountVal[0]['month_reports']] = $nandAnsServiceCountVal[0]['nandanscount'];
		}
		$this->set('nandDateServiceArray', isset($nandDateServiceArray)?$nandDateServiceArray:"");
		$this->set('nandQuestIdServiceArray', isset($nandQuestIdServiceArray)?$nandQuestIdServiceArray:"");
		$this->set('nandAnsCountServiceArray', isset($nandAnsCountServiceArray)?$nandAnsCountServiceArray:0);

		$disagreeAnsServiceCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS disagreeanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("question_id, month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Disagree', 'PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.survey_category' => 'service', 'PatientSurvey.patient_type' => 'OPD'), 'recursive' => -1));

		foreach($disagreeAnsServiceCount as $disagreeAnsServiceCountVal) {
			$disgreeDateServiceArray[] = $disagreeAnsServiceCountVal[0]['month_reports'];
			$disgreeQuestIdServiceArray[] = $disagreeAnsServiceCountVal['PatientSurvey']['question_id'];
			$disgreeAnsCountServiceArray[$disagreeAnsServiceCountVal['PatientSurvey']['question_id']][$disagreeAnsServiceCountVal[0]['month_reports']] = $disagreeAnsServiceCountVal[0]['disagreeanscount'];
		}
		$this->set('disgreeDateServiceArray', isset($disgreeDateServiceArray)?$disgreeDateServiceArray:"");
		$this->set('disgreeQuestIdServiceArray', isset($disgreeQuestIdServiceArray)?$disgreeQuestIdServiceArray:"");
		$this->set('disgreeAnsCountServiceArray', isset($disgreeAnsCountServiceArray)?$disgreeAnsCountServiceArray:0);

		$stdAnsServiceCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS stdanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("question_id, month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Strongly Disagree', 'PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.survey_category' => 'service', 'PatientSurvey.patient_type' => 'OPD'), 'recursive' => -1));

		foreach($stdAnsServiceCount as $stdAnsServiceCountVal) {
			$stdDateServiceArray[] = $stdAnsServiceCountVal[0]['month_reports'];
			$stdQuestIdServiceArray[] = $stdAnsServiceCountVal['PatientSurvey']['question_id'];
			$stdAnsCountServiceArray[$stdAnsServiceCountVal['PatientSurvey']['question_id']][$stdAnsServiceCountVal[0]['month_reports']] = $stdAnsServiceCountVal[0]['stdanscount'];
		}
		$this->set('stdDateServiceArray', isset($stdDateServiceArray)?$stdDateServiceArray:"");
		$this->set('stdQuestIdServiceArray', isset($stdQuestIdServiceArray)?$stdQuestIdServiceArray:"");
		$this->set('stdAnsCountServiceArray', isset($stdAnsCountServiceArray)?$stdAnsCountServiceArray:0);


	}

	/**
	 *
	 * satisfaction survey report query
	 *
	 **/

	private function satisfaction_survey($fromDate=NULL, $toDate=NULL) {
		$stAgreeSatisCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS stagreeanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("question_id, month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Strongly Agree', 'PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.survey_category' => 'satisfaction', 'PatientSurvey.patient_type' => 'OPD'), 'recursive' => -1));

		foreach($stAgreeSatisCount as $stAgreeSatisCountVal) {
			$stAgreeDateSatisArray[] = $stAgreeSatisCountVal[0]['month_reports'];
			$stAgreeQuestIdSatisArray[] = $stAgreeSatisCountVal['PatientSurvey']['question_id'];
			$stAgreeAnsCountSatisArray[$stAgreeSatisCountVal['PatientSurvey']['question_id']][$stAgreeSatisCountVal[0]['month_reports']] = $stAgreeSatisCountVal[0]['stagreeanscount'];
		}
		$this->set('stAgreeDateSatisArray', isset($stAgreeDateSatisArray)?$stAgreeDateSatisArray:"");
		$this->set('stAgreeQuestIdSatisArray', isset($stAgreeQuestIdSatisArray)?$stAgreeQuestIdSatisArray:"");
		$this->set('stAgreeAnsCountSatisArray', isset($stAgreeAnsCountSatisArray)?$stAgreeAnsCountSatisArray:0);

		$agreeSatisCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS agreeanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("question_id, month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Agree', 'PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.survey_category' => 'satisfaction', 'PatientSurvey.patient_type' => 'OPD'), 'recursive' => -1));

		foreach($agreeSatisCount as $agreeSatisCountVal) {
			$agreeDateSatisArray[] = $agreeSatisCountVal[0]['month_reports'];
			$agreeQuestIdSatisArray[] = $agreeSatisCountVal['PatientSurvey']['question_id'];
			$agreeAnsCountSatisArray[$agreeSatisCountVal['PatientSurvey']['question_id']][$agreeSatisCountVal[0]['month_reports']] = $agreeSatisCountVal[0]['agreeanscount'];
		}
		$this->set('agreeDateSatisArray', isset($agreeDateSatisArray)?$agreeDateSatisArray:"");
		$this->set('agreeQuestIdSatisArray', isset($agreeQuestIdSatisArray)?$agreeQuestIdSatisArray:"");
		$this->set('agreeAnsCountSatisArray', isset($agreeAnsCountSatisArray)?$agreeAnsCountSatisArray:0);

		$nandAnsSatisCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS nandanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("question_id, month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Neither Agree Nor  Disagree', 'PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.survey_category' => 'satisfaction', 'PatientSurvey.patient_type' => 'OPD'), 'recursive' => -1));

		foreach($nandAnsSatisCount as $nandAnsSatisCountVal) {
			$nandDateSatisArray[] = $nandAnsSatisCountVal[0]['month_reports'];
			$nandQuestIdSatisArray[] = $nandAnsSatisCountVal['PatientSurvey']['question_id'];
			$nandAnsCountSatisArray[$nandAnsSatisCountVal['PatientSurvey']['question_id']][$nandAnsSatisCountVal[0]['month_reports']] = $nandAnsSatisCountVal[0]['nandanscount'];
		}
		$this->set('nandDateSatisArray', isset($nandDateSatisArray)?$nandDateSatisArray:"");
		$this->set('nandQuestIdSatisArray', isset($nandQuestIdSatisArray)?$nandQuestIdSatisArray:"");
		$this->set('nandAnsCountSatisArray', isset($nandAnsCountSatisArray)?$nandAnsCountSatisArray:0);

		$disagreeAnsSatisCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS disagreeanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("question_id, month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Disagree', 'PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.survey_category' => 'satisfaction', 'PatientSurvey.patient_type' => 'OPD'), 'recursive' => -1));

		foreach($disagreeAnsSatisCount as $disagreeAnsSatisCountVal) {
			$disgreeDateSatisArray[] = $disagreeAnsSatisCountVal[0]['month_reports'];
			$disgreeQuestIdSatisArray[] = $disagreeAnsSatisCountVal['PatientSurvey']['question_id'];
			$disgreeAnsCountSatisArray[$disagreeAnsSatisCountVal['PatientSurvey']['question_id']][$disagreeAnsSatisCountVal[0]['month_reports']] = $disagreeAnsSatisCountVal[0]['disagreeanscount'];
		}
		$this->set('disgreeDateSatisArray', isset($disgreeDateSatisArray)?$disgreeDateSatisArray:"");
		$this->set('disgreeQuestIdSatisArray', isset($disgreeQuestIdSatisArray)?$disgreeQuestIdSatisArray:"");
		$this->set('disgreeAnsCountSatisArray', isset($disgreeAnsCountSatisArray)?$disgreeAnsCountSatisArray:0);

		$stdAnsSatisCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS stdanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("question_id, month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Strongly Disagree', 'PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.survey_category' => 'satisfaction', 'PatientSurvey.patient_type' => 'OPD'), 'recursive' => -1));

		foreach($stdAnsSatisCount as $stdAnsSatisCountVal) {
			$stdDateSatisArray[] = $stdAnsSatisCountVal[0]['month_reports'];
			$stdQuestIdSatisArray[] = $stdAnsSatisCountVal['PatientSurvey']['question_id'];
			$stdAnsCountSatisArray[$stdAnsSatisCountVal['PatientSurvey']['question_id']][$stdAnsSatisCountVal[0]['month_reports']] = $stdAnsSatisCountVal[0]['stdanscount'];
		}
		$this->set('stdDateSatisArray', isset($stdDateSatisArray)?$stdDateSatisArray:"");
		$this->set('stdQuestIdSatisArray', isset($stdQuestIdSatisArray)?$stdQuestIdSatisArray:"");
		$this->set('stdAnsCountSatisArray', isset($stdAnsCountSatisArray)?$stdAnsCountSatisArray:0);


	}

	/**
	 *
	 * recommendation survey report query
	 *
	 **/

	private function recommendation_survey($fromDate=NULL, $toDate=NULL) {
		$stAgreeRecomCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS stagreeanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("question_id, month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Strongly Agree', 'PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.survey_category' => 'recommendation', 'PatientSurvey.patient_type' => 'OPD'), 'recursive' => -1));

		foreach($stAgreeRecomCount as $stAgreeRecomCountVal) {
			$stAgreeDateRecomArray[] = $stAgreeRecomCountVal[0]['month_reports'];
			$stAgreeQuestIdRecomArray[] = $stAgreeRecomCountVal['PatientSurvey']['question_id'];
			$stAgreeAnsCountRecomArray[$stAgreeRecomCountVal['PatientSurvey']['question_id']][$stAgreeRecomCountVal[0]['month_reports']] = $stAgreeRecomCountVal[0]['stagreeanscount'];
		}
		$this->set('stAgreeDateRecomArray', isset($stAgreeDateRecomArray)?$stAgreeDateRecomArray:"");
		$this->set('stAgreeQuestIdRecomArray', isset($stAgreeQuestIdRecomArray)?$stAgreeQuestIdRecomArray:"");
		$this->set('stAgreeAnsCountRecomArray', isset($stAgreeAnsCountRecomArray)?$stAgreeAnsCountRecomArray:0);

		$agreeRecomCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS agreeanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("question_id, month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Agree', 'PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.survey_category' => 'recommendation', 'PatientSurvey.patient_type' => 'OPD'), 'recursive' => -1));

		foreach($agreeRecomCount as $agreeRecomCountVal) {
			$agreeDateRecomArray[] = $agreeRecomCountVal[0]['month_reports'];
			$agreeQuestIdRecomArray[] = $agreeRecomCountVal['PatientSurvey']['question_id'];
			$agreeAnsCountRecomArray[$agreeRecomCountVal['PatientSurvey']['question_id']][$agreeRecomCountVal[0]['month_reports']] = $agreeRecomCountVal[0]['agreeanscount'];
		}
		$this->set('agreeDateRecomArray', isset($agreeDateRecomArray)?$agreeDateRecomArray:"");
		$this->set('agreeQuestIdRecomArray', isset($agreeQuestIdRecomArray)?$agreeQuestIdRecomArray:"");
		$this->set('agreeAnsCountRecomArray', isset($agreeAnsCountRecomArray)?$agreeAnsCountRecomArray:0);

		$nandAnsRecomCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS nandanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("question_id, month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Neither Agree Nor  Disagree', 'PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.survey_category' => 'recommendation', 'PatientSurvey.patient_type' => 'OPD'), 'recursive' => -1));

		foreach($nandAnsRecomCount as $nandAnsRecomCountVal) {
			$nandDateRecomArray[] = $nandAnsRecomCountVal[0]['month_reports'];
			$nandQuestIdRecomArray[] = $nandAnsRecomCountVal['PatientSurvey']['question_id'];
			$nandAnsCountRecomArray[$nandAnsRecomCountVal['PatientSurvey']['question_id']][$nandAnsRecomCountVal[0]['month_reports']] = $nandAnsRecomCountVal[0]['nandanscount'];
		}
		$this->set('nandDateRecomArray', isset($nandDateRecomArray)?$nandDateRecomArray:"");
		$this->set('nandQuestIdRecomArray', isset($nandQuestIdRecomArray)?$nandQuestIdRecomArray:"");
		$this->set('nandAnsCountRecomArray', isset($nandAnsCountRecomArray)?$nandAnsCountRecomArray:0);

		$disagreeAnsRecomCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS disagreeanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("question_id, month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Disagree', 'PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.survey_category' => 'recommendation', 'PatientSurvey.patient_type' => 'OPD'), 'recursive' => -1));

		foreach($disagreeAnsRecomCount as $disagreeAnsRecomCountVal) {
			$disgreeDateRecomArray[] = $disagreeAnsRecomCountVal[0]['month_reports'];
			$disgreeQuestIdRecomArray[] = $disagreeAnsRecomCountVal['PatientSurvey']['question_id'];
			$disgreeAnsCountRecomArray[$disagreeAnsRecomCountVal['PatientSurvey']['question_id']][$disagreeAnsRecomCountVal[0]['month_reports']] = $disagreeAnsRecomCountVal[0]['disagreeanscount'];
		}
		$this->set('disgreeDateRecomArray', isset($disgreeDateRecomArray)?$disgreeDateRecomArray:"");
		$this->set('disgreeQuestIdRecomArray', isset($disgreeQuestIdRecomArray)?$disgreeQuestIdRecomArray:"");
		$this->set('disgreeAnsCountRecomArray', isset($disgreeAnsCountRecomArray)?$disgreeAnsCountRecomArray:0);

		$stdAnsRecomCount = $this->PatientSurvey->find('all', array('fields' => array('COUNT(*) AS stdanscount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'PatientSurvey.question_id', 'PatientSurvey.location_id', 'PatientSurvey.id'), 'group' => array("question_id, month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('PatientSurvey.answer' => 'Strongly Disagree', 'PatientSurvey.location_id' => $this->Session->read('locationid'), 'PatientSurvey.survey_category' => 'recommendation', 'PatientSurvey.patient_type' => 'OPD'), 'recursive' => -1));

		foreach($stdAnsRecomCount as $stdAnsRecomCountVal) {
			$stdDateRecomArray[] = $stdAnsRecomCountVal[0]['month_reports'];
			$stdQuestIdRecomArray[] = $stdAnsRecomCountVal['PatientSurvey']['question_id'];
			$stdAnsCountRecomArray[$stdAnsRecomCountVal['PatientSurvey']['question_id']][$stdAnsRecomCountVal[0]['month_reports']] = $stdAnsRecomCountVal[0]['stdanscount'];
		}
		$this->set('stdDateRecomArray', isset($stdDateRecomArray)?$stdDateRecomArray:"");
		$this->set('stdQuestIdRecomArray', isset($stdQuestIdRecomArray)?$stdQuestIdRecomArray:"");
		$this->set('stdAnsCountRecomArray', isset($stdAnsCountRecomArray)?$stdAnsCountRecomArray:0);


	}

	/**
	 *
	 * annually OPD patient survey xls reports
	 *
	 **/

	public function admin_opdpatientsurvey_xls() {
		$this->set('title_for_layout', __('OPD Patient Survey Reports', true));
		$this->uses = array('PatientSurvey');
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->cleanliness_survey($fromDate,$toDate);
			$this->service_survey($fromDate,$toDate);
			$this->satisfaction_survey($fromDate,$toDate);
			$this->recommendation_survey($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		} else {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31"; // set last date of current year
			$this->cleanliness_survey($fromDate,$toDate);
			$this->service_survey($fromDate,$toDate);
			$this->satisfaction_survey($fromDate,$toDate);
			$this->recommendation_survey($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);

		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
		$this->layout = false;

	}

	/**
	 *
	 * annually OPD patient survey chart reports
	 *
	 **/

	public function admin_opdpatientsurvey_chart() {
		$this->set('title_for_layout', __('OPD Patient Survey Reports', true));
		$this->uses = array('PatientSurvey');
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->cleanliness_survey($fromDate,$toDate);
			$this->service_survey($fromDate,$toDate);
			$this->satisfaction_survey($fromDate,$toDate);
			$this->recommendation_survey($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		} else {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31"; // set last date of current year
			$this->cleanliness_survey($fromDate,$toDate);
			$this->service_survey($fromDate,$toDate);
			$this->satisfaction_survey($fromDate,$toDate);
			$this->recommendation_survey($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);

		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
	}

	/**
	 *
	 * monthly wise consultation reports
	 *
	 **/

	public function admin_monthly_consultations() {
		$this->set('title_for_layout', __('Monthly Consultations', true));
		$this->uses = array('Appointment');
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->monthly_consultations($fromDate,$toDate);
			while($toDate > $fromDate) {
			 $yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
			 $expfromdate = explode("-", $fromDate);
			 $fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		} else {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31"; // set last date of current year
			$this->monthly_consultations($fromDate,$toDate);
			while($toDate > $fromDate) {
			 $yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
			 $expfromdate = explode("-", $fromDate);
			 $fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);

		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));

	}

	/**
	 *
	 * monthly consultations reports query
	 *
	 **/

	private function monthly_consultations($fromDate=NULL, $toDate=NULL) {
		$consultationCount = $this->Appointment->find('all', array('fields' => array('COUNT(*) AS consultationcount', 'DATE_FORMAT(date, "%M-%Y") AS month_reports', 'Appointment.date', 'Appointment.location_id', 'Appointment.id', 'Appointment.is_deleted'), 'group' => array("month_reports"), 'conditions' => array('Appointment.is_deleted'=> 0, 'Appointment.location_id' => $this->Session->read('locationid'), 'Appointment.date BETWEEN ? AND ?' => array($fromDate, $toDate))));

		foreach($consultationCount as $consultationCountVal) {
			$filterConsultationDateArray[] = $consultationCountVal[0]['month_reports'];
			$filterConsultationCountArray[$consultationCountVal[0]['month_reports']] = $consultationCountVal[0]['consultationcount'];
		}
		$this->set('filterConsultationDateArray', isset($filterConsultationDateArray)?$filterConsultationDateArray:"");
		$this->set('filterConsultationCountArray', isset($filterConsultationCountArray)?$filterConsultationCountArray:0);
	}

	/**
	 * monthly consultations reports chart
	 *
	 */


	public function admin_monthly_consultations_chart() {
		$this->set('title_for_layout', __('Monthly Consultation Chart', true));
		$this->uses = array('Appointment');
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->monthly_consultations($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
		}
		$this->set('yaxisArray', $yaxisArray);
		$this->set('reportYear', $reportYear);
	}


	/**
	 * monthly consultations xls reports
	 *
	 */

	public function admin_monthly_consultations_xls() {
		$this->uses = array('Appointment');
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->monthly_consultations($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		} else {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31"; // set last date of current year
			$this->monthly_consultations($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);

		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
		$this->layout = false;
	}

	/**
	 *
	 * department wise consultation reports
	 *
	 **/

	public function admin_consultationsby_department() {
		$this->set('title_for_layout', __('Consultations By Department', true));
		$this->uses = array('Appointment', 'Department');
		$this->layout ='advance';
		
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$reportMonth = $this->request->data['reportMonth'];
			$departmentType = $this->request->data['departmentType'];
			// if month is selected //
			if(!empty($reportMonth)) {
				$startDate=1;
				$countDays = cal_days_in_month(CAL_GREGORIAN, $reportMonth, $reportYear);
				while($startDate <= $countDays) {
					$dateVal = $reportYear."-".$reportMonth."-".$startDate;
					$yaxisIndex = date("d-F", strtotime($dateVal));
					$yaxisArray[$yaxisIndex] = date("d-F-Y", strtotime($dateVal));
					$startDate++;
				}
				$this->consultationby_mdepartment($yaxisArray, $reportYear, $departmentType);
				$this->set('yaxisArray', $yaxisArray);

				// if month is not selected //
			} else {
				$fromDate = $reportYear."-01-01"; // set first date of current year
				$toDate = $reportYear."-12-31"; // set last date of current year
				$this->consultationby_ydepartment($fromDate, $toDate, $departmentType);
				while($toDate > $fromDate) {
					$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
					$expfromdate = explode("-", $fromDate);
					$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
				}
				$this->set('yaxisArray', $yaxisArray);

			}
		} else {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31"; // set last date of current year
			$departmentType = "";
			$this->consultationby_ydepartment($fromDate,$toDate, $departmentType);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		}
		// get department list //
		$departmentList = $this->Department->find('list', array('fields' => array('Department.id', 'Department.name'), 'conditions' => array('Department.location_id' => $this->Session->read('locationid'), 'Department.is_active' => 1)));

		$this->set('departmentType', isset($departmentType)?$departmentType:"1"); // 1 for number of cases
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
		$this->set('reportMonth', isset($this->request->data['reportMonth'])?$this->request->data['reportMonth']:"");
		$this->set('departmentList', $departmentList);

	}

	/**
	 *
	 * department wise consultations with monthly reports query
	 *
	 **/

	private function consultationby_mdepartment($yaxisArray=NULL, $reportYear=NULL, $departmentType=NULL) {
		$assignIndex = array_keys($yaxisArray);
		$fromDate = date("Y-m-d", strtotime($yaxisArray[$assignIndex[0]]."-".$reportYear));
		$toDate = date("Y-m-d", strtotime($yaxisArray[$assignIndex[count($yaxisArray)-1]]."-".$reportYear));

		if($departmentType) $departmentCond = "Appointment.department_id = ".$departmentType;
		$monthlyDepartConsultCount = $this->Appointment->find('all', array('fields' => array('COUNT(*) AS departconsultcount', 'DATE_FORMAT(date, "%d-%M") AS day_reports',
				 'Appointment.department_id', 'Appointment.is_deleted', 'Appointment.location_id', 'Appointment.id', 'Appointment.date'),
				 'conditions' => array('Appointment.location_id' => $this->Session->read('locationid'),$departmentCond, 'Appointment.is_deleted' => 0,
				 		 'Appointment.date BETWEEN ? AND ?' => array($fromDate, $toDate)), 'group' => array('date')));
		foreach($monthlyDepartConsultCount as $monthlyDepartConsultCountVal) {
			$filterDepartConsultDateArray[] = $monthlyDepartConsultCountVal[0]['day_reports'];
			$filterDepartConsultCountArray[$monthlyDepartConsultCountVal[0]['day_reports']] = $monthlyDepartConsultCountVal[0]['departconsultcount'];
		}
		$this->set('filterDepartConsultDateArray', isset($filterDepartConsultDateArray)?$filterDepartConsultDateArray:"");
		$this->set('filterDepartConsultCountArray', isset($filterDepartConsultCountArray)?$filterDepartConsultCountArray:0);
	}

	/**
	 *
	 * department wise consultations with yearly reports query
	 *
	 **/

	private function consultationby_ydepartment($fromDate=NULL, $toDate=NULL, $departmentType=NULL) {
		
		if($departmentType) $departmentCond = "Appointment.department_id = ".$departmentType;
		$departConsultCount = $this->Appointment->find('all', array('fields' => array('COUNT(*) AS departconsultcount', 'DATE_FORMAT(date, "%M-%Y") AS month_reports', 
				'Appointment.date', 'Appointment.location_id', 'Appointment.id', 'Appointment.is_deleted', 'Appointment.department_id'),
				 'group' => array("month_reports"), 
				'conditions' => array($departmentCond , 'Appointment.is_deleted'=> 0, 'Appointment.location_id' => $this->Session->read('locationid'),
						 'Appointment.date BETWEEN ? AND ?' => array($fromDate, $toDate))));

		foreach($departConsultCount as $departConsultCountVal) {
			$filterDepartConsultDateArray[] = $departConsultCountVal[0]['month_reports'];
			$filterDepartConsultCountArray[$departConsultCountVal[0]['month_reports']] = $departConsultCountVal[0]['departconsultcount'];
		}
		$this->set('filterDepartConsultDateArray', isset($filterDepartConsultDateArray)?$filterDepartConsultDateArray:"");
		$this->set('filterDepartConsultCountArray', isset($filterDepartConsultCountArray)?$filterDepartConsultCountArray:0);
	}

	/**
	 * monthly consultations by department reports chart
	 *
	 */


	public function admin_consultationsby_department_chart() {
		$this->set('title_for_layout', __('Monthly Consultation Chart', true));
		$this->uses = array('Appointment');
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$departmentType = $this->request->data['departmentType'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->consultationby_ydepartment($fromDate, $toDate, $departmentType);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
		}
		$this->set('yaxisArray', $yaxisArray);
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
		$this->set('departmentType', isset($departmentType)?$departmentType:1);
	}


	/**
	 * monthly consultations xls reports
	 *
	 */

	public function admin_consultationsby_department_xls() {
		$this->uses = array('Appointment');
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$reportMonth = $this->request->data['reportMonth'];
			$departmentType = $this->request->data['departmentType'];
			// if month is selected //
			if(!empty($reportMonth)) {
				$startDate=1;
				$countDays = cal_days_in_month(CAL_GREGORIAN, $reportMonth, $reportYear);
				while($startDate <= $countDays) {
					$dateVal = $reportYear."-".$reportMonth."-".$startDate;
					$yaxisIndex = date("d-F", strtotime($dateVal));
					$yaxisArray[$yaxisIndex] = date("d-F-Y", strtotime($dateVal));
					$startDate++;
				}
				$this->consultationby_mdepartment($yaxisArray, $reportYear, $departmentType);
				$this->set('yaxisArray', $yaxisArray);

				// if month is not selected //
			} else {
				$fromDate = $reportYear."-01-01"; // set first date of current year
				$toDate = $reportYear."-12-31"; // set last date of current year
				$this->consultationby_ydepartment($fromDate, $toDate, $departmentType);
				while($toDate > $fromDate) {
					$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
					$expfromdate = explode("-", $fromDate);
					$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
				}
				$this->set('yaxisArray', $yaxisArray);

			}
		}
		$this->set('yaxisArray', $yaxisArray);
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
		$this->set('departmentType', isset($departmentType)?$departmentType:1);
		$this->set('reportMonth', isset($reportMonth)?$reportMonth:"");
		$this->layout = false;
	}

	/**
	 *
	 * patient summary reports
	 *
	 **/

	public function admin_patient_summary() {
		$this->set('title_for_layout', __('Patient Summary', true));
		$this->uses = array('Patient');
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$reportMonth = $this->request->data['reportMonth'];
			// if month is selected //
			if(!empty($reportMonth)) {
				$startDate=1;
				$countDays = cal_days_in_month(CAL_GREGORIAN, $reportMonth, $reportYear);
				while($startDate <= $countDays) {
					$dateVal = $reportYear."-".$reportMonth."-".$startDate;
					$yaxisIndex = date("d-F", strtotime($dateVal));
					$yaxisArray[$yaxisIndex] = date("d-F-Y", strtotime($dateVal));
					$startDate++;
				}
				$this->mpatientsummary($yaxisArray, $reportYear);
				$this->set('yaxisArray', $yaxisArray);

				// if month is not selected //
			} else {
				$fromDate = $reportYear."-01-01"; // set first date of current year
				$toDate = $reportYear."-12-31"; // set last date of current year
				$this->ypatientsummary($fromDate, $toDate);
				while($toDate > $fromDate) {
					$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
					$expfromdate = explode("-", $fromDate);
					$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
				}
				$this->set('yaxisArray', $yaxisArray);

			}
		} else {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31"; // set last date of current year
			$this->ypatientsummary($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		}

		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
		$this->set('reportMonth', isset($this->request->data['reportMonth'])?$this->request->data['reportMonth']:"");
	}

	/**
	 *
	 * patient summary with monthly reports query
	 *
	 **/

	private function mpatientsummary($yaxisArray=NULL, $reportYear=NULL) {
		$assignIndex = array_keys($yaxisArray);
		$fromDate = date("Y-m-d", strtotime($yaxisArray[$assignIndex[0]]."-".$reportYear));
		$toDate = date("Y-m-d", strtotime($yaxisArray[$assignIndex[count($yaxisArray)-1]]."-".$reportYear));

		// for IPD patient query //
		$monthIPDCashCount = $this->Patient->find('all', array('fields' => array('COUNT(*) AS cashcount', 'DATE_FORMAT(create_time, "%d-%M") AS day_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'Patient.payment_category', 'Patient.location_id', 'Patient.id', 'Patient.is_deleted'), 'group' => array("register_date  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('Patient.admission_type' => 'IPD', 'Patient.payment_category' => 'cash', 'Patient.is_deleted' => 0, 'Patient.location_id' => $this->Session->read('locationid')), 'recursive' => -1));
		foreach($monthIPDCashCount as $monthIPDCashCountVal) {
			$filterMonthIPDCashDateArray[] = $monthIPDCashCountVal[0]['day_reports'];
			$filterMonthIPDCashCountArray[$monthIPDCashCountVal[0]['day_reports']] = $monthIPDCashCountVal[0]['cashcount'];
		}
		$this->set('filterMonthIPDCashDateArray', isset($filterMonthIPDCashDateArray)?$filterMonthIPDCashDateArray:"");
		$this->set('filterMonthIPDCashCountArray', isset($filterMonthIPDCashCountArray)?$filterMonthIPDCashCountArray:0);

		$monthIPDCardCount = $this->Patient->find('all', array('fields' => array('COUNT(*) AS cardcount', 'DATE_FORMAT(create_time, "%d-%M") AS day_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'Patient.payment_category', 'Patient.location_id', 'Patient.id', 'Patient.is_deleted'), 'group' => array("register_date  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('Patient.admission_type' => 'IPD', 'Patient.payment_category' => 'card', 'Patient.is_deleted' => 0, 'Patient.location_id' => $this->Session->read('locationid')), 'recursive' => -1));
		foreach($monthIPDCardCount as $monthIPDCardCountVal) {
			$filterMonthIPDCardDateArray[] = $monthIPDCardCountVal[0]['day_reports'];
			$filterMonthIPDCardCountArray[$monthIPDCardCountVal[0]['day_reports']] = $monthIPDCardCountVal[0]['cardcount'];
		}
		$this->set('filterMonthIPDCardDateArray', isset($filterMonthIPDCardDateArray)?$filterMonthIPDCardDateArray:"");
		$this->set('filterMonthIPDCardCountArray', isset($filterMonthIPDCardCountArray)?$filterMonthIPDCardCountArray:0);
			
		// for OPD patient query //
		$monthOPDCashCount = $this->Patient->find('all', array('fields' => array('COUNT(*) AS cashcount', 'DATE_FORMAT(create_time, "%d-%M") AS day_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'Patient.payment_category', 'Patient.location_id', 'Patient.id', 'Patient.is_deleted'), 'group' => array("register_date  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('Patient.admission_type' => 'OPD', 'Patient.payment_category' => 'cash', 'Patient.is_deleted' => 0, 'Patient.location_id' => $this->Session->read('locationid')), 'recursive' => -1));
		foreach($monthOPDCashCount as $monthOPDCashCountVal) {
			$filterMonthOPDCashDateArray[] = $monthOPDCashCountVal[0]['day_reports'];
			$filterMonthOPDCashCountArray[$monthOPDCashCountVal[0]['day_reports']] = $monthOPDCashCountVal[0]['cashcount'];
		}
		$this->set('filterMonthOPDCashDateArray', isset($filterMonthOPDCashDateArray)?$filterMonthOPDCashDateArray:"");
		$this->set('filterMonthOPDCashCountArray', isset($filterMonthOPDCashCountArray)?$filterMonthOPDCashCountArray:0);

		$monthOPDCardCount = $this->Patient->find('all', array('fields' => array('COUNT(*) AS cardcount', 'DATE_FORMAT(create_time, "%d-%M") AS day_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'Patient.payment_category', 'Patient.location_id', 'Patient.id', 'Patient.is_deleted'), 'group' => array("register_date  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('Patient.admission_type' => 'OPD', 'Patient.payment_category' => 'card', 'Patient.is_deleted' => 0, 'Patient.location_id' => $this->Session->read('locationid')), 'recursive' => -1));
		foreach($monthOPDCardCount as $monthOPDCardCountVal) {
			$filterMonthOPDCardDateArray[] = $monthOPDCardCountVal[0]['day_reports'];
			$filterMonthOPDCardCountArray[$monthOPDCardCountVal[0]['day_reports']] = $monthOPDCardCountVal[0]['cardcount'];
		}
		$this->set('filterMonthOPDCardDateArray', isset($filterMonthOPDCardDateArray)?$filterMonthOPDCardDateArray:"");
		$this->set('filterMonthOPDCardCountArray', isset($filterMonthOPDCardCountArray)?$filterMonthOPDCardCountArray:0);
	}

	/**
	 *
	 * patient summary with yearly reports query
	 *
	 **/

	private function ypatientsummary($fromDate=NULL, $toDate=NULL) {
		// for IPD patient query //
		$yearIPDCashCount = $this->Patient->find('all', array('fields' => array('COUNT(*) AS cashcount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'Patient.payment_category', 'Patient.location_id', 'Patient.id', 'Patient.is_deleted'), 'group' => array("month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('Patient.admission_type' => 'IPD', 'Patient.payment_category' => 'cash', 'Patient.is_deleted' => 0, 'Patient.location_id' => $this->Session->read('locationid')), 'recursive' => -1));
		foreach($yearIPDCashCount as $yearIPDCashCountVal) {
			$filterYearIPDCashDateArray[] = $yearIPDCashCountVal[0]['month_reports'];
			$filterYearIPDCashCountArray[$yearIPDCashCountVal[0]['month_reports']] = $yearIPDCashCountVal[0]['cashcount'];
		}
		$this->set('filterYearIPDCashDateArray', isset($filterYearIPDCashDateArray)?$filterYearIPDCashDateArray:"");
		$this->set('filterYearIPDCashCountArray', isset($filterYearIPDCashCountArray)?$filterYearIPDCashCountArray:0);

		$yearIPDCardCount = $this->Patient->find('all', array('fields' => array('COUNT(*) AS cardcount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'Patient.payment_category', 'Patient.location_id', 'Patient.id', 'Patient.is_deleted'), 'group' => array("month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('Patient.admission_type' => 'IPD', 'Patient.payment_category' => 'card', 'Patient.is_deleted' => 0, 'Patient.location_id' => $this->Session->read('locationid')), 'recursive' => -1));
		foreach($yearIPDCardCount as $yearIPDCardCountVal) {
			$filterYearIPDCardDateArray[] = $yearIPDCardCountVal[0]['month_reports'];
			$filterYearIPDCardCountArray[$yearIPDCardCountVal[0]['month_reports']] = $yearIPDCardCountVal[0]['cardcount'];
		}
		$this->set('filterYearIPDCardDateArray', isset($filterYearIPDCardDateArray)?$filterYearIPDCardDateArray:"");
		$this->set('filterYearIPDCardCountArray', isset($filterYearIPDCardCountArray)?$filterYearIPDCardCountArray:0);
			
		// for OPD patient query //
		$yearOPDCashCount = $this->Patient->find('all', array('fields' => array('COUNT(*) AS cashcount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'Patient.payment_category', 'Patient.location_id', 'Patient.id', 'Patient.is_deleted'), 'group' => array("month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('Patient.admission_type' => 'OPD', 'Patient.payment_category' => 'cash', 'Patient.is_deleted' => 0, 'Patient.location_id' => $this->Session->read('locationid')), 'recursive' => -1));
		foreach($yearOPDCashCount as $yearOPDCashCountVal) {
			$filterYearOPDCashDateArray[] = $yearOPDCashCountVal[0]['month_reports'];
			$filterYearOPDCashCountArray[$yearOPDCashCountVal[0]['month_reports']] = $yearOPDCashCountVal[0]['cashcount'];
		}
		$this->set('filterYearOPDCashDateArray', isset($filterYearOPDCashDateArray)?$filterYearOPDCashDateArray:"");
		$this->set('filterYearOPDCashCountArray', isset($filterYearOPDCashCountArray)?$filterYearOPDCashCountArray:0);

		$yearOPDCardCount = $this->Patient->find('all', array('fields' => array('COUNT(*) AS cardcount', 'DATE_FORMAT(create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(create_time, "%Y-%m-%d") AS register_date', 'Patient.payment_category', 'Patient.location_id', 'Patient.id', 'Patient.is_deleted'), 'group' => array("month_reports  HAVING  register_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('Patient.admission_type' => 'OPD', 'Patient.payment_category' => 'card', 'Patient.is_deleted' => 0, 'Patient.location_id' => $this->Session->read('locationid')), 'recursive' => -1));
		foreach($yearOPDCardCount as $yearOPDCardCountVal) {
			$filterYearOPDCardDateArray[] = $yearOPDCardCountVal[0]['month_reports'];
			$filterYearOPDCardCountArray[$yearOPDCardCountVal[0]['month_reports']] = $yearOPDCardCountVal[0]['cardcount'];
		}
		$this->set('filterYearOPDCardDateArray', isset($filterYearOPDCardDateArray)?$filterYearOPDCardDateArray:"");
		$this->set('filterYearOPDCardCountArray', isset($filterYearOPDCardCountArray)?$filterYearOPDCardCountArray:0);
	}

	/**
	 * patient summary reports chart
	 *
	 */


	public function admin_patient_summary_chart() {
		$this->set('title_for_layout', __('Patient Summary Chart', true));
		$this->uses = array('Patient');
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->ypatientsummary($fromDate, $toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
		}
		$this->set('yaxisArray', $yaxisArray);
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
			
	}


	/**
	 * patient summary xls reports
	 *
	 */

	public function admin_patient_summary_xls() {
		$this->uses = array('Patient');
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$reportMonth = $this->request->data['reportMonth'];
			// if month is selected //
			if(!empty($reportMonth)) {
				$startDate=1;
				$countDays = cal_days_in_month(CAL_GREGORIAN, $reportMonth, $reportYear);
				while($startDate <= $countDays) {
					$dateVal = $reportYear."-".$reportMonth."-".$startDate;
					$yaxisIndex = date("d-F", strtotime($dateVal));
					$yaxisArray[$yaxisIndex] = date("d-F-Y", strtotime($dateVal));
					$startDate++;
				}
				$this->mpatientsummary($yaxisArray, $reportYear);
				$this->set('yaxisArray', $yaxisArray);

				// if month is not selected //
			} else {
				$fromDate = $reportYear."-01-01"; // set first date of current year
				$toDate = $reportYear."-12-31"; // set last date of current year
				$this->ypatientsummary($fromDate, $toDate);
				while($toDate > $fromDate) {
					$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
					$expfromdate = explode("-", $fromDate);
					$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
				}
				$this->set('yaxisArray', $yaxisArray);

			}
		}
		$this->set('yaxisArray', $yaxisArray);
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
		$this->set('reportMonth', isset($reportMonth)?$reportMonth:"");
		$this->layout = false;
	}


	/**
	@name		: admin_total_anesthesia
	@created for: To show total anesthesia taken for the months of year
	@created on : 4/26/2012
	@created By : Anand
	**/

	public function admin_total_anesthesia(){
		$this->uses = array('AnaesthesiaConsentForm','Location','Patient','Person');
		$this->layout = 'advance' ;
		if(!empty($this->request->data)){

			$this->set('title_for_layout', __('Total Anesthesia', true));
			// Collect data in to the variable
			$reportYear = $this->request->data['TotalAnesthesia']['year'];
			$reportType = $this->request->data['TotalAnesthesia']['format'];
			$location_id = $this->Session->read('locationid');
			$consultantName = '';
			$type = 'All';
			$reportMonth = $this->request->data['TotalAnesthesia']['month'];
			// Create date if month is given
			if(!empty($reportMonth)){
				$countDays = cal_days_in_month(CAL_GREGORIAN, $reportMonth, $reportYear); // Days of the month selected
				$fromDate = $reportYear."-".$reportMonth."-01";
				$toDate = $reportYear."-".$reportMonth."-".$countDays;
			} else {
				$fromDate = $reportYear."-01-01"; // set first date of current year
				$toDate = $reportYear."-12-31"; // set last date of current year
			}

			// Bind Models
			$this->Patient->bindModel(array(
					'belongsTo' => array(
							'AnaesthesiaConsentForm'=>array('foreignKey'=>false,'conditions'=>array('AnaesthesiaConsentForm.patient_uid=Patient.patient_id')),
					)),false);

			// This will not change the actual from date
			$setDate = $fromDate;
			// Create Y axix array as per month
			while($toDate > $setDate) {
				$yaxisArray[date("F-Y", strtotime($setDate))] = date("F", strtotime($setDate));
				$expfromdate = explode("-", $setDate);
				$setDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}

			if($fromDate != '' AND $toDate != ''){
				$toSearch = array('AnaesthesiaConsentForm.anaesthesia_time <=' => $toDate, 'AnaesthesiaConsentForm.anaesthesia_time >=' => $fromDate, 'AnaesthesiaConsentForm.location_id'=>$this->Session->read('locationid'));
			}

			// Collect record here
			$countRecord = $this->AnaesthesiaConsentForm->find('all', array('fields' => array('COUNT(*) AS recordcount', 'DATE_FORMAT(anaesthesia_time 	, "%M-%Y") AS month_reports'), 'conditions' => $toSearch ,'group' => array('month_reports')));


			// Set data for view as per record counted
			foreach($countRecord as $countRecordVal) {
				$filterRecordDateArray[] = $countRecordVal[0]['month_reports'];
				$filterRecordCountArray[$countRecordVal[0]['month_reports']] = $countRecordVal[0]['recordcount'];
			}
			// For Excel
			if($reportType == 'EXCEL'){
				$this->layout = false;
				$this->set('yaxisArray',$yaxisArray);
				$this->set('reportYear',$reportYear);
				$this->set('filterdischargeDeathDateArray', isset($filterRecordDateArray)?$filterRecordDateArray:"");
				$this->set('filterdischargeDeathCountArray', isset($filterRecordCountArray)?$filterRecordCountArray:0);
				$this->render('total_anesthesia_xls'); // Render View

				// For PDF
			} else if($reportType == 'PDF'){
				$this->layout = false;
				$this->set('yaxisArray',$yaxisArray);
				$this->set('reportYear',$reportYear);
				$this->set('filterdischargeDeathDateArray', isset($filterRecordDateArray)?$filterRecordDateArray:"");
				$this->set('filterdischargeDeathCountArray', isset($filterRecordCountArray)?$filterRecordCountArray:0);
				$this->render('total_anesthesia_pdf','pdf'); // Render VIew
				// For Graph
			} else if($reportType = 'GRAPH'){

				$this->set('filterRecordDateArray', isset($filterRecordDateArray)?$filterRecordDateArray:"");
				$this->set('filterRecordCountArray', isset($filterRecordCountArray)?$filterRecordCountArray:0);
				$this->set('yaxisArray', $yaxisArray);
				$this->set('reportYear',$reportYear);
				$this->set(compact('reportMonth'));
				$this->render('total_anesthesia_chart'); // render View
			}
		}

	}


	/**
	@name		: admin_initial_assessment_time
	@created for: To show time taken for inital assessment
	@created on : 4/26/2012
	@created By : Anand
	**/

	public function admin_initial_assessment_time(){
		$this->uses = array('Patient','Location','Person','Appointment');
		$this->layout = 'advance' ;
		// Initialize variables
		$patientType = 'OPD';
		// Strats here
		if(!empty($this->request->data) AND isset($patientType) AND $patientType != ''){
			// Collect data in to the variable
			$reportYear = $this->request->data['InitialAssessmentTime']['year'];
			$reportType = $this->request->data['InitialAssessmentTime']['format'];
			$location_id = $this->Session->read('locationid');
			$reportMonth = $this->request->data['InitialAssessmentTime']['month'];
			$total = '';
			$totalHours = '';
			$i = 0;
			$newRecord[] = '';

			// Bind Models
			$this->Patient->bindModel(array(
					'belongsTo' => array(
							'Person'=>array('foreignKey'=>false,'conditions'=>array('Person.patient_uid=Patient.patient_id'),'fields'=>array('Person.age','Person.sex')),
							'PatientInitial' =>array('foreignKey' => false,'conditions'=>array('PatientInitial.id =Person.initial_id' )),
					)),false);

			// Create date if month is given
			if(!empty($reportMonth)){
				$countDays = cal_days_in_month(CAL_GREGORIAN, $reportMonth, $reportYear); // Days of the month selected
				$fromDate = $reportYear."-".$reportMonth."-01";
				$toDate = $reportYear."-".$reportMonth."-".$countDays;
			} else {
				$fromDate = $reportYear."-01-01"; // set first date of current year
				$toDate = $reportYear."-12-31"; // set last date of current year
			}
			// This will not change the actual from date
			$setDate = $fromDate;
			// Create Y axix array as per month
			while($toDate > $setDate) {
				$yaxisArray[date("F-Y", strtotime($setDate))] = date("F", strtotime($setDate));
				$expfromdate = explode("-", $setDate);
				$setDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}

			if($fromDate != '' AND $toDate != ''){
				$toSearch = array('Patient.doc_ini_assess_on <=' => $toDate, 'Patient.doc_ini_assess_on >=' => $fromDate, 'Patient.location_id'=>$this->Session->read('locationid'));
			}

			// Additional condition to fetch record if the doc_ini_asses is not empty
			$condition = 'Patient.doc_ini_assess_on != ""';

			// Fetch the patient data
			$data = $this->Patient->find('all',array('fields'=>array('PatientInitial.name','Patient.patient_id','Patient.admission_id','Patient.form_received_on','Patient.form_completed_on','Patient.admission_type','Patient.lookup_name','Patient.age','Patient.sex','Patient.doc_ini_assess_on','Person.age','Person.sex'),'conditions'=>array($toSearch,$condition,'Patient.admission_type'=>'OPD','Patient.location_id'=>$this->Session->read('locationid'))));

			// Collect the appointment time. Nad calculate the duration to start the initial assessment
			if(!empty($data)){
					
				foreach($data as $record){
					// Latest appointment ID of the patient
					$maxId = $this->Appointment->find('first',array('conditions'=>array('Appointment.patient_id'=>$record['Patient']['id'],'Appointment.location_id'=>$this->Session->read('locationid')),'fields' => array('MAX(Appointment.id) as max_id')));

					// Strt time of the latest appointment
					$getAppointmentTime = $this->Appointment->find('first',array('field'=>array('Appointment.start_time','Appointment.date'),'conditions'=>array('Appointment.id'=>$maxId[0]['max_id'])));

					// Get the time from date
					$splitStart = explode(' ',$record['Patient']['doc_ini_assess_on']);

					// Calculation for duration starts here
					$t1 = $splitStart[1];
					$t2 = $getAppointmentTime['Appointment']['start_time'].':00';

					// Get the difference between to time
					$diff = abs(strtotime($t1)-strtotime($t2));

					// Convert it the diff in hours
					$hours = round($diff/(60*60));
					// In min
					$mins = round($diff/60);

					// Create an array
					$total['duration'] = $mins;
					$total['apt_start_time'] = $getAppointmentTime['Appointment']['start_time'].':00';
					$total['apt_date'] = $getAppointmentTime['Appointment']['date'];
					// Create new array by merging two arraty
					$newRecord[$i] = array_merge($record['Patient'],$total,$record['PatientInitial']);

					// Incease the array kew
					$i++;
				}
			}
			//pr($newRecord);exit;

			//Report Generation starts here
			if($reportType == 'EXCEL'){
				$this->set('record',$newRecord);
				$this->set('reportYear',$reportYear);
				$this->render('initial_assessment_xls',false);
			} else if($reportType == 'PDF'){
				$this->set('record',$newRecord);
				$this->set('reportYear',$reportYear);
				$this->render('initial_assessment_pdf',false);
			}

		}
	}


	/**
	@name		: admin_icu_utilization_rate
	@created for: To show time taken for inital assessment
	@created on : 4/26/2012
	@created By : Anand
	**/

	public function admin_icu_utilization_rate(){
		$this->uses = array('Patient','Location','Person','Ward','WardPatient');
		$this->layout = 'advance' ;
		if(!empty($this->request->data)){
			// Initialize variables
			$reportMonth = $this->request->data['IcuUtilizationRate']['month'];
			$reportYear = $this->request->data['IcuUtilizationRate']['year'];
			$reportType = $this->request->data['IcuUtilizationRate']['format'];
			$location_id = $this->Session->read('locationid');
			// Set Date
			// Create date if month is given
			if(!empty($reportMonth)){
				$countDays = cal_days_in_month(CAL_GREGORIAN, $reportMonth, $reportYear); // Days of the month selected
				$fromDate = $reportYear."-".$reportMonth."-01";
				$toDate = $reportYear."-".$reportMonth."-".$countDays;
			} else {
				$fromDate = $reportYear."-01-01"; // set first date of current year
				$toDate = $reportYear."-12-31"; // set last date of current year
			}

			// This will not change the actual from date
			$setDate = $fromDate;
			// Create Y axix array as per month
			while($toDate > $setDate) {
				$yaxisArray[date("F-Y", strtotime($setDate))] = date("F", strtotime($setDate));
				$expfromdate = explode("-", $setDate);
				$setDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}

			if($fromDate != '' AND $toDate != ''){
				$toSearch = array('WardPatient.in_date <=' => $toDate, 'WardPatient.in_date >=' => $fromDate, 'Patient.location_id'=>$this->Session->read('locationid'));
			}


			// Bind Models
			$this->WardPatient->bindModel(array(
					'belongsTo' => array(
							'Patient'=>array('foreignKey'=>false,'conditions'=>array('Patient.id=WardPatient.patient_id','Patient.admission_type'=>'IPD'),
									'fields'=>array('Patient.lookup_name','Patient.form_received_on','Patient.discharge_date','Patient.patient_id')),
					)),false);

			// Find the Ward Id of ICU
			$icuId = $this->Ward->field('Ward.id',array('Ward.name'=>'ICU','Ward.location_id'=>$this->Session->read('locationid')));

			if($icuId == ''){
				$this->Session->setFlash(__('Sorry! There is no ICU ward in this hospital.',array('class'=>'error')));
				$this->redirect(array("controller" => "reports", "action" => "all_report",'admin'=>true));
			}

			// NumerOF patient in for ICU For month Wise
			$icuUtilize = $this->WardPatient->find('all',array('fields' => array('COUNT(*) AS recordcount', 'DATE_FORMAT(in_date, "%M-%Y") AS month_reports','WardPatient.in_date','WardPatient.out_date','Patient.form_received_on','Patient.discharge_date'),'conditions'=>array($toSearch,'WardPatient.ward_id'=>$icuId,'WardPatient.location_id'=>$this->Session->read('locationid')),'group' => array('month_reports')));

			// 	For yearly
			$icuCount = $this->WardPatient->find('all',array('conditions'=>array($toSearch,'WardPatient.ward_id'=>$icuId,'WardPatient.location_id'=>$this->Session->read('locationid'))));

			// Calculate Total Utilization Rate
			$totalTimeIcu = '';
			$totalTimeIpd = '';
			$monthlyTimeIcu = '';
			$monthlyTimeIpd = '';
			foreach($icuCount as $data){

				// If Patient is still in ICU
				if(empty($data['WardPatient']['out_date'])){
					$data['WardPatient']['out_date'] = date('Y-m-d h:i:s');
				}
					
				$t1 = $data['WardPatient']['in_date'];
				$t2 = $data['WardPatient']['out_date'];
					
				$totalTimeIcu += abs(strtotime($t1)-strtotime($t2));
				//Total ICU Hours
				$totalHoursIcu = round($totalTimeIcu/(60*60),2);
					
				//Calculate total IPD Hrs
				$regTime = explode(' ',$data['Patient']['form_received_on']);

				if(empty($data['Patient']['discharge_date'])){
					$data['Patient']['discharge_date'] = date('Y-m-d h:i:s');
				}
				$disDate = explode(' ',$data['Patient']['discharge_date']);
				$totalTimeIpd += abs(strtotime($data['Patient']['discharge_date'])-strtotime($data['Patient']['form_received_on']));
					
				//Total ICU Hours
				$totalHoursIpd = round($totalTimeIpd/(60*60),2);
			}

			// Total Icu Utilization
			$icuUtilizationRate = round(($totalHoursIcu / $totalHoursIpd)*100,2).'%';


			//Calculate month wise utilization rate
			// Set data for view as per record counted
			foreach($icuUtilize as $countRecordVal) {

				// If Patient is still in ICU
				if(empty($countRecordVal['WardPatient']['out_date'])){
					$countRecordVal['WardPatient']['out_date'] = date('Y-m-d h:i:s');
				}
				$t1 = $countRecordVal['WardPatient']['in_date'];
				$t2 = $countRecordVal['WardPatient']['out_date'];
					
				$monthlyTimeIcu = abs(strtotime($t1)-strtotime($t2));
				//Total ICU Hours
				$monthlyHoursIcu = round($monthlyTimeIcu/(60*60),2);
					
				//Calculate total IPD Hrs
				$regTime = explode(' ',$data['Patient']['form_received_on']);

				if(empty($countRecordVal['Patient']['discharge_date'])){
					$countRecordVal['Patient']['discharge_date'] = date('Y-m-d h:i:s');
				}
					
				$monthlyTimeIpd = abs(strtotime($countRecordVal['Patient']['discharge_date'])-strtotime($countRecordVal['Patient']['form_received_on']));
					
				//Total ICU Hours Month Wise
				$monthlyHoursIpd = round($monthlyTimeIpd/(60*60),2);
				$monthlyIcuUtilizationRate = round(($monthlyHoursIcu / $monthlyHoursIpd)*100);

				$filterRecordDateArray[] = $countRecordVal[0]['month_reports'];
				$filterRecordCountArray[$countRecordVal[0]['month_reports']] = $monthlyIcuUtilizationRate;
					
			}

			// Generate report here
			// PDF
			if($reportType == 'PDF'){
				$this->set(array('reports'=>$icuCount,'icuUtilizationRate'=>$icuUtilizationRate,'reportYear'=>$reportYear,'yaxisArray'=>$yaxisArray,'totalHoursIpd'=>$totalHoursIpd,'totalHoursIcu'=>$totalHoursIcu));
				$this->set('filterdischargeDeathDateArray', isset($filterRecordDateArray)?$filterRecordDateArray:"");
				$this->set('filterdischargeDeathCountArray', isset($filterRecordCountArray)?$filterRecordCountArray:0);
				$this->render('icu_utilization_pdf','pdf');

				//EXCEL
			} else if($reportType == 'EXCEL'){
				$this->set(array('reports'=>$icuCount,'icuUtilizationRate'=>$icuUtilizationRate,'reportYear'=>$reportYear,'yaxisArray'=>$yaxisArray,'totalHoursIpd'=>$totalHoursIpd,'totalHoursIcu'=>$totalHoursIcu));
				$this->set('filterdischargeDeathDateArray', isset($filterRecordDateArray)?$filterRecordDateArray:"");
				$this->set('filterdischargeDeathCountArray', isset($filterRecordCountArray)?$filterRecordCountArray:0);
				$this->render('icu_utilization_xls',false);
			} else if($reportType = 'GRAPH'){
				$this->set('filterRecordDateArray', isset($filterRecordDateArray)?$filterRecordDateArray:"");
				$this->set('filterRecordCountArray', isset($filterRecordCountArray)?$filterRecordCountArray:0);
				$this->set('yaxisArray', $yaxisArray);
				$this->set('reportYear',$reportYear);
				$this->set(compact('reportMonth'));
				$this->render('icu_utilization_chart'); // render View
			}
		}
	}

	/**
	@name		: admin_time_taken_initial_assessment
	@created for: To show time taken for inital assessment
	@created on : 5/3/2012
	@created By : Anand
	**/

	public function admin_time_taken_initial_assessment(){
		$this->uses = array('Patient','Location','Person');
		$this->layout = 'advance' ;
		if(!empty($this->request->data)){
			// Collect data in to the variable
			$reportYear = $this->request->data['InitialAssessmentTime']['year'];
			$reportType = $this->request->data['InitialAssessmentTime']['format'];
			$location_id = $this->Session->read('locationid');
			$reportMonth = $this->request->data['InitialAssessmentTime']['month'];
			$patientType = $this->request->data['InitialAssessmentTime']['patient_type'];
			$totalMonthlyAssessHours = '';
			$totalMonthlyAssess = '';
			$totalAssessHours = '';
			$totalAssess = '';
			$totalPatient = '';
			$totalMonthPatient = '';
			$avgTimeTaken = '';
			$avgTimeTakenMonthly = '';

			// Bind Models
			$this->Person->bindModel(array(
					'belongsTo' => array(
							'Patient'=>array('foreignKey'=>false,'conditions'=>array('Patient.patient_id = Person.patient_uid'),'fields'=>array('Person.age','Person.sex')),
							'PatientInitial' =>array('foreignKey' => false,'conditions'=>array('PatientInitial.id =Person.initial_id' )),
					)),false);


			// Create date if month is given
			if(!empty($reportMonth)){
				$countDays = cal_days_in_month(CAL_GREGORIAN, $reportMonth, $reportYear); // Days of the month selected
				$fromDate = $reportYear."-".$reportMonth."-01";
				$toDate = $reportYear."-".$reportMonth."-".$countDays;
			} else {
				$fromDate = $reportYear."-01-01"; // set first date of current year
				$toDate = $reportYear."-12-31"; // set last date of current year
			}
			// This will not change the actual from date
			$setDate = $fromDate;
			// Create Y axix array as per month
			while($toDate > $setDate) {
				$yaxisArray[date("F-Y", strtotime($setDate))] = date("F", strtotime($setDate));
				$expfromdate = explode("-", $setDate);
				$setDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}

			//Set Condition
			$condition = array('Patient.doc_ini_assess_on != ""','Patient.doc_ini_assess_end_on != ""');

			if($fromDate != '' AND $toDate != ''){
				$toSearch = array('Patient.doc_ini_assess_on <=' => $toDate, 'Patient.doc_ini_assess_on >=' => $fromDate, 'Patient.location_id'=>$this->Session->read('locationid'));
			}

			// Collect the data for initial assessment for IPD patient
		 if($patientType != 'EMERGENCY'){
		 	$patientCount = $this->Patient->find('all',array('fields' => array('COUNT(*) AS recordcount', 'DATE_FORMAT(doc_ini_assess_on, "%M-%Y") AS month_reports','Patient.doc_ini_assess_on','Patient.doc_ini_assess_end_on'),'conditions'=>array($condition,$toSearch,'Patient.admission_type'=>$patientType,'Patient.location_id'=>$this->Session->read('locationid')),'group' => array('month_reports')));
		 } else{
		 	$patientCount = $this->Patient->find('all',array('fields' => array('COUNT(*) AS recordcount', 'DATE_FORMAT(doc_ini_assess_on, "%M-%Y") AS month_reports','Patient.doc_ini_assess_on','Patient.doc_ini_assess_end_on'),'conditions'=>array($condition,$toSearch,'Patient.is_emergency'=>1,'Patient.location_id'=>$this->Session->read('locationid')),'group' => array('month_reports')));
		 }

		 if(!empty($patientCount)){
		 	// Set data for view as per record counted
		 	foreach($patientCount as $countRecordVal) {
		 		// For total Year
		 		// count patient for total year
		 		$totalPatient += $countRecordVal[0]['recordcount'];
		 		//Collect Total Monthly Assess
		 		$totalAssess += abs(strtotime($countRecordVal['Patient']['doc_ini_assess_on'])-strtotime($countRecordVal['Patient']['doc_ini_assess_end_on']));
		 		$totalAssessHours = round($totalAssess/(60*60),2);

		 		// For Monthly basis
		 		//Count patient for each month
		 		$totalMonthPatient = $countRecordVal[0]['recordcount'];
		 		//Collect monthly assess
		 		$totalMonthlyAssess = abs(strtotime($countRecordVal['Patient']['doc_ini_assess_on'])-strtotime($countRecordVal['Patient']['doc_ini_assess_end_on']));
		 		$totalMonthlyAssessHours = round($totalMonthlyAssess/(60*60),2);
		 		//Total average time taken monthly
		 		$avgTimeTakenMonthly = round(($totalMonthlyAssessHours/$totalMonthPatient),2);

		 		$filterRecordDateArray[] = $countRecordVal[0]['month_reports'];
		 		$filterRecordCountArray[$countRecordVal[0]['month_reports']] = $avgTimeTakenMonthly;
		 	}
		 	 
		 	// Average time taken for each Patient
		 	$avgTimeTaken = round(($totalAssessHours/$totalPatient),2);
		 }
		 // Generate report here
			// PDF
			if($reportType == 'PDF'){
				$this->set(array('reportYear'=>$reportYear,'yaxisArray'=>$yaxisArray,'avgTimeTaken'=>$avgTimeTaken,'avgTimeTakenMonthly'=>$avgTimeTakenMonthly,'patientType'=>$patientType));
				$this->set('filterdischargeDeathDateArray', isset($filterRecordDateArray)?$filterRecordDateArray:"");
				$this->set('filterdischargeDeathCountArray', isset($filterRecordCountArray)?$filterRecordCountArray:0);
				$this->render('time_taken_initial_assessment_pdf','pdf');

				//EXCEL
			} else if($reportType == 'EXCEL'){
				$this->set(array('reportYear'=>$reportYear,'yaxisArray'=>$yaxisArray,'avgTimeTaken'=>$avgTimeTaken,'avgTimeTakenMonthly'=>$avgTimeTakenMonthly,'patientType'=>$patientType));
				$this->set('filterdischargeDeathDateArray', isset($filterRecordDateArray)?$filterRecordDateArray:"");
				$this->set('filterdischargeDeathCountArray', isset($filterRecordCountArray)?$filterRecordCountArray:0);
				$this->render('time_taken_initial_assessment_xls',false);

				//GRAPH
			} else if($reportType = 'GRAPH'){
				$this->set('filterRecordDateArray', isset($filterRecordDateArray)?$filterRecordDateArray:"");
				$this->set('filterRecordCountArray', isset($filterRecordCountArray)?$filterRecordCountArray:0);
				$this->set('yaxisArray', $yaxisArray);
				$this->set('reportYear',$reportYear);
				$this->set(compact('reportMonth'));
				$this->set('patientType',$patientType);
				$this->render('time_taken_initial_assessment_chart'); // render View
			}

		}
	}

	/**
	@name		: admin_time_taken_initial_assessment
	@created for: To show time taken for inital assessment
	@created on : 5/3/2012
	@created By : Anand
	**/

	public function admin_perticular_incident_report(){

		$this->uses = array('Patient','Location','Person','Incident');
		$this->layout = 'advance' ;
		if(!empty($this->request->data)){
			$reportYear = $this->request->data['IncidentReport']['year'];
			$reportType = $this->request->data['IncidentReport']['format'];
			$location_id = $this->Session->read('locationid');
			$reportMonth = $this->request->data['IncidentReport']['month'];
			$incidentType = $this->request->data['IncidentReport']['incident'];

			// Bind Models
			$this->Incident->bindModel(array(
					'belongsTo' => array(
							'Patient'=>array('foreignKey'=>false,'conditions'=>array('Incident.patient_id = Patient.id'),'fields'=>array('Patient.lookup_name')),

							'Person'=>array('foreignKey'=>false,'conditions'=>array('Patient.patient_id = Person.patient_uid'),'fields'=>array('Person.age','Person.sex')),
							'PatientInitial' =>array('foreignKey' => false,'conditions'=>array('PatientInitial.id =Person.initial_id' )),
					)),false);

			// Create date if month is given
			if(!empty($reportMonth)){
				$countDays = cal_days_in_month(CAL_GREGORIAN, $reportMonth, $reportYear); // Days of the month selected
				$fromDate = $reportYear."-".$reportMonth."-01";
				$toDate = $reportYear."-".$reportMonth."-".$countDays;
			} else {
				$fromDate = $reportYear."-01-01"; // set first date of current year
				$toDate = $reportYear."-12-31"; // set last date of current year
			}

			//IF the incident is medication error Set Condition
			if($incidentType == 'medication error'){
				$condition = array('Incident.medication_error != ""');
			} else {
				$condition = array('Incident.analysis_option'=>$incidentType);
			}

			$field = array('Incident.medication_error','Incident.analysis_option','Incident.incident_date','Incident.incident_time','Person.age','Person.sex','PatientInitial.name','Patient.lookup_name','Patient.patient_id','Patient.admission_id','Patient.admission_type','Patient.form_received_on','Patient.form_completed_on');

			if($fromDate != '' AND $toDate != ''){
				$toSearch = array('Incident.incident_date <=' => $toDate, 'Incident.incident_date >=' => $fromDate, 'Incident.location_id'=>$this->Session->read('locationid'));
			}

			$getRecord = $this->Incident->find('all',array('conditions'=>array($condition,$toSearch),'fields'=>$field));

			// Generate report here
			// PDF
			if($reportType == 'PDF'){
				$this->set(array('record'=>$getRecord,'incidentType'=>$incidentType, 'reportYear'=>$reportYear));
				$this->render('perticular_incident_report_pdf','pdf');

				//EXCEL
			} else if($reportType == 'EXCEL'){
				$this->set(array('record'=>$getRecord,'incidentType'=>$incidentType, 'reportYear'=>$reportYear));
				$this->render('perticular_incident_report_xls',false);

				//GRAPH
				/*} else if($reportType = 'GRAPH'){
				 $this->set('filterRecordDateArray', isset($filterRecordDateArray)?$filterRecordDateArray:"");
				$this->set('filterRecordCountArray', isset($filterRecordCountArray)?$filterRecordCountArray:0);
				$this->set('yaxisArray', $yaxisArray);
				$this->set('reportYear',$reportYear);
				$this->set(compact('reportMonth'));
				$this->set('patientType',$patientType);
				$this->render('time_taken_initial_assessment_chart'); // render View*/
			}
			//pr($getRecord);exit;
		}

	}

	/**
	@name		: admin_time_taken_for_discharge
	@created for: To show time taken for inital assessment
	@created on : 5/8/2012
	@created By : Anand
	**/

	public function admin_time_taken_for_discharge(){
			
		$this->uses = array('DischargeSummary','Patient','Person','Ward', 'FinalBilling');
		$this->layout = 'advance' ;
		if(!empty($this->request->data)){
			// Collect data in to the variable
			$reportYear = $this->request->data['DischargeSummary']['year'];
			$reportType = $this->request->data['DischargeSummary']['format'];
			$location_id = $this->Session->read('locationid');
			$reportMonth = $this->request->data['DischargeSummary']['month'];
			$totalPatient = '';
			$totalDischarge = '';
			$totalDischargeTime = '';
			$avgTimeTaken = '';
			$totalAvg = '';


			// Bind Models
			$this->DischargeSummary->bindModel(array(
					'belongsTo' => array(
							'Patient'=>array('foreignKey'=>false,'conditions'=>array('DischargeSummary.patient_id = Patient.id'),'fields'=>array('Patient.lookup_name','Patient.patient_id','Patient.admission_id','Patient.form_received_on','Patient.form_completed_on')),
							'FinalBilling'=>array('foreignKey'=>false,'conditions'=>array('DischargeSummary.patient_id = FinalBilling.patient_id'),'fields'=>array('FinalBilling.discharge_date')),
							'Person'=>array('foreignKey'=>false,'conditions'=>array('Patient.patient_id = Person.patient_uid'),'fields'=>array('Person.age','Person.sex')),
							'PatientInitial' =>array('foreignKey' => false,'conditions'=>array('PatientInitial.id =Person.initial_id' )),
					)),false);

			// Create date if month is given
			if(!empty($reportMonth)){
				$countDays = cal_days_in_month(CAL_GREGORIAN, $reportMonth, $reportYear); // Days of the month selected
				$fromDate = $reportYear."-".$reportMonth."-01";
				$toDate = $reportYear."-".$reportMonth."-".$countDays;
			} else {
				$fromDate = $reportYear."-01-01"; // set first date of current year
				$toDate = $reportYear."-12-31"; // set last date of current year
			}

			if($fromDate != '' AND $toDate != ''){
				$toSearch = array('DischargeSummary.review_on <=' => $toDate, 'DischargeSummary.review_on >=' => $fromDate);
			}

			// Collect the data for initial assessment for IPD patient
			$patientCount = $this->DischargeSummary->find('all',array('conditions'=>array($toSearch,'FinalBilling.location_id'=>$this->Session->read('locationid'),'FinalBilling.discharge_date <>'=>null)));

			$totalPatient = count($patientCount);

			// Calculate total time taken to discharge
			foreach($patientCount as $patient){
				$totalDischarge = abs(strtotime($patient['FinalBilling']['discharge_date'])-strtotime($patient['DischargeSummary']['review_on']));
				$totalDischargeTime += round($totalDischarge/60,2);
			}

			// Average time taken to each patient Formula: totalHours/totalPatient * 100%
			if($totalPatient != 0){
				$totalAvg = ($totalDischargeTime/$totalPatient)* 100;
				$avgTimeTaken = round($totalAvg / 60, 2);
			}
			//pr($avgTimeTaken);exit;
			if($reportType == 'PDF'){
				$this->set(array('record'=>$patientCount,'avgTimeTaken'=>$avgTimeTaken,'totalDischargeTime'=>$totalDischargeTime,'reportYear' => $reportYear));
				$this->render('time_taken_for_discharge_pdf','pdf');

				//EXCEL
			} else if($reportType == 'EXCEL'){
				$this->set(array('record'=>$patientCount,'avgTimeTaken'=>$avgTimeTaken,'totalDischargeTime'=>$totalDischargeTime,'reportYear' => $reportYear));
				$this->render('time_taken_for_discharge_xls','');
			}

		}

	}

	/**
	 *
	 * reports regarding to patient readmitted to ICU withing 48 hrs
	 *
	 **/

	public function admin_patient_readmitted_to_icu() {

		$this->set('title_for_layout', __('Patient Readmitted To ICU', true));
		$this->uses = array('WardPatient');
		$this->layout = 'advance' ;
		if($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$reportMonth = $this->request->data['reportMonth'];
			// if month is selected //
			if(!empty($reportMonth)) {
				$startDate=1;
				$countDays = cal_days_in_month(CAL_GREGORIAN, $reportMonth, $reportYear);
				while($startDate <= $countDays) {
					$dateVal = $reportYear."-".$reportMonth."-".$startDate;
					$yaxisIndex = date("d-F", strtotime($dateVal));
					$yaxisArray[$yaxisIndex] = date("d-F-Y", strtotime($dateVal));
					$startDate++;
				}
				$this->monthly_readmitted_to_icu($yaxisArray, $reportYear);
				$this->set('yaxisArray', $yaxisArray);

				// if month is not selected //
			} else {
				$fromDate = $reportYear."-01-01"; // set first date of current year
				$toDate = $reportYear."-12-31"; // set last date of current year
				$this->yearly_readmitted_to_icu($fromDate, $toDate);
				while($toDate > $fromDate) {
					$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
					$expfromdate = explode("-", $fromDate);
					$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
				}
				$this->set('yaxisArray', $yaxisArray);

			}
		} else {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31"; // set last date of current year
			$this->yearly_readmitted_to_icu($fromDate, $toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		}

		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
		$this->set('reportMonth', isset($this->request->data['reportMonth'])?$this->request->data['reportMonth']:"");
	}

	/**
	 *
	 * report regarding to  patient readmitted to icu within 48 hrs (for monthly)
	 *
	 **/

	private function monthly_readmitted_to_icu($yaxisArray=NULL, $reportYear=NULL) {
		$assignIndex = array_keys($yaxisArray);
		$fromDate = date("Y-m-d", strtotime($yaxisArray[$assignIndex[0]]."-".$reportYear));
		$toDate = date("Y-m-d", strtotime($yaxisArray[$assignIndex[count($yaxisArray)-1]]."-".$reportYear));
		$this->WardPatient->bindModel(array('belongsTo'=>array('Ward'=>array('foreignKey'=>false,'conditons'=>array('Ward.name'=>Configure::read('report_icu_name'))))));
		$monthlyPatientReadmittedToIcuCount = $this->WardPatient->find('all', array('fields' => array('COUNT(*) AS patientcount', 'DATE_FORMAT(WardPatient.create_time, "%d-%M") AS day_reports', 'DATE_FORMAT(WardPatient.create_time, "%Y-%m-%d") AS created_time', 'WardPatient.patient_id', 'WardPatient.is_discharge', 'WardPatient.location_id', 'WardPatient.id'), 'conditions' => array('WardPatient.readmitted' => 1, 'WardPatient.readmitted_timediff <=' => 48, 'WardPatient.location_id' => $this->Session->read('locationid'), 'WardPatient.is_discharge' => 0), 'group' => array("day_reports  HAVING  created_time BETWEEN '{$fromDate}' AND '{$toDate}'")));
		foreach($monthlyPatientReadmittedToIcuCount as $monthlyPatientReadmittedToIcuCountVal) {
			$filterPatientReadmittedDateArray[] = $monthlyPatientReadmittedToIcuCountVal[0]['day_reports'];
			$filterPatientReadmittedCountArray[$monthlyPatientReadmittedToIcuCountVal[0]['day_reports']] = $monthlyPatientReadmittedToIcuCountVal[0]['patientcount'];
		}
		$this->set('filterPatientReadmittedDateArray', isset($filterPatientReadmittedDateArray)?$filterPatientReadmittedDateArray:"");
		$this->set('filterPatientReadmittedCountArray', isset($filterPatientReadmittedCountArray)?$filterPatientReadmittedCountArray:0);
	}

	/**
	 *
	 * report regarding to  patient readmitted to icu within 48 hrs (for yearly)
	 *
	 **/

	private function yearly_readmitted_to_icu($fromDate=NULL, $toDate=NULL) {
		$this->WardPatient->bindModel(array('belongsTo'=>array('Ward'=>array('foreignKey'=>'ward_id'))));
		$yearlyPatientReadmittedToIcuCount = $this->WardPatient->find('all', array('fields' => array('COUNT(*) AS patientcount', 'DATE_FORMAT(WardPatient.create_time, "%M-%Y") AS month_reports', 'DATE_FORMAT(WardPatient.create_time, "%Y-%m-%d") AS created_time', 'WardPatient.patient_id', 'WardPatient.is_discharge', 'WardPatient.location_id', 'WardPatient.id'), 'conditions' => array('WardPatient.readmitted' => 1, 'WardPatient.readmitted_timediff <=' => 48, 'WardPatient.location_id' => $this->Session->read('locationid'), 'Ward.name' =>Configure::read('report_icu_name'), 'WardPatient.is_discharge' => 0), 'group' => array("month_reports  HAVING  created_time BETWEEN '{$fromDate}' AND '{$toDate}'")));

		foreach($yearlyPatientReadmittedToIcuCount as $yearlyPatientReadmittedToIcuCountVal) {
			$filterPatientReadmittedDateArray[] = $yearlyPatientReadmittedToIcuCountVal[0]['month_reports'];
			$filterPatientReadmittedCountArray[$yearlyPatientReadmittedToIcuCountVal[0]['month_reports']] = $yearlyPatientReadmittedToIcuCountVal[0]['patientcount'];
		}
		//debug($filterPatientReadmittedDateArray);
		$this->set('filterPatientReadmittedDateArray', isset($filterPatientReadmittedDateArray)?$filterPatientReadmittedDateArray:"");
		$this->set('filterPatientReadmittedCountArray', isset($filterPatientReadmittedCountArray)?$filterPatientReadmittedCountArray:0);
	}

	/**
	 * chart report regarding to patient readmitted to ICU withing 48 hrs
	 *
	 */


	public function admin_patient_readmitted_to_icu_chart() {
		$this->set('title_for_layout', __('Patient Readmitted To ICU Chart', true));
		$this->layout = 'advance' ;
		$this->uses = array('WardPatient');
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->yearly_readmitted_to_icu($fromDate, $toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
		}
		$this->set('yaxisArray', $yaxisArray);
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
	}


	/**
	 * xls report regarding to patient readmitted to ICU withing 48 hrs
	 *
	 */

	public function admin_patient_readmitted_to_icu_xls() {
		$this->uses = array('WardPatient');
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$reportMonth = $this->request->data['reportMonth'];
			// if month is selected //
			if(!empty($reportMonth)) {
				$startDate=1;
				$countDays = cal_days_in_month(CAL_GREGORIAN, $reportMonth, $reportYear);
				while($startDate <= $countDays) {
					$dateVal = $reportYear."-".$reportMonth."-".$startDate;
					$yaxisIndex = date("d-F", strtotime($dateVal));
					$yaxisArray[$yaxisIndex] = date("d-F-Y", strtotime($dateVal));
					$startDate++;
				}
				$this->monthly_readmitted_to_icu($yaxisArray, $reportYear);
				$this->set('yaxisArray', $yaxisArray);

				// if month is not selected //
			} else {
				$fromDate = $reportYear."-01-01"; // set first date of current year
				$toDate = $reportYear."-12-31"; // set last date of current year
				$this->yearly_readmitted_to_icu($fromDate, $toDate);
				while($toDate > $fromDate) {
					$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
					$expfromdate = explode("-", $fromDate);
					$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
				}
				$this->set('yaxisArray', $yaxisArray);
			}
		}
		$this->set('yaxisArray', $yaxisArray);
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
		$this->set('reportMonth', isset($reportMonth)?$reportMonth:"");
		$this->layout = false;
	}

	//BOF pankaj
	function admin_tor($is_chart=null){
		$this->uses = array('FinalBilling','Bed','Patient');
		$this->layout = 'advance' ;
		if(!empty($this->request->data)){
			//BOF logic
			$reportType = $this->request->data['Report']['format'];
			$this->Bed->bindModel(array(
					'belongsTo' => array('Room'=>array('foreignKey'=>'room_id','type'=>'inner'))),false);

			$bedData = $this->Bed->Find('count',array('conditions'=>array('Room.location_id'=>$this->Session->read('locationid'))));

			$dischargeData = $this->FinalBilling->find('all',array('fields'=>array('monthname(discharge_date) as month,year(discharge_date) as year ,count(*) as count'),
					'conditions'=>array("reason_of_discharge != ''",'year(discharge_date)'=>$this->request->data['Report']['year'],'FinalBilling.location_id'=>$this->Session->read('locationid')),'group'=>array('MONTH( discharge_date ) , YEAR( discharge_date )')));


			$fullMonth =array('January','February','March','April','May','June','July','August','September','October','November','December');
			for($i=0;$i<12;$i++){
				foreach($dischargeData as $monKey=>$mon){
					if($mon[0]['month']==$fullMonth[$i]){
						$mainArr[$fullMonth[$i]]= array('tor'=>round($mon[0]['count']/$bedData,2),'dischargeCount'=>$mon[0]['count']);
					}elseif(!isset($mainArr[$fullMonth[$i]])){
						$mainArr[$fullMonth[$i]]= array('tor'=>0,'dischargeCount'=>0);
					}
				}
			}

			$this->set(array('bedCount'=>$bedData,'dischargeData'=>$dischargeData,'data'=>$mainArr));
			$this->set('reportYear', isset($this->request->data['Report']['year'])?$this->request->data['Report']['year']:date("Y"));
			//EOF logic

			if($is_chart=='chart'){
				$this->render('tor_chart');
			}else{
				if($reportType == 'PDF'){

					$this->render('tor_pdf','pdf');
					//EXCEL
				} else if($reportType == 'EXCEL'){

					$this->render('tor_excel',false);
				}
			}
		}
		//retrive the last yr in db to maintin year dropdown
		$this->Patient->recursive = -1 ;
		$last = $this->Patient->find('first',array('fields'=>array('create_time'),'order'=>'create_time desc'));
		$this->set('endyear',date('Y',strtotime($last['Patient']['create_time']))) ;
	}

	// x_ray_utilization_report
	public function admin_x_ray_utilization_report(){
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {
			$this->uses = array('RadiologyTestOrder');
			$fromMonth = $this->request->data('fromMonth');
			$toMonth = $this->request->data('toMonth');
			pr(date("t", mktime (0,0,0,2,1,2012)));exit;


		}
	}

	//function to generate reports of total no of complaints,resolved complaints and time taken for complaints resolution
	public function admin_complaints($is_chart=null){
		$this->uses = array('Complaint','Patient');
		$this->layout = 'advance' ;
		if(!empty($this->request->data)){
			//BOF logic
			$reportType = $this->request->data['Report']['format'];

			$complaintData = $this->Complaint->find('all',array('fields'=>array('monthname(date) as month  ,count(*) as count'),
					'conditions'=>array('Complaint.location_id'=>$this->Session->read('locationid'),'year(date)'=>$this->request->data['Report']['year']),
					'group'=>array('MONTH(date)')));
			$complaintResolvedData = $this->Complaint->find('all',array('fields'=>array('monthname(date) as month  ,count(*) as count'),
					'conditions'=>array('Complaint.location_id'=>$this->Session->read('locationid'),'Complaint.resolved'=>1,'year(date)'=>$this->request->data['Report']['year']),
					'group'=>array('MONTH(date)')));
			$timeTakenData = $this->Complaint->find('all',array('fields'=>array('monthname(date) as month  ,resolution_time_taken'),
					'conditions'=>array('Complaint.location_id'=>$this->Session->read('locationid'),'Complaint.resolved'=>1,'resolution_time_taken != "" ','year(date)'=>$this->request->data['Report']['year'])));
			$convertedData=array();
			foreach($timeTakenData as $timeData){
				$stringToTime= $timeData['Complaint']['resolution_time_taken'];
				$convertedData[$timeData[0]['month']][] = $stringToTime;
			}
			$this->set(array('complaintResolvedData'=>$complaintResolvedData,'timeTaken'=>$convertedData,'complaintData'=>$complaintData,'year'=>$this->request->data['Report']['year']));
			//EOF logic

			if($is_chart=='chart'){
				$type = 'chart';
			}else{
				if($reportType == 'PDF'){
					$type = 'pdf';
					$this->layout= 'pdf';
					//EXCEL
				} else if($reportType == 'EXCEL'){
					$type = 'excel';
					$this->layout =false ;
					$this->render('complaint_combine',false);
				}
			}
			$this->set('type',$type);
			$this->render('complaint_combine');
		}
		//retrive the last yr in db to maintin year dropdown
		$this->Patient->recursive = -1 ;
		$last = $this->Patient->find('first',array('fields'=>array('create_time'),'order'=>'create_time desc'));
		$this->set('endyear',date('Y',strtotime($last['Patient']['create_time']))) ;
	}
	//EOF pankaj


	/**
	 * ssi rate reports
	 *
	 */

	public function admin_ssirate() {
		$this->set('title_for_layout', __('SSI Rate', true));
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->ssiratereports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		} else {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31"; // set last date of current year
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
			$this->ssiratereports();

		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
	}


	/**
	 * ssi rate reports query
	 *
	 */

	private function ssiratereports($fromDate=null,$toDate=null) {
		$this->uses = array('NosocomialInfection', 'OptAppointment');
		$this->layout = 'advance' ;
		if(empty($fromDate) && empty($toDate)) {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31";
		}
		// number of surgical site infections count //
		$ssiCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS ssicount', 'DATE_FORMAT(submit_date, "%M-%Y") AS month_reports', 'NosocomialInfection.surgical_site_infection', 'submit_date', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.surgical_site_infection' => 'Yes','NosocomialInfection.submit_date BETWEEN ? AND ?' => array($fromDate, $toDate)), 'group' => array('surgical_site_infection', 'month_reports')));
		foreach($ssiCount as $ssiCountVal) {
			$filterSsiDateArray[] = $ssiCountVal[0]['month_reports'];
			$filterSsiCountArray[$ssiCountVal[0]['month_reports']] = $ssiCountVal[0]['ssicount'];
		}
		$this->set('filterSsiDateArray', isset($filterSsiDateArray)?$filterSsiDateArray:"");
		$this->set('filterSsiCountArray', isset($filterSsiCountArray)?$filterSsiCountArray:0);

		// number surgical surgery performed //
		$surgicalPerformCount = $this->OptAppointment->find('all', array('fields' => array('COUNT(*) AS spcount', 'DATE_FORMAT(schedule_date, "%M-%Y") AS month_reports', 'OptAppointment.procedure_complete', 'OptAppointment.is_deleted', 'OptAppointment.schedule_date', 'OptAppointment.location_id', 'OptAppointment.id'), 'conditions' => array('OptAppointment.location_id' => $this->Session->read('locationid'), 'OptAppointment.procedure_complete' => 1, 'OptAppointment.is_deleted' => 0,'OptAppointment.schedule_date BETWEEN ? AND ?' => array($fromDate, $toDate)), 'group' => array('month_reports'), 'recursive' => -1));
		foreach($surgicalPerformCount as $surgicalPerformCountVal) {
			$filterSurgicalPerformDateArray[] = $surgicalPerformCountVal[0]['month_reports'];
			$filterSurgicalPerformCountArray[$surgicalPerformCountVal[0]['month_reports']] = $surgicalPerformCountVal[0]['spcount'];
		}
		$this->set('filterSurgicalPerformDateArray', isset($filterSurgicalPerformDateArray)?$filterSurgicalPerformDateArray:"");
		$this->set('filterSurgicalPerformCountArray', isset($filterSurgicalPerformCountArray)?$filterSurgicalPerformCountArray:0);

	}

	/**
	 * ssi rate chart
	 *
	 */


	public function admin_ssirate_chart() {
		$this->set('title_for_layout', __('SSI Rate Chart', true));
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->ssiratereports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
		}

		$this->set('yaxisArray', $yaxisArray);
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
	}


	/**
	 * ssi rate xls reports
	 *
	 */

	public function admin_ssirate_xls() {
		$this->set('title_for_layout', __('SSI Rate XLS Report', true));
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->ssiratereports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
		$this->layout = false;
	}

	/**
	 * uti rate reports
	 *
	 */

	public function admin_utirate() {
		$this->set('title_for_layout', __('UTI Rate', true));
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->utiratereports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		} else {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31"; // set last date of current year
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
			$this->utiratereports();

		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
	}


	/**
	 * uti rate reports query
	 *
	 */

	private function utiratereports($fromDate=null,$toDate=null) {
		$this->uses = array('NosocomialInfection');
		$this->layout = 'advance' ;
		if(empty($fromDate) && empty($toDate)) {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31";
		}
		// count of uti infected cases //
		$utiCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS uticount', 'DATE_FORMAT(submit_date, "%M-%Y") AS month_reports', 'NosocomialInfection.urinary_tract_infection', 'submit_date', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.urinary_tract_infection' => 'Yes','NosocomialInfection.submit_date BETWEEN ? AND ?' => array($fromDate, $toDate)), 'group' => array('urinary_tract_infection', 'month_reports')));
		foreach($utiCount as $utiCountVal) {
			$filterUtiDateArray[] = $utiCountVal[0]['month_reports'];
			$filterUtiCountArray[$utiCountVal[0]['month_reports']] = $utiCountVal[0]['uticount'];
		}
		$this->set('filterUtiDateArray', isset($filterUtiDateArray)?$filterUtiDateArray:"");
		$this->set('filterUtiCountArray', isset($filterUtiCountArray)?$filterUtiCountArray:0);

		// count total uti days //
		$utiTotalCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS uticount', 'DATE_FORMAT(submit_date, "%M-%Y") AS month_reports', 'NosocomialInfection.urinary_tract_infection', 'submit_date', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.urinary_tract_infection' => array('Yes', 'No'),'NosocomialInfection.submit_date BETWEEN ? AND ?' => array($fromDate, $toDate)), 'group' => array('month_reports')));
		foreach($utiTotalCount as $utiTotalCountVal) {
			$filterUtiTotalDateArray[] = $utiTotalCountVal[0]['month_reports'];
			$filterUtiTotalCountArray[$utiTotalCountVal[0]['month_reports']] = $utiTotalCountVal[0]['uticount'];
		}
		$this->set('filterUtiTotalDateArray', isset($filterUtiTotalDateArray)?$filterUtiTotalDateArray:"");
		$this->set('filterUtiTotalCountArray', isset($filterUtiTotalCountArray)?$filterUtiTotalCountArray:0);

	}

	/**
	 * uti rate chart
	 *
	 */


	public function admin_utirate_chart() {
		$this->set('title_for_layout', __('SSI Rate Chart', true));
		$this->layout = 'advance' ;
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->utiratereports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
		}

		$this->set('yaxisArray', $yaxisArray);
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
	}


	/**
	 * uti rate xls reports
	 *
	 */

	public function admin_utirate_xls() {
		$this->set('title_for_layout', __('SSI Rate XLS Report', true));
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->utiratereports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
		$this->layout = false;
	}

	/**
	 * vap rate reports
	 *
	 */

	public function admin_vaprate() {
		$this->set('title_for_layout', __('VAP Rate', true));
		$this->layout ='advance';
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->vapratereports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		} else {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31"; // set last date of current year
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
			$this->vapratereports();

		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
	}


	/**
	 * vap rate reports query
	 *
	 */

	private function vapratereports($fromDate=null,$toDate=null) {
		$this->uses = array('NosocomialInfection');
		if(empty($fromDate) && empty($toDate)) {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31";
		}
		// count of vap cases //
		$vapCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS vapcount', 'DATE_FORMAT(submit_date, "%M-%Y") AS month_reports', 'NosocomialInfection.ventilator_associated_pneumonia', 'submit_date', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.ventilator_associated_pneumonia' => 'Yes','NosocomialInfection.submit_date BETWEEN ? AND ?' => array($fromDate, $toDate)), 'group' => array('ventilator_associated_pneumonia', 'month_reports')));
		foreach($vapCount as $vapCountVal) {
			$filterVapDateArray[] = $vapCountVal[0]['month_reports'];
			$filterVapCountArray[$vapCountVal[0]['month_reports']] = $vapCountVal[0]['vapcount'];
		}
		$this->set('filterVapDateArray', isset($filterVapDateArray)?$filterVapDateArray:"");
		$this->set('filterVapCountArray', isset($filterVapCountArray)?$filterVapCountArray:0);

		// count total vap days //
		$vapTotalCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS vapcount', 'DATE_FORMAT(submit_date, "%M-%Y") AS month_reports', 'NosocomialInfection.ventilator_associated_pneumonia', 'submit_date', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.ventilator_associated_pneumonia' => array('Yes', 'No'),'NosocomialInfection.submit_date BETWEEN ? AND ?' => array($fromDate, $toDate)), 'group' => array('month_reports')));
		foreach($vapTotalCount as $vapTotalCountVal) {
			$filterVapTotalDateArray[] = $vapTotalCountVal[0]['month_reports'];
			$filterVapTotalCountArray[$vapTotalCountVal[0]['month_reports']] = $vapTotalCountVal[0]['vapcount'];
		}
		$this->set('filterVapTotalDateArray', isset($filterVapTotalDateArray)?$filterVapTotalDateArray:"");
		$this->set('filterVapTotalCountArray', isset($filterVapTotalCountArray)?$filterVapTotalCountArray:0);

	}

	/**
	 * vap rate chart
	 *
	 */


	public function admin_vaprate_chart() {
		$this->set('title_for_layout', __('VAP Rate Chart', true));
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->vapratereports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
		}

		$this->set('yaxisArray', $yaxisArray);
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
	}


	/**
	 * vap rate xls reports
	 *
	 */

	public function admin_vaprate_xls() {
		$this->set('title_for_layout', __('VAP Rate XLS Report', true));
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->vapratereports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
		$this->layout = false;
	}

	/**
	 * bsi rate reports
	 *
	 */

	public function admin_bsirate() {
		$this->set('title_for_layout', __('BSI Rate', true));
		$this->layout ='advance';
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->bsiratereports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		} else {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31"; // set last date of current year
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
			$this->bsiratereports();

		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
	}


	/**
	 * bsi rate reports query
	 *
	 */

	private function bsiratereports($fromDate=null,$toDate=null) {
		$this->uses = array('NosocomialInfection');
		if(empty($fromDate) && empty($toDate)) {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31";
		}

		// count of bsi cases //
		$bsiCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS bsicount', 'DATE_FORMAT(submit_date, "%M-%Y") AS month_reports', 'NosocomialInfection.clabsi', 'submit_date', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.clabsi' => 'Yes','NosocomialInfection.submit_date BETWEEN ? AND ?' => array($fromDate, $toDate)), 'group' => array('clabsi', 'month_reports')));
		foreach($bsiCount as $bsiCountVal) {
			$filterBsiDateArray[] = $bsiCountVal[0]['month_reports'];
			$filterBsiCountArray[$bsiCountVal[0]['month_reports']] = $bsiCountVal[0]['bsicount'];
		}
		$this->set('filterBsiDateArray', isset($filterBsiDateArray)?$filterBsiDateArray:"");
		$this->set('filterBsiCountArray', isset($filterBsiCountArray)?$filterBsiCountArray:0);
		// count total bsi days //
		$bsiTotalCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS bsicount', 'DATE_FORMAT(submit_date, "%M-%Y") AS month_reports', 'NosocomialInfection.clabsi', 'submit_date', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.clabsi' => array('Yes', 'No'),'NosocomialInfection.submit_date BETWEEN ? AND ?' => array($fromDate, $toDate)), 'group' => array('month_reports')));
		foreach($bsiTotalCount as $bsiTotalCountVal) {
			$filterBsiTotalDateArray[] = $bsiTotalCountVal[0]['month_reports'];
			$filterBsiTotalCountArray[$bsiTotalCountVal[0]['month_reports']] = $bsiTotalCountVal[0]['bsicount'];
		}
		$this->set('filterBsiTotalDateArray', isset($filterBsiTotalDateArray)?$filterBsiTotalDateArray:"");
		$this->set('filterBsiTotalCountArray', isset($filterBsiTotalCountArray)?$filterBsiTotalCountArray:0);

	}

	/**
	 * bsi rate chart
	 *
	 */


	public function admin_bsirate_chart() {
		$this->set('title_for_layout', __('BSI Rate Chart', true));
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->bsiratereports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
		}

		$this->set('yaxisArray', $yaxisArray);
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
	}


	/**
	 * bsi rate xls reports
	 *
	 */

	public function admin_bsirate_xls() {
		$this->set('title_for_layout', __('BSI Rate XLS Report', true));
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->bsiratereports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
		$this->layout = false;
	}

	/**
	 * thrombophlebitis rate reports
	 *
	 */

	public function admin_thrombophlebitisrate() {
		$this->set('title_for_layout', __('Thrombophlebitis Rate', true));
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->thrombophlebitisratereports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		} else {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31"; // set last date of current year
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
			$this->thrombophlebitisratereports();

		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
	}


	/**
	 * thrombophlebitis rate reports query
	 *
	 */

	private function thrombophlebitisratereports($fromDate=null,$toDate=null) {
		$this->uses = array('NosocomialInfection');
		$this->layout ='advance';
		if(empty($fromDate) && empty($toDate)) {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31";
		}

		// count of thrombophlebitis cases //
		$thromboCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS thrombocount', 'DATE_FORMAT(submit_date, "%M-%Y") AS month_reports', 'NosocomialInfection.thrombophlebitis', 'submit_date', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.thrombophlebitis' => 'Yes','NosocomialInfection.submit_date BETWEEN ? AND ?' => array($fromDate, $toDate)), 'group' => array('thrombophlebitis', 'month_reports')));
		foreach($thromboCount as $thromboCountVal) {
			$filterThromboDateArray[] = $thromboCountVal[0]['month_reports'];
			$filterThromboCountArray[$thromboCountVal[0]['month_reports']] = $thromboCountVal[0]['thrombocount'];
		}
		$this->set('filterThromboDateArray', isset($filterThromboDateArray)?$filterThromboDateArray:"");
		$this->set('filterThromboCountArray', isset($filterThromboCountArray)?$filterThromboCountArray:0);

		// count total thrombophlebitis days //
		$thromboTotalCount = $this->NosocomialInfection->find('all', array('fields' => array('COUNT(*) AS thrombocount', 'DATE_FORMAT(submit_date, "%M-%Y") AS month_reports', 'NosocomialInfection.thrombophlebitis', 'submit_date', 'NosocomialInfection.location_id', 'NosocomialInfection.id'), 'conditions' => array('NosocomialInfection.location_id' => $this->Session->read('locationid'), 'NosocomialInfection.thrombophlebitis' => array('Yes', 'No'),'NosocomialInfection.submit_date BETWEEN ? AND ?' => array($fromDate, $toDate)), 'group' => array('month_reports')));
		foreach($thromboTotalCount as $thromboTotalCountVal) {
			$filterThromboTotalDateArray[] = $thromboTotalCountVal[0]['month_reports'];
			$filterThromboTotalCountArray[$thromboTotalCountVal[0]['month_reports']] = $thromboTotalCountVal[0]['thrombocount'];
		}
		$this->set('filterThromboTotalDateArray', isset($filterThromboTotalDateArray)?$filterThromboTotalDateArray:"");
		$this->set('filterThromboTotalCountArray', isset($filterThromboTotalCountArray)?$filterThromboTotalCountArray:0);
	}

	/**
	 * thrombophlebitis rate chart
	 *
	 */


	public function admin_thrombophlebitisrate_chart() {
		$this->set('title_for_layout', __('Thrombophlebitis Rate Chart', true));
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->thrombophlebitisratereports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
		}

		$this->set('yaxisArray', $yaxisArray);
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
	}


	/**
	 * thrombophlebitis rate xls reports
	 *
	 */

	public function admin_thrombophlebitisrate_xls() {
		$this->set('title_for_layout', __('Thrombophlebitis Rate XLS Report', true));
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->thrombophlebitisratereports($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
		$this->layout = false;
	}

	/**
	 *
	 * total admission report by reference doctor
	 *
	 **/
	public function admin_admission_report_by_reference_doctor() {
		$this->uses = array('Patient','Location','Person','Consultant','User','DoctorProfile','ReffererDoctor');
		//$this->layout ='Advance';
		if($this->request->data){
			// pr($this->request->data);exit;
			// Collect required values in variables
			$format = $this->request->data['PatientAdmissionReport']['format'];
			$from = $this->request->data['PatientAdmissionReport']['from'];
			$to =   $this->request->data['PatientAdmissionReport']['to'];
			$reference_doctor = $this->request->data['PatientAdmissionReport']['reference_doctor'];
			$reference_category = $this->request->data['known_fam_physician'];
			$admission_type = $this->request->data['admission_type'];
			$ipd_patient_status = $this->request->data['ipd_patient_status'];
			$opd_patient_status = $this->request->data['opd_patient_status'];
			$skip_registration = $this->request->data['skip_registration'];

			$record = '';
			//BOF pankaj code
			$this->Patient->bindModel(array(
					'belongsTo' => array(
							'Location' =>array('foreignKey' => 'location_id'),
							'Person'=>array('foreignKey'=>'person_id'),
							'DoctorProfile'=>array('foreignKey'=>false,'conditions'=>array('DoctorProfile.user_id=Patient.doctor_id')),
							'User'=>array('foreignKey'=>false,'conditions'=>array('User.id=Patient.doctor_id')),
							'Initial'=>array('foreignKey'=>false,'conditions'=>array('Initial.id=User.initial_id')),
							'Consultant'=>array('foreignKey'=>'consultant_id'),
							'InitialAlias' =>array('foreignKey' => false,'conditions'=>array('InitialAlias.id =Consultant.initial_id' )),
							'PatientInitial' =>array('foreignKey' => false,'conditions'=>array('PatientInitial.id =Person.initial_id' )),
							'Department'=>array('foreignKey'=>'department_id'),
					)),false);

			if(!empty($to) && !empty($from)){
				$from = $this->DateFormat->formatDate2STDForReport($this->request->data['PatientAdmissionReport']['from'],Configure::read('date_format'))." 00:00:00";
				$to = $this->DateFormat->formatDate2STDForReport($this->request->data['PatientAdmissionReport']['to'],Configure::read('date_format'))." 23:59:59";
				// get record between two dates. Make condition
				$search_key = array('Patient.form_received_on <=' => $to, 'Patient.form_received_on >=' => $from,'Patient.is_deleted'=>0,'Patient.location_id'=>$this->Session->read('locationid'),'Patient.known_fam_physician !=' => '');
			}else{
				$search_key =array('Patient.location_id'=>$this->Session->read('locationid')) ;
			}
			if(!empty($reference_category)){
				$search_key['Patient.known_fam_physician'] =  $reference_category;
			}
			if(!empty($admission_type)){
				$search_key['Patient.admission_type'] =  $admission_type;
			}
			if(!empty($ipd_patient_status)){
				$search_key['Patient.is_discharge'] =  1;
			}
			if(!empty($opd_patient_status)){
				$search_key['Patient.is_discharge'] =  1;
			}
			if(!empty($skip_registration)){
				$search_key['Patient.treatment_type'] =  $skip_registration;
			}

			if(!empty($reference_doctor)){
				if($this->data['known_fam_physician'] == 4) {
				 $search_key['Patient.doctor_id'] =  $reference_doctor;
				} else {
				 $search_key['Patient.consultant_id'] =  $reference_doctor;
				}
			}
			$search_key['DoctorProfile.is_deleted'] =  0;
			$search_key['DoctorProfile.location_id'] =  $this->Session->read('locationid');
			$fields =array('PatientInitial.name,InitialAlias.name,Patient.id,Patient.patient_id,Patient.admission_type,Patient.is_discharge,Patient.treatment_type,Person.city,Patient.lookup_name,Patient.form_received_on,Patient.admission_id,Patient.is_emergency,Patient.mobile_phone,Person.age,Person.sex,Person.blood_group,CONCAT(Initial.name," ",DoctorProfile.doctor_name) AS doctor_name,CONCAT(Consultant.first_name," ",Consultant.last_name) AS consultant_name');

			$record = $this->Patient->find('all',array('order'=>array('Patient.form_received_on' => 'DESC'),'fields'=>$fields,'conditions'=>$search_key));
			$this->set('selctedFields',$this->request->data['PatientAdmissionReport']['field_id']);
			// echo "<pre>".print_r($record);exit;
			//EOF pankaj code
			//pr($record);exit;
			if($format == 'PDF'){
				$this->set('reports',$record);
				$this->set(compact('fieldName'));
				$this->set(compact('patient_type'));
				$this->render('admission_report_by_referencedoctor_pdf','pdf');
			} else {
				$this->set('reports', $record);
				$this->set(compact('fieldName'));
				$this->set(compact('patient_type'));
				$this->render('admission_report_by_referencedoctor_xls','');
			}
		}
		$this->set('refrences',$this->Consultant->getReffererDoctor());
		$this->set('reffererdoctors',$this->ReffererDoctor->find('list',array('conditions' => array('ReffererDoctor.is_deleted' => 0, 'ReffererDoctor.is_referral' => 'Y'), 'fields' => array('ReffererDoctor.id', 'ReffererDoctor.name'))));
	}

	/**
	 *
	 * chart of total admission report by reference doctor
	 *
	 **/

	public function admin_admission_report_by_reference_doctor_chart(){

		$this->uses = array('Patient','Location','Person','Consultant','User','DoctorProfile');
		if(!empty($this->request->data)){

			$this->set('title_for_layout', __('Total Admissions Report Chart', true));

			$reportYear = $this->request->data['PatientAdmissionReport']['year'];
			$reference = $this->request->data['PatientAdmissionReport']['reference_doctor'];
			$patient_type = $this->request->data['PatientAdmissionReport']['type'];
			$reference_category = $this->request->data['known_fam_physician'];
			$location_id = $this->Session->read('locationid');
			$consultantName = '';
			$type = 'All';
			$reportMonth = $this->request->data['PatientAdmissionReport']['month'];
			if(!empty($reportMonth)){
				$countDays = cal_days_in_month(CAL_GREGORIAN, $reportMonth, $reportYear); // Days of the month selected
				$fromDate = $reportYear."-".$reportMonth."-01";
				$toDate = $reportYear."-".$reportMonth."-".$countDays;
			} else {
				$fromDate = $reportYear."-01-01"; // set first date of current year
				$toDate = $reportYear."-12-31"; // set last date of current year
			}

			// Bind Models
			$this->Patient->bindModel(array(
					'belongsTo' => array(
							'Location' =>array('foreignKey' => 'location_id'),
							'Person'=>array('foreignKey'=>'person_id'),
							/*'DoctorProfile'=>array('foreignKey'=>false,'conditions'=>array('DoctorProfile.user_id=Patient.doctor_id')),*/
							'Consultant'=>array('foreignKey'=>'consultant_id'),
							'Department'=>array('foreignKey'=>'department_id'),
					)),false);
			// This will not change the actual from date
			$setDate = $fromDate;
			// Create Y axix array as per month
			while($toDate > $setDate) {
				$yaxisArray[date("F-Y", strtotime($setDate))] = date("F", strtotime($setDate));
				$expfromdate = explode("-", $setDate);
				$setDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}

			if($fromDate != '' AND $toDate != ''){
				$toSearch = array('Patient.form_received_on <=' => $toDate, 'Patient.form_received_on >=' => $fromDate, 'Patient.is_deleted'=>0,'Patient.location_id'=>$this->Session->read('locationid'));
			}
			if(!empty($reference_category)){
				$toSearch['Patient.known_fam_physician'] =  $reference_category;
			}
			if(!empty($reference)){
				if($this->data['known_fam_physician'] == 4) {
				 $toSearch['Patient.doctor_id'] =  $reference;
				} else {
				 $toSearch['Patient.consultant_id'] =  $reference;
				}
				//$toSearch['Patient.consultant_id'] = $reference; // Condition reference doctors
			}

			if(!empty($patient_type)){
				if($patient_type == 'Emergency'){
					$toSearch['Patient.is_emergency'] = 1;
					$toSearch['Patient.admission_type'] = 'IPD'; // Condition for year and month
					$type = $patient_type;
				} else {
					$toSearch['Patient.admission_type'] = $patient_type; // Condition for year and month
					$type = $patient_type;

				}
			}


			// Collect record here
			$countRecord = $this->Patient->find('all', array('fields' => array('COUNT(*) AS recordcount', 'DATE_FORMAT(form_received_on, "%M-%Y") AS month_reports',
					'Patient.form_received_on', 'Patient.doctor_id','Patient.admission_type','Patient.is_emergency','CONCAT(Consultant.first_name," ",Consultant.last_name)'),
					'conditions' => $toSearch ,'group' => array('month_reports')));

			//pr($countRecord);exit;

			// Set data for view as per record counted
			foreach($countRecord as $countRecordVal) {
				$filterRecordDateArray[] = $countRecordVal[0]['month_reports'];
				$filterRecordCountArray[$countRecordVal[0]['month_reports']] = $countRecordVal[0]['recordcount'];
			}

			$this->set('reportYear', isset($reportYear)?$reportYear:date("Y"));
			$this->set('filterRecordDateArray', isset($filterRecordDateArray)?$filterRecordDateArray:"");
			$this->set('filterRecordCountArray', isset($filterRecordCountArray)?$filterRecordCountArray:0);
			$this->set('yaxisArray', $yaxisArray);
			$this->set(compact('countRecord'));
			$this->set(compact('reportMonth'));
			$this->set(compact('type'));

		}
	}

	/**
	 *
	 * total admission report by patient location
	 *
	 **/
	public function admin_admission_report_by_patient_location() {
		$this->uses = array('Patient','Location','Person','Consultant','User','DoctorProfile');
		$fieldsArr = array('department_id'=>'Department','previous_receivable'=>'Previous receivable','email'=>'Email','relative_name'=>'Relatives name','sponsers_auth'=>'Authorization from Sponsor','mobile_phone'=>'Relative Phone No.','relation'=>'Relationship with patient','doc_ini_assessment'=>'Form received by Patient','form_received_on'=>'Form received Date','nurse_assessment'=>'Registration Completed by patient','doc_ini_assess_on'=>'Start of assessment by Doctor','doc_ini_assess_end_on'=>'End of assessment by Doctor','nurse_assess_on'=>'Start of Nursing Assessment','nurse_assess_end_on'=>'End of Nursing Assessment','nutritional_assess_on'=>'Start of Nutritional Assessment','nutritional_assess_end_on'=>'End of Nutritional Assessment');
		$this->set('fieldsArr',$fieldsArr);
		if($this->request->data){
			// pr($this->request->data);exit;
			// Collect required values in variables
			$format = $this->request->data['PatientAdmissionReport']['format'];
			$from = $this->request->data['PatientAdmissionReport']['from'];
			$to =   $this->request->data['PatientAdmissionReport']['to'];
			$sex = $this->request->data['PatientAdmissionReport']['sex'];
			$age = $this->request->data['PatientAdmissionReport']['age'];
			$patient_location = $this->request->data['PatientAdmissionReport']['patient_location'];
			$blood_group = $this->request->data['PatientAdmissionReport']['blood_group'];
			$reference_doctor = $this->request->data['PatientAdmissionReport']['reference_doctor'];
			$patient_type = $this->request->data['PatientAdmissionReport']['type'];

			if(isset($this->request->data['PatientAdmissionReport']['treatment_type'])){
				$treatment_type = $this->request->data['PatientAdmissionReport']['treatment_type'];
			}
			//$sponsor = $this->request->data['PatientRegistrationReport']['sponsor'];
			$record = '';
			//BOF pankaj code

			$this->Patient->bindModel(array(
					'belongsTo' => array(
							'Location' =>array('foreignKey' => 'location_id'),
							'Person'=>array('foreignKey'=>'person_id'),
							'DoctorProfile'=>array('foreignKey'=>false,'conditions'=>array('DoctorProfile.user_id=Patient.doctor_id')),
							'User'=>array('foreignKey'=>false,'conditions'=>array('User.id=Patient.doctor_id')),
							'Initial'=>array('foreignKey'=>false,'conditions'=>array('Initial.id=User.initial_id')),
							'Consultant'=>array('foreignKey'=>'consultant_id'),
							'PatientInitial' =>array('foreignKey' => false,'conditions'=>array('PatientInitial.id =Person.initial_id' )),
							'Department'=>array('foreignKey'=>'department_id'),
							'FinalBilling'=>array('foreignKey'=>false,'conditions'=>array('FinalBilling.patient_id=Patient.id'))
					)),false);

			if(!empty($to) && !empty($from)){
				$from = $this->DateFormat->formatDate2STDForReport($this->request->data['PatientAdmissionReport']['from'],Configure::read('date_format'))." 00:00:00";
				$to = $this->DateFormat->formatDate2STDForReport($this->request->data['PatientAdmissionReport']['to'],Configure::read('date_format'))." 23:59:59";
				// get record between two dates. Make condition
				$search_key = array('Patient.form_received_on <=' => $to, 'Patient.form_received_on >=' => $from,'Patient.is_deleted'=>0,'Patient.location_id'=>$this->Session->read('locationid'),'Person.city !=' => '');
			}else{
				$search_key =array('Patient.location_id'=>$this->Session->read('locationid')) ;
			}
			if(!(empty($sex))){
				$search_key['Person.sex'] =  $sex;
			}
			if(!(empty($age))){
				$ageRange = explode('-',$age);
				$search_key['Person.age between ? and ?'] =  array($ageRange[0],$ageRange[1]);
			}
			if(!(empty($blood_group))){
				$search_key['Person.blood_group'] =  $blood_group;
			}
			if(!empty($patient_location)){
				$search_key['Person.city'] =  $patient_location;
			}
			if(!empty($reference_doctor)){
				$search_key['Patient.consultant_id'] =  $reference_doctor;
			}
			if(!empty($patient_type)){
				if($patient_type == 'Emergency'){
					$search_key['Patient.is_emergency'] = 1;
					$search_key['Patient.admission_type'] =  'IPD';
				} else if($patient_type == 'IPD'){
					$search_key['Patient.admission_type'] =  'IPD';
				} else if($patient_type == 'OPD'){
					if(isset($treatment_type) AND $treatment_type != ''){
						$search_key['Patient.treatment_type'] = $treatment_type;
						$search_key['Patient.admission_type'] =  'OPD';
					} else {
						$search_key['Patient.admission_type'] =  'OPD';
					}
				}
			}

			$search_key['DoctorProfile.is_deleted'] =  0;
			$search_key['DoctorProfile.location_id'] =  $this->Session->read('locationid');
			//$search_key['User.is_deleted']  = 0;
			//pr($search_key);exit;
			$selectedFields = '';
			if(!empty($this->request->data['PatientAdmissionReport']['field_id'])){
				foreach($this->request->data['PatientAdmissionReport']['field_id'] as $key=>$value){
					if($key=='department_id'){
						$selectedFields .= ",Department.name";
					}else{
						$selectedFields .= ",Patient.".$this->request->data['PatientAdmissionReport']['field_id'][$key];
					}
				}
			}
			$fields =array('PatientInitial.name,Patient.id,Patient.patient_id,Patient.admission_type,Patient.treatment_type,Person.city,Patient.lookup_name,Patient.form_received_on,
					Patient.admission_id,Patient.is_emergency, Patient.mobile_phone,Person.age,Person.sex,Person.blood_group,CONCAT(Initial.name," ",DoctorProfile.doctor_name) AS doctor_name,CONCAT(Consultant.first_name," ",Consultant.last_name)'.$selectedFields);

			$record = $this->Patient->find('all',array('order'=>array('Patient.form_received_on' => 'DESC'),'fields'=>$fields,'conditions'=>$search_key));
			$this->set('selctedFields',$this->request->data['PatientAdmissionReport']['field_id']);

			//EOF pankaj code
			//pr($record);exit;
			if($format == 'PDF'){
				$this->set('reports',$record);
				$this->set(compact('fieldName'));
				$this->set(compact('patient_type'));
				$this->render('admission_report_by_patientlocation_pdf','pdf');
			} else {
				$this->set('reports', $record);
				$this->set(compact('fieldName'));
				$this->set(compact('patient_type'));
				$this->render('admission_report_by_patientlocation_xls','');
			}
		}
		//patient location
		$this->set('locationlist',$this->Person->find('list',array('fields'=>array('city','city'))));
	}

	/**
	 *
	 * chart of total admission report by patient location
	 *
	 **/

	public function admin_admission_report_by_patient_location_chart() {

		$this->uses = array('Patient','Location','Person','Consultant','User','DoctorProfile');
		$this->layout ='Advance';
		if(!empty($this->request->data)){

			$this->set('title_for_layout', __('Total Admissions Report Chart By Location', true));

			$reportYear = $this->request->data['PatientAdmissionReport']['year'];
			$reference = $this->request->data['PatientAdmissionReport']['reference_doctor'];
			$patient_type = $this->request->data['PatientAdmissionReport']['type'];
			$location_id = $this->Session->read('locationid');
			$consultantName = '';
			$type = 'All';
			$reportMonth = $this->request->data['PatientAdmissionReport']['month'];
			if(!empty($reportMonth)){
				$countDays = cal_days_in_month(CAL_GREGORIAN, $reportMonth, $reportYear); // Days of the month selected
				$fromDate = $reportYear."-".$reportMonth."-01";
				$toDate = $reportYear."-".$reportMonth."-".$countDays;
			} else {
				$fromDate = $reportYear."-01-01"; // set first date of current year
				$toDate = $reportYear."-12-31"; // set last date of current year
			}

			// Bind Models
			$this->Patient->bindModel(array(
					'belongsTo' => array(
							'Location' =>array('foreignKey' => 'location_id'),
							'Person'=>array('foreignKey'=>'person_id'),
							/*'DoctorProfile'=>array('foreignKey'=>false,'conditions'=>array('DoctorProfile.user_id=Patient.doctor_id')),*/
							'Consultant'=>array('foreignKey'=>'consultant_id'),
							'Department'=>array('foreignKey'=>'department_id'),
					)),false);
			// This will not change the actual from date
			$setDate = $fromDate;
			// Create Y axix array as per month
			while($toDate > $setDate) {
				$yaxisArray[date("F-Y", strtotime($setDate))] = date("F", strtotime($setDate));
				$expfromdate = explode("-", $setDate);
				$setDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}

			if($fromDate != '' AND $toDate != ''){
				$toSearch = array('Patient.form_received_on <=' => $toDate, 'Patient.form_received_on >=' => $fromDate, 'Patient.is_deleted'=>0,'Patient.location_id'=>$this->Session->read('locationid'));
			}

			if(!empty($reference)){
				$toSearch['Patient.consultant_id'] = $reference; // Condition reference doctors
			}

			if(!empty($patient_type)){
				if($patient_type == 'Emergency'){
					$toSearch['Patient.is_emergency'] = 1;
					$toSearch['Patient.admission_type'] = 'IPD'; // Condition for year and month
					$type = $patient_type;
				} else {
					$toSearch['Patient.admission_type'] = $patient_type; // Condition for year and month
					$type = $patient_type;

				}
			}


			// Collect record here
			$countRecord = $this->Patient->find('all', array('fields' => array('COUNT(*) AS recordcount', 'DATE_FORMAT(form_received_on, "%M-%Y") AS month_reports',
					'Patient.form_received_on', 'Patient.doctor_id','Patient.admission_type','Patient.is_emergency','CONCAT(Consultant.first_name," ",Consultant.last_name)'),
					'conditions' => $toSearch ,'group' => array('month_reports')));

			//pr($countRecord);exit;

			// Set data for view as per record counted
			foreach($countRecord as $countRecordVal) {
				$filterRecordDateArray[] = $countRecordVal[0]['month_reports'];
				$filterRecordCountArray[$countRecordVal[0]['month_reports']] = $countRecordVal[0]['recordcount'];
			}
			$this->set('reportYear', isset($reportYear)?$reportYear:date("Y"));
			$this->set('filterRecordDateArray', isset($filterRecordDateArray)?$filterRecordDateArray:"");
			$this->set('filterRecordCountArray', isset($filterRecordCountArray)?$filterRecordCountArray:0);
			$this->set('yaxisArray', $yaxisArray);
			$this->set(compact('countRecord'));
			$this->set(compact('reportMonth'));
			$this->set(compact('type'));

		}
	}

	/**
	 * daily cash collection report
	 *
	 */

	public function admin_daily_cash_collection() {
		$this->uses=array('TariffList');
		$this->layout ='advance';
        //For visit type
		$OPCheckUpOptions=$this->TariffList->find('list',array('fields'=>array('id','name'),'conditions'=>array('is_deleted'=>'0','check_status'=>'1','location_id'=>$this->Session->read('locationid'))));
		$this->set('opdoptions',$OPCheckUpOptions);
		
		$this->set('title_for_layout', __('Daily Cash Collection', true));
		if ($this->request->is('post') || $this->request->is('put')) {
			$this->dailyCashCollection($this->request->data);
                        if($this->request->data['format'] == "PAGE") {
				$this->render('admin_daily_cash_collection');
			}
			if($this->request->data['format'] == "PDF") {
				$this->render('daily_cash_collection_pdf', 'pdf');
			}
			if($this->request->data['format'] == "EXCEL") {
				$this->render('daily_cash_collection_xls','');
			}
                }else{
                    $this->dailyCashCollection($this->request->data);
                    $this->render('admin_daily_cash_collection');
			
                }
	}


	/**
	 * daily cash collection query
	 *
	 */

        private function dailyCashCollection($getData = null) {
            $this->uses = array('Billing', 'LaboratoryTestOrder', 'RadiologyTestOrder', 'PharmacySalesBill', 'TariffList', 'User');

            $this->layout = 'advance';
             if (empty($getData['billtype'])) {
                $getData['billtype'] = 'TOTAL BILL'; // for current day
            }

            if ($getData['from']) {
                $from = $this->DateFormat->formatDate2STDForReport($getData['from'], Configure::read('date_format')) . " 00:00:00";
            } else {
                $from = date("Y-m-d") . " 00:00:00";
            }
            if ($getData['to']) {
                $to = $this->DateFormat->formatDate2STDForReport($getData['to'], Configure::read('date_format')) . " 23:59:59";
            } else {
                $to = date("Y-m-d") . " 23:59:59";
            }
            if ($getData['admission_type'] != "") {
                $conditions['Patient']['admission_type'] = $getData['admission_type'];
            } else {
                $conditions['Patient']['admission_type'] = array('IPD', 'OPD');
            }
            if ($getData['skip_registration'] != "") {
                $conditions['Patient']['treatment_type'] = $getData['skip_registration'];
            }
            if ($getData['ipd_patient_status'] != "") {
                $conditions['Patient']['is_discharge'] = $getData['ipd_patient_status'];
            }
            if ($getData['opd_patient_status'] != "") {
                $conditions['Patient']['is_discharge'] = $getData['opd_patient_status'];
            }
       
            
         
            $conditions['Patient']['location_id'] = $this->Session->read('locationid');
            $conditions['Patient']['is_deleted'] = 0;
            
          

            // get billing cash collection //
            if ($getData['billtype'] == 'TOTAL BILL') {
                $this->Billing->bindModel(array(
                    'belongsTo' => array('Patient' => array('foreignKey' => false, 'conditions' => array("Billing.patient_id=Patient.id", "Billing.location_id" => $this->Session->read('locationid'))),
                        'Person' => array('foreignKey' => false, 'conditions' => array('Person.id=Patient.person_id', "Person.location_id" => $this->Session->read('locationid'))),
                        'Department' => array('foreignKey' => false, 'conditions' => array('Department.id=Patient.department_id', "Department.location_id" => $this->Session->read('locationid'))),
                        'PatientInitial' => array('foreignKey' => false, 'conditions' => array('PatientInitial.id =Person.initial_id')),
                        'User' => array('foreignKey' => false, 'conditions' => array('User.id=Billing.created_by', "User.location_id" => $this->Session->read('locationid'))),
                )));
                $conditionsBilling['Billing']['location_id'] = $this->Session->read('locationid');
                $conditionsBilling['Billing'] = array('date BETWEEN ? AND ?' => array($from, $to));
                #$conditionsBilling['Billing']['mode_of_payment'] = 'Cash';
                if ($getData['mode_of_payment'] != "") {
                   $conditionsBilling['Billing']['mode_of_payment'] = $getData['mode_of_payment']; 
                } else {
                   $conditionsBilling['Billing']['mode_of_payment'] = array('Cash', 'Cheque', 'NEFT', 'Credit Card'); 
                   
                }
                
                $conditionsBilling = $this->postConditions(array_merge($conditionsBilling, $conditions));

                $getBillingCash = $this->Billing->find("all", array('conditions' => $conditionsBilling,
                    'fields' => array('Department.name', 'Person.plot_no', 'Person.landmark', 'Person.city', 'Person.taluka', 'Person.district', 'Person.state',
                        'Person.pin_code', 'Person.mobile', 'Billing.date', 'PatientInitial.name', 'Patient.is_discharge',
                        'Patient.form_received_on', 'Patient.form_completed_on', 'Patient.lookup_name', 'Patient.mobile_phone', 'Patient.id',
                        'Patient.admission_type', 'Patient.admission_id', 'Patient.address1', 'SUM(Billing.amount) AS sum_amount',
                        'Billing.amount', 'Billing.reason_of_payment', 'Billing.mode_of_payment', 'Billing.tariff_list_id', 'Billing.created_by', 'User.username','User.first_name','User.last_name'),
                    'group' => array('Patient.id'),
                    'order' => array('Billing.date')));
                // debug($getBillingCash);exit;
                $this->set('getBillingCash', $getBillingCash);
            }
            // get radiology  billing //
            if ($getData['billtype'] == 'RADIOLOGY') {
                $this->RadiologyTestOrder->bindModel(array(
                    'belongsTo' => array(
                        'Patient' => array('foreignKey' => false, 'conditions' => array("RadiologyTestOrder.patient_id=Patient.id", "Patient.location_id" => $this->Session->read('locationid'))),
                        'Person' => array('foreignKey' => false, 'conditions' => array('Person.id=Patient.person_id', "Person.location_id" => $this->Session->read('locationid'))),
                        'Department' => array('foreignKey' => false, 'conditions' => array('Department.id=Patient.department_id', "Department.location_id" => $this->Session->read('locationid'))),
                        'PatientInitial' => array('foreignKey' => false, 'conditions' => array('PatientInitial.id =Person.initial_id')),
                        'Billing' => array('foreignKey' => false, 'conditions' => array('Billing.patient_id =Patient.id', "Billing.location_id" => $this->Session->read('locationid'))),
                        'ServiceCategory' => array('foreignKey' => false, 'conditions' => array('ServiceCategory.id=Billing.payment_category', "ServiceCategory.location_id" => $this->Session->read('locationid'))),
                        'User' => array('foreignKey' => false, 'conditions' => array('User.id=Billing.created_by', "User.location_id" => $this->Session->read('locationid'))),
                )));
                $conditionsRadiology['RadiologyTestOrder'] = array('create_time BETWEEN ? AND ?' => array($from, $to));
                #$conditionsRadiology['Billing']['mode_of_payment'] = 'Cash';
                 if ($getData['mode_of_payment'] != "") {
                   $conditionsRadiology['Billing']['mode_of_payment'] = $getData['mode_of_payment']; 
                } else {
                   $conditionsRadiology['Billing']['mode_of_payment'] = array('Cash', 'Cheque', 'NEFT', 'Credit Card'); 
                   
                }
                $conditionsRadiology['ServiceCategory']['name'] = 'radiology';
                $conditionsRadiology = $this->postConditions(array_merge($conditionsRadiology, $conditions));
                $getRadiologyTestCash = $this->RadiologyTestOrder->find("all", array('conditions' => $conditionsRadiology,
                    'fields' => array('Department.name', 'Person.plot_no', 'Person.landmark', 'Person.city', 'Person.taluka', 'Person.district', 'Person.state',
                        'Person.pin_code', 'Person.mobile', 'RadiologyTestOrder.create_time', 'PatientInitial.name',
                        'Patient.is_discharge', 'Patient.form_received_on', 'Patient.form_completed_on', 'Patient.lookup_name',
                        'Patient.mobile_phone', 'Patient.admission_type', 'Patient.admission_id', 'Patient.address1',
                        'SUM(RadiologyTestOrder.paid_amount) AS sum_amount', 'RadiologyTestOrder.paid_amount',
                        'Billing.mode_of_payment', 'RadiologyTestOrder.testname', 'Billing.created_by', 'User.username','User.first_name','User.last_name'), 'group' => array('RadiologyTestOrder.id'),
                    'order' => array('RadiologyTestOrder.create_time')));
                $this->set('getRadiologyTestCash', $getRadiologyTestCash);
            }
            // get laboratory  billing //
            if ($getData['billtype'] == 'LABORATORY') {
                $this->LaboratoryTestOrder->bindModel(array('belongsTo' => array('Patient' => array('foreignKey' => false, 'conditions' => array("LaboratoryTestOrder.patient_id=Patient.id", "LaboratoryTestOrder.location_id" => $this->Session->read('locationid'))),
                        'Person' => array('foreignKey' => false, 'conditions' => array('Person.id=Patient.person_id', "Person.location_id" => $this->Session->read('locationid'))),
                        'Department' => array('foreignKey' => false, 'conditions' => array('Department.id=Patient.department_id', "Department.location_id" => $this->Session->read('locationid'))),
                        'PatientInitial' => array('foreignKey' => false, 'conditions' => array('PatientInitial.id =Person.initial_id')),
                        'Billing' => array('foreignKey' => false, 'conditions' => array('Billing.patient_id =Patient.id', "Billing.location_id" => $this->Session->read('locationid'))),
                        'ServiceCategory' => array('foreignKey' => false, 'conditions' => array('ServiceCategory.id=Billing.payment_category', "ServiceCategory.location_id" => $this->Session->read('locationid'))),
                        'User' => array('foreignKey' => false, 'conditions' => array('User.id=Billing.created_by', "User.location_id" => $this->Session->read('locationid'))),
                )));
                $conditionsLaboratory['LaboratoryTestOrder'] = array('create_time BETWEEN ? AND ?' => array($from, $to));
                #$conditionsLaboratory['Billing']['mode_of_payment'] = 'Cash';
                 if ($getData['mode_of_payment'] != "") {
                
                   $conditionsLaboratory['Billing']['mode_of_payment'] = $getData['mode_of_payment']; 
                } else {
                   $conditionsLaboratory['Billing']['mode_of_payment'] = array('Cash', 'Cheque', 'NEFT', 'Credit Card'); 
                   
                }
                $conditionsLaboratory['ServiceCategory']['name'] = 'Laboratory';
                $conditionsLaboratory = $this->postConditions(array_merge($conditionsLaboratory, $conditions));
                $getLaboratoryTestCash = $this->LaboratoryTestOrder->find("all", array('conditions' => $conditionsLaboratory,
                    'fields' => array('Department.name', 'Person.plot_no', 'Person.landmark', 'Person.city', 'Person.taluka', 'Person.district', 'Person.state',
                        'Person.pin_code', 'Person.mobile', 'LaboratoryTestOrder.create_time', 'PatientInitial.name',
                        'Patient.is_discharge', 'Patient.form_received_on', 'Patient.form_completed_on', 'Patient.lookup_name',
                        'Patient.mobile_phone', 'Patient.admission_type', 'Patient.admission_id', 'Patient.address1',
                        'SUM(LaboratoryTestOrder.paid_amount) AS sum_amount', 'LaboratoryTestOrder.paid_amount',
                        'Billing.mode_of_payment', 'Billing.created_by', 'User.username','User.first_name','User.last_name'), 'group' => array('LaboratoryTestOrder.id'), 'order' => array('LaboratoryTestOrder.create_time')));
                $this->set('getLaboratoryTestCash', $getLaboratoryTestCash);
            }
            // get pharmacy  billing //
            if ($getData['billtype'] == 'PHARMACY') {
                $this->PharmacySalesBill->bindModel(array(
                    'belongsTo' => array('Patient' => array('foreignKey' => false, 'conditions' => array("PharmacySalesBill.patient_id=Patient.id",
                                "Patient.location_id" => $this->Session->read('locationid'))),
                        'Person' => array('foreignKey' => false, 'conditions' => array('Person.id=Patient.person_id',
                                "Person.location_id" => $this->Session->read('locationid'))),
                        'Department' => array('foreignKey' => false, 'conditions' => array('Department.id=Patient.department_id',
                                "Department.location_id" => $this->Session->read('locationid'))),
                        'PatientInitial' => array('foreignKey' => false, 'conditions' => array('PatientInitial.id =Person.initial_id')),
                        'User' => array('foreignKey' => false, 'conditions' => array('User.id=PharmacySalesBill.created_by',
                                "User.location_id" => $this->Session->read('locationid'))),
                )));
                $conditionsPharmacy['PharmacySalesBill'] = array('create_time BETWEEN ? AND ?' => array($from, $to));
                if ($getData['mode_of_payment'] != "") {
                    $conditionsPharmacy['PharmacySalesBill']['payment_mode'] = $getData['mode_of_payment'];    
                }else{
                    $conditionsPharmacy['PharmacySalesBill']['payment_mode'] = array('Cash', 'Credit'); 
                }
                
                $conditionsPharmacy = $this->postConditions(array_merge($conditionsPharmacy, $conditions));

                $getPharmacyCash = $this->PharmacySalesBill->find("all", array('conditions' => $conditionsPharmacy,
                    'fields' => array('Department.name', 'Person.plot_no', 'Person.landmark', 'Person.city', 'Person.taluka', 'Person.district', 'Person.state',
                        'Person.pin_code', 'Person.mobile', 'PharmacySalesBill.create_time', 'PatientInitial.name', 'Patient.is_discharge', 'Patient.form_received_on',
                        'Patient.form_completed_on', 'Patient.lookup_name', 'Patient.mobile_phone', 'Patient.admission_type', 'Patient.admission_id', 'Patient.address1',
                        'SUM(PharmacySalesBill.total) AS sum_amount', 'PharmacySalesBill.total', 'PharmacySalesBill.payment_mode', 'PharmacySalesBill.created_by', 'User.username','User.first_name','User.last_name'),
                    'group' => array('PharmacySalesBill.id'), 'order' => array('PharmacySalesBill.create_time')));
                     $totalamount = $getPharmacyCash + $getLaboratoryTestCash =$getRadiologyTestCash + $getBillingCash;
               
                $this->set('patientType', $getData['admission_type']);
                $this->set('getPharmacyCash', $getPharmacyCash);
                
               
        }
    }
	
	/**
	 * daily credit collection report
	 *
	 */

	public function admin_daily_credit_collection() {
		$this->layout ='advance';
		$this->set('title_for_layout', __('Daily Credit Collection', true));
		if ($this->request->is('post') || $this->request->is('put')) {
			$this->dailyCreditCollection($this->request->data);
			if($this->request->data['format'] == "PDF") {
				$this->render('daily_credit_collection_pdf', 'pdf');
			}
			if($this->request->data['format'] == "EXCEL") {
				$this->render('daily_credit_collection_xls','');

			}
		}
	}


	/**
	 * daily credit collection query
	 *
	 */

	private function dailyCreditCollection($getData=null) {
		$this->uses = array('Billing','PharmacySalesBill');
		$this->layout ='Advance';
		$from = $this->DateFormat->formatDate2STDForReport($getData['from'],Configure::read('date_format'))." 00:00:00";
		$to = $this->DateFormat->formatDate2STDForReport($getData['to'],Configure::read('date_format'))." 23:59:59";

		if($getData['admission_type'] != "") {
			$conditions['Patient']['admission_type'] = $getData['admission_type'];
		} else {
			$conditions['Patient']['admission_type'] =  array('IPD', 'OPD');

		}
		if($getData['skip_registration'] != "") {
			$conditions['Patient']['treatment_type'] = $getData['skip_registration'];
		}
		if($getData['ipd_patient_status'] != "") {
			$conditions['Patient']['is_discharge'] = $getData['ipd_patient_status'];
		}
		if($getData['opd_patient_status'] != "") {
			$conditions['Patient']['is_discharge'] = $getData['opd_patient_status'];
		}
		if($getData['PatientRegistrationReport']['payment_category'] != ""){
			$conditions['Patient']['payment_category'] =  $getData['PatientRegistrationReport']['payment_category'];
		}
		if($getData['PatientRegistrationReport']['credit_type_id'] != ""){
			$conditions['Patient']['credit_type_id'] =  $getData['PatientRegistrationReport']['credit_type_id'];
		}
		if($getData['[PatientRegistrationReport]']['corporate_location_id'] != "") {
			$conditions['Patient']['corporate_location_id'] = $getData['[PatientRegistrationReport]']['corporate_location_id'];
		}
		if($getData['[PatientRegistrationReport]']['corporate_id'] != "") {
			$conditions['Patient']['corporate_id'] = $getData['[PatientRegistrationReport]']['corporate_id'];
		}
		if($getData['[PatientRegistrationReport]']['sublocation_id'] != "") {
			$conditions['Patient']['corporate_sublocation_id'] = $getData['[PatientRegistrationReport]']['sublocation_id'];
		}
		if($getData['[PatientRegistrationReport]']['[insurance_type_id]'] != "") {
			$conditions['Patient']['insurance_type_id'] = $getData['[PatientRegistrationReport]']['[insurance_type_id]'];
		}
		if($getData['[PatientRegistrationReport]']['[insurenceCom_id]'] != "") {
			$conditions['Patient']['insurance_company_id'] = $getData['[PatientRegistrationReport]']['[insurenceCom_id]'];
		}

		$conditions['Patient']['location_id'] = $this->Session->read('locationid');
		$conditions['Patient']['is_deleted'] = 0;
		// get billing cash collection //
		$this->Billing->bindModel(array('belongsTo'=>array('Patient'=>array('foreignKey'=>false,'conditions'=>array("Billing.patient_id=Patient.id")),
				'Corporate'=>array('foreignKey'=>false,'conditions'=>array("Patient.corporate_id=Corporate.id")),
				'InsuranceCompany'=>array('foreignKey'=>false,'conditions'=>array("Patient.insurance_company_id=InsuranceCompany.id")),
				'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id' )),
				'Department' =>array('foreignKey' => false,'conditions'=>array('Department.id=Patient.department_id' )),
				'PatientInitial' =>array('foreignKey' => false,'conditions'=>array('PatientInitial.id =Person.initial_id' )),
		)));
		$conditionsBilling['Billing'] = array('date BETWEEN ? AND ?'=> array($from,$to));
		$conditionsBilling['Billing']['mode_of_payment'] =  'Credit Card';
		$conditionsBilling = $this->postConditions(array_merge($conditions,$conditionsBilling));
		$getBillingCredit = $this->Billing->find("all",array('conditions' => $conditionsBilling, 'fields' => array('Department.name','Corporate.name','InsuranceCompany.name','Person.*','Billing.date','PatientInitial.name', 'Patient.is_discharge','Patient.form_received_on','Patient.form_completed_on', 'Patient.lookup_name', 'Patient.mobile_phone', 'Patient.admission_type', 'Patient.admission_id', 'Patient.address1', 'SUM(Billing.amount) AS sum_amount', 'Billing.amount', 'Billing.reason_of_payment'), 'group' => array('Billing.id'),'order' => array('Billing.date')));
		$this->set('getBillingCredit', $getBillingCredit);
		// get pharmacy  billing //
		$this->PharmacySalesBill->bindModel(array('belongsTo'=>array('Patient'=>array('foreignKey'=>false,'conditions'=>array("PharmacySalesBill.patient_id=Patient.id")),
				'Corporate'=>array('foreignKey'=>false,'conditions'=>array("Patient.corporate_id=Corporate.id")),
				'InsuranceCompany'=>array('foreignKey'=>false,'conditions'=>array("Patient.insurance_company_id=InsuranceCompany.id")),
				'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id' )),
				'Department' =>array('foreignKey' => false,'conditions'=>array('Department.id=Patient.department_id' )),
				'PatientInitial' =>array('foreignKey' => false,'conditions'=>array('PatientInitial.id =Person.initial_id' )),
		)));
		$conditionsPharmacy['PharmacySalesBill'] = array('create_time BETWEEN ? AND ?'=> array($from,$to));
		$conditionsBilling['PharmacySalesBill']['mode_of_payment'] =  'credit';
		$conditionsPharmacy = $this->postConditions(array_merge($conditions, $conditionsPharmacy));
		$getPharmacyCredit = $this->PharmacySalesBill->find("all",array('conditions' => $conditionsPharmacy, 'fields' => array('Department.name','Corporate.name','InsuranceCompany.name','Person.*','PharmacySalesBill.create_time','PatientInitial.name', 'Patient.is_discharge','Patient.form_received_on','Patient.form_completed_on', 'Patient.lookup_name', 'Patient.mobile_phone', 'Patient.admission_type', 'Patient.admission_id', 'Patient.address1', 'SUM(PharmacySalesBill.total) AS sum_amount', 'PharmacySalesBill.total'), 'group' => array('PharmacySalesBill.id'),'order' => array('PharmacySalesBill.create_time')));
		//debug($getPharmacyCredit);
		$this->set('getPharmacyCredit', $getPharmacyCredit);
		$this->set('patientType', $getData['admission_type']);

	}

	/**
	 * daily check collection report
	 *
	 */

	public function admin_daily_check_collection() {
		$this->layout ='advance';
		$this->set('title_for_layout', __('Daily Check Collection', true));
		if ($this->request->is('post') || $this->request->is('put')) {
			$this->dailyCheckCollection($this->request->data);
			if($this->request->data['format'] == "PDF") {
				$this->render('daily_check_collection_pdf', 'pdf');
			}
			if($this->request->data['format'] == "EXCEL") {
				$this->render('daily_check_collection_xls','');

			}
		}
	}


	/**
	 * daily check collection query
	 *
	 */

	private function dailyCheckCollection($getData=null) {
		$this->uses = array('Billing');
		$this->layout ='Advance';
		$from = $this->DateFormat->formatDate2STDForReport($getData['from'],Configure::read('date_format'))." 00:00:00";
		$to = $this->DateFormat->formatDate2STDForReport($getData['to'],Configure::read('date_format'))." 23:59:59";
		$conditionsBilling['Billing'] = array('date BETWEEN ? AND ?'=> array($from,$to));
		if($getData['admission_type'] != "") {
			$conditions['Patient']['admission_type'] = $getData['admission_type'];
		} else {
			$conditions['Patient']['admission_type'] =  array('IPD', 'OPD');

		}
		if($getData['skip_registration'] != "") {
			$conditions['Patient']['treatment_type'] = $getData['skip_registration'];
		}
		if($getData['ipd_patient_status'] != "") {
			$conditions['Patient']['is_discharge'] = $getData['ipd_patient_status'];
		}
		if($getData['opd_patient_status'] != "") {
			$conditions['Patient']['is_discharge'] = $getData['opd_patient_status'];
		}
		if($getData['collection_type'] != "") {
			$conditionsBilling['Billing']['mode_of_payment'] = $getData['collection_type'];
		} else {
			$conditionsBilling['Billing']['mode_of_payment'] = array('Cheque', 'NEFT');
		}


		$conditions['Patient']['location_id'] = $this->Session->read('locationid');
		$conditions['Patient']['is_deleted'] = 0;
		// get billing check collection //
		$this->Billing->bindModel(array('belongsTo'=>array('Patient'=>array('foreignKey'=>false,'conditions'=>array("Billing.patient_id=Patient.id")),
				'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id' )),
				'Department' =>array('foreignKey' => false,'conditions'=>array('Department.id=Patient.department_id' )),
				'PatientInitial' =>array('foreignKey' => false,'conditions'=>array('PatientInitial.id =Person.initial_id' )),
		)));


		$conditionsBilling = $this->postConditions(array_merge($conditions,$conditionsBilling));

		$getBillingCheck = $this->Billing->find("all",array('conditions' => $conditionsBilling, 'fields' => array('Department.name','Person.*','Billing.date','PatientInitial.name', 'Patient.is_discharge','Patient.form_received_on','Patient.form_completed_on', 'Patient.lookup_name', 'Patient.mobile_phone', 'Patient.admission_type', 'Patient.admission_id', 'Patient.address1', 'SUM(Billing.amount) AS sum_amount','Billing.amount', 'Billing.reason_of_payment','Billing.check_credit_card_number','Billing.mode_of_payment','Billing.neft_number'), 'group' => array('Billing.id'),'order' => array('Billing.date')));
		$this->set('getBillingCheck', $getBillingCheck);
		$this->set('patientType', $getData['admission_type']);
	}

	/**
	 * payment dues report
	 *
	 */

	public function admin_payment_dues() {
		$this->set('title_for_layout', __('Payment Dues', true));
		if ($this->request->is('post') || $this->request->is('put')) {
			$this->paymentDues($this->request->data);
			if($this->request->data['format'] == "PDF") {
				$this->render('daily_payement_dues_pdf', 'pdf');
			}
			if($this->request->data['format'] == "EXCEL") {
				$this->render('daily_payment_dues_xls','');
			}
		}
	}

	/**
	 * payment dues query
	 *
	 */
	private function paymentDues($getData=null) {
			
		ini_set("max_execution_time", 300) ; // takes longer time to generate report cause of using billing charge functions 
		$patientTotalcharges = $this->requestAction("billings/nonDischargePaymentDues") ; //in billing controller
		$this->set($patientTotalcharges);
		$getData = $this->request->data ;
		if($getData['ipd_patient_status'] != "") {
			$conditions['Patient']['is_discharge'] 		= $getData['ipd_patient_status'];
		}else if($getData['opd_patient_status'] != "") {
			$conditions['Patient']['is_discharge'] 		= $getData['opd_patient_status'];
		}else{
			$conditions['Patient']['is_discharge'] 		= $this->request->data['is_discharge'];
		}
		$this->set(array('patientType'=>$getData['admission_type'],'is_discharge'=>$conditions['Patient']['is_discharge']));

	}



	function nonDischargePaymentDues(){
		$this->loadModel();
	}
	/**
	 * doctor wise collection report
	 *
	 */

	public function admin_doctorwise_collection() {
		$this->set('title_for_layout', __('Doctor Wise Collection', true));
		$this->uses = array('DoctorProfile', 'Department', 'Consultant','User');
		$this->layout ='advance';
		$this->DoctorProfile->bindModel(array(
				'belongsTo' => array(
						'User' =>array('foreignKey' => false, 'conditions' => array('User.id = DoctorProfile.user_id')),
						'Initial' =>array('foreignKey' => false, 'conditions' => array('Initial.id = User.initial_id')),
					)
		),false);
		$this->DoctorProfile->virtualFields = array('doctor_name' => 'CONCAT(Initial.name, " ", DoctorProfile.doctor_name)');
		$consultantList = $this->DoctorProfile->find('list',array('fields'=>array('id','doctor_name'),
				'conditions'=>array('User.is_deleted'=>0, 'DoctorProfile.is_deleted'=>0,'User.location_id'=>$this->Session->read('locationid'), 'DoctorProfile.is_registrar'=>0),'order'=>array('DoctorProfile.doctor_name'),'contain' => array('User', 'Initial'), 'order' => array('DoctorProfile.doctor_name'), 'recursive' => 1));
		$this->set('consultantList', $consultantList);
		$this->set('externalConsultantList', $this->Consultant->getExeternalConsultant());
		if ($this->request->is('post') || $this->request->is('put')) {
			$this->doctorWiseCollection($this->request->data);
			if($this->request->data['format'] == "PDF") {
				$this->render('doctorwise_collection_pdf', 'pdf');
			}
			if($this->request->data['format'] == "EXCEL") {
				$this->render('doctorwise_collection_xls','');
			}
		}
	}
	/**
	 * doctor wise collection query
	 *
	 */

	private function doctorWiseCollection($getData=null) {
		$this->uses = array('Patient', 'Location', 'TariffStandard','ConsultantBilling');
		$this->layout ='Advance';
		// get nabh type of hospital location //
		$getNabhStatus = $this->Location->read('accreditation', $this->Session->read('locationid'));
		$from = $this->DateFormat->formatDate2STDForReport($getData['from'],Configure::read('date_format'))." 00:00:00";
		$hospitalType = $this->Session->read('hospitaltype');
		$to = $this->DateFormat->formatDate2STDForReport($getData['to'],Configure::read('date_format'))." 23:59:59";
		$this->ConsultantBilling->bindModel(array(
				'belongsTo' => array('Patient' =>array('foreignKey' => false, 'conditions' => array('Patient.id=ConsultantBilling.patient_id')),
						'DoctorProfile' =>array('foreignKey' => false, 'conditions' => array('DoctorProfile.id=ConsultantBilling.doctor_id')),
						'User' =>array('foreignKey' => false, 'conditions' => array('User.id = DoctorProfile.user_id')),
						'Initial' =>array('foreignKey' => false, 'conditions' => array('Initial.id = User.initial_id')),
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id' )),
						'PatientInitial' =>array('foreignKey' => false,'conditions'=>array('PatientInitial.id =Person.initial_id')),
						'Consultant' =>array('foreignKey' => false, 'conditions' => array('Consultant.id=ConsultantBilling.consultant_id')),
						'InitialAlias' =>array('foreignKey' => false, 'conditions' => array('InitialAlias.id=Consultant.initial_id')),
				)
		),false);

		$conditions['ConsultantBilling'] = array('date BETWEEN ? AND ?'=> array($from,$to));
		if($getData['admission_type'] != "") {
			$conditions['Patient']['admission_type'] = $getData['admission_type'];
		} else {
			$conditions['Patient']['admission_type'] =  array('IPD', 'OPD');

		}
		if($getData['skip_registration'] != "") {
			$conditions['Patient']['treatment_type'] = $getData['skip_registration'];
		}
		if($getData['ipd_patient_status'] != "") {
			$conditions['Patient']['is_discharge'] = $getData['ipd_patient_status'];
		}
		if($getData['opd_patient_status'] != "") {
			$conditions['Patient']['is_discharge'] = $getData['opd_patient_status'];
		}
		if($getData['consultant_type'] == 1) {
			$conditions['ConsultantBilling']['doctor_id NOT'] = 'NULL';
		}
		if($getData['consultant_type'] == 2) {
			$conditions['ConsultantBilling']['consultant_id NOT'] = 'NULL';
		}
		if($getData['treating_consultant'] != "") {
			$conditions['ConsultantBilling']['doctor_id'] = $getData['treating_consultant'];
		}
		if($getData['external_consultant'] != "") {
			$conditions['ConsultantBilling']['consultant_id'] = $getData['external_consultant'];
		}

		$conditions['Patient']['location_id'] = $this->Session->read('locationid');
		$conditions['Patient']['is_deleted'] = 0;

		$conditionsDoctorWiseCollection = $this->postConditions($conditions);
		//print_r($conditionsDoctorWiseCollection);exit;
		$getDoctorWiseCollection = $this->ConsultantBilling->find('all', array('conditions' => $conditionsDoctorWiseCollection, 'fields' => array( 'Person.*','PatientInitial.name','Patient.form_received_on','Patient.form_completed_on', 'Patient.lookup_name', 'Patient.mobile_phone', 'Patient.admission_type','Patient.is_discharge', 'Patient.admission_id', 'Consultant.first_name','Consultant.last_name', 'InitialAlias.name', 'DoctorProfile.doctor_name', 'Initial.name', 'ConsultantBilling.date', 'ConsultantBilling.amount','ConsultantBilling.consultant_id','ConsultantBilling.doctor_id'), 'order' => array('ConsultantBilling.date')));

		$this->set('getDoctorWiseCollection', $getDoctorWiseCollection);


	}
	/**
	 * total concessions report
	 *
	 */

	public function admin_total_concessions() {
		$this->set('title_for_layout', __('Total Concessions', true));
		if ($this->request->is('post') || $this->request->is('put')) {
			$this->totalConcessions($this->request->data);
			if($this->request->data['format'] == "PDF") {
				$this->render('total_concessions_pdf', 'pdf');
			}
			if($this->request->data['format'] == "EXCEL") {
				$this->render('total_concessions_xls','');
			}
		}
	}


	/**
	 * total concessions query
	 *
	 */

	private function totalConcessions($getData=null) {
		$this->uses = array('FinalBilling');
		$this->layout ='Advance';
		$from = $this->DateFormat->formatDate2STDForReport($getData['from'],Configure::read('date_format'))." 00:00:00";
		$to = $this->DateFormat->formatDate2STDForReport($getData['to'],Configure::read('date_format'))." 23:59:59";

		if($getData['admission_type'] != "") {
			$conditions['Patient']['admission_type'] = $getData['admission_type'];
		} else {
			$conditions['Patient']['admission_type'] =  array('IPD', 'OPD');

		}
		if($getData['treating_consultant'] != "") {
			$conditions['Patient']['doctor_id'] = $getData['treating_consultant'];
		}
		if($getData['skip_registration'] != "") {
			$conditions['Patient']['treatment_type'] = $getData['skip_registration'];
		}
		if($getData['ipd_patient_status'] != "") {
			$conditions['Patient']['is_discharge'] = $getData['ipd_patient_status'];
		}
		if($getData['opd_patient_status'] != "") {
			$conditions['Patient']['is_discharge'] = $getData['opd_patient_status'];
		}
		$conditions['Patient']['location_id'] = $this->Session->read('locationid');
		$conditions['Patient']['is_deleted'] = 0;
		// get concessions //
		$this->FinalBilling->bindModel(array('belongsTo'=>array('Patient'=>array('foreignKey'=>'patient_id'),
				'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id' )),
				'Department' =>array('foreignKey' => false,'conditions'=>array('Department.id=Patient.department_id' )),
				'PatientInitial' =>array('foreignKey' => false,'conditions'=>array('PatientInitial.id =Person.initial_id' )),
		)));
		$conditionsBilling['FinalBilling'] = array('discharge_date BETWEEN ? AND ?'=> array($from,$to));
		$conditionsBilling = $this->postConditions(array_merge($conditions,$conditionsBilling));
		$getConcessions = $this->FinalBilling->find("all",array('conditions' => $conditionsBilling, 'fields' => array('PatientInitial.name','Person.*','Patient.form_received_on','Patient.form_completed_on','Patient.lookup_name', 'Patient.mobile_phone', 'Patient.admission_id', 'Patient.address1','Patient.admission_id','Patient.is_discharge','Patient.admission_type', 'FinalBilling.discount_rupees','FinalBilling.discharge_date', 'FinalBilling.reason_of_discharge','FinalBilling.bill_number','FinalBilling.create_time','FinalBilling.reason_for_discount','FinalBilling.total_amount')));
		//debug($getConcessions);
		$this->set('getConcessions', $getConcessions);
		$this->set('patientType', $getData['admission_type']);
	}

	/**
	 * get doctor listing with category type by xmlhttprequest
	 *
	 */
	public function getDoctorsList() {
		$this->uses = array('Consultant', 'DoctorProfile');
		$this->Consultant->virtualFields = array(
				'full_name' => 'CONCAT(Initial.name, " ", Consultant.first_name, " ", Consultant.last_name)'
		);
		if($this->params['isAjax']) {
			// 4 id for registrar only //
			$this->set("familyknown", $this->params->query['familyknowndoctor']);
			if($this->params->query['familyknowndoctor'] == 4) {
				$this->set('doctorlist', $this->DoctorProfile->getRegistrar());
				$this->layout = 'ajax';
				$this->render('/Reports/ajaxgetdoctors');
			} elseif(!empty($this->params->query['familyknowndoctor'])) {
				$this->set('doctorlist', $this->Consultant->find('all', array('fields'=> array('id', 'full_name'),'conditions' => array('Consultant.is_deleted' => 0, 'Consultant.refferer_doctor_id' => $this->params->query['familyknowndoctor'], 'Consultant.location_id' => $this->Session->read('locationid')))));
				$this->layout = 'ajax';
				$this->render('/Reports/ajaxgetdoctors');
			} else {
				// this is for blank ctp //
				$this->layout = 'ajax';
				$this->render('/Reports/ajaxgetcashtype');
			}
		}
	}

	/**
	 * appointment report
	 *
	 */

	public function admin_appointment() {
		$this->uses = array('Department', 'DoctorProfile');
		$this->layout ='advance';
		$this->set('title_for_layout', __('Appointment', true));
		if ($this->request->is('post') || $this->request->is('put')) {
			$this->appointment($this->request->data);
			if($this->request->data['format'] == "PDF") {
				$this->render('appointment_pdf', 'pdf');
			}
			if($this->request->data['format'] == "EXCEL") {
				$this->render('appointment_xls','');
			}
		} else {
			// get department list //
			$departmentList = $this->Department->find('list', array('fields' => array('Department.id', 'Department.name'), 'conditions' => array('Department.location_id' => $this->Session->read('locationid'), 'Department.is_active' => 1)));
			$this->set('departmentList', $departmentList);
			$this->set('doctorList', $this->DoctorProfile->getDoctors());
		}
	}


	/**
	 * appointment details query
	 *
	 */

	private function appointment($getData=null) {
		$this->uses = array('Appointment','TariffList');
		$this->layout ='Advance';
		$from = $this->DateFormat->formatDate2STDForReport($getData['from'],Configure::read('date_format'))." 00:00:00";
		$to = $this->DateFormat->formatDate2STDForReport($getData['to'],Configure::read('date_format'))." 23:59:59";

		if(!(empty($getData['age']))){
			$ageRange = explode('-',$getData['age']);
			$conditions['Patient']= array('age BETWEEN ? AND ?'=> array($ageRange[0],$ageRange[1]));
		}
		if(!empty($getData['gender'])) {
			$conditions['Patient']['sex'] = $getData['gender'];
		}

		// get appointment details //
		$this->Appointment->bindModel(array('belongsTo'=>array('Patient'=>array('foreignKey'=>false,'conditions'=>array("Appointment.patient_id=Patient.id")),
				'DoctorProfile'=>array('foreignKey'=>false,'conditions'=>array("Appointment.doctor_id=DoctorProfile.user_id")),
				'Department'=>array('foreignKey'=>false,'conditions'=>array("Appointment.department_id=Department.id")),
				'User'=>array('foreignKey'=>false,'conditions'=>array("User.id=Appointment.doctor_id")),
				'Initial'=>array('foreignKey'=>false,'conditions'=>array("Initial.id=User.initial_id")),
				'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id' )),
				'Department' =>array('foreignKey' => false,'conditions'=>array('Department.id=Patient.department_id' )),
				'PatientInitial' =>array('foreignKey' => false,'conditions'=>array('PatientInitial.id =Person.initial_id' )),
				'TariffList' => array('foreignKey'=>false,'conditions'=>array('Appointment.visit_type=TariffList.id'),
						'fields'=>array('TariffList.name')),
		)));
		$conditionsAppointment['Appointment'] = array('date BETWEEN ? AND ?'=> array($from,$to));
		if(!empty($getData['department'])) {
			$conditionsAppointment['Appointment']['department_id'] = $getData['department'];
		}
		if(!empty($getData['doctor'])) {
			$conditionsAppointment['Appointment']['doctor_id'] = $getData['doctor'];
		}
		if(!empty($getData['visit_type'])) {
			$conditionsAppointment['Appointment']['visit_type'] = $getData['visit_type'];
		}
		$conditionsAppointment['Appointment']['is_deleted'] = 0;
		$conditionsAppointment['Appointment']['location_id'] = $this->Session->read('locationid');
		if(isset($conditions)) {
			$conditionsAppointment = $this->postConditions(array_merge($conditions,$conditionsAppointment));
		} else {
			$conditionsAppointment = $this->postConditions($conditionsAppointment);
		}
			
		$getAppointmentReport = $this->Appointment->find("all",array('conditions' => $conditionsAppointment, 'fields' => array('PatientInitial.name','Person.*','Patient.lookup_name', 'Patient.mobile_phone', 'Patient.admission_id', 'Patient.address1','Patient.sex','Patient.age','Patient.admission_type','Patient.form_received_on','Patient.form_completed_on', 'Department.name', 'CONCAT(Initial.name, " ", DoctorProfile.doctor_name) as doctor_name','Appointment.date','Appointment.start_time','Appointment.end_time','Appointment.purpose', 'Appointment.visit_type','TariffList.name'), 'order'=> array('Appointment.date DESC')));
		//debug($getAppointmentReport);
		$this->set('getAppointmentReport', $getAppointmentReport);
	}

	/**
	 * get doctor listing department wise by xmlhttprequest
	 * used in admin_appointment, patient_admission_report,patient_admitted_report, patient_ot_report
	 */
	public function getDepartmentDoctorsList() {
		$this->uses = array('DoctorProfile');
		if($this->params['isAjax']) {
			if($this->params->query['deptid']) {
				$this->set('doctorlist', $this->DoctorProfile->getDoctors($this->params->query['deptid']));
				$this->layout = 'ajax';
				$this->render('/Reports/ajaxgetdepartmentdoctors');
			} else {
				// this is for blank ctp //
				$this->layout = 'ajax';
				$this->set('doctorlist','');
				$this->render('/Reports/ajaxgetdepartmentdoctors');
			}
		}

	}

	/**
	@name : admin_patient_admitted_report
	@created for: Admitted report

	**/
	public function admin_patient_admitted_report(){
		$this->uses = array('Patient','Location','Person','Consultant','User','DoctorProfile', 'Department');

		$this->layout ='advance';
		if($this->request->data){
			// pr($this->request->data);exit;
			// Collect required values in variables
			$format = $this->request->data['PatientAdmissionReport']['format'];
			$from = $this->request->data['PatientAdmissionReport']['from'];
			$to =   $this->request->data['PatientAdmissionReport']['to'];
			$sex = $this->request->data['PatientAdmissionReport']['sex'];
			$age = $this->request->data['PatientAdmissionReport']['age'];
			$patient_location = $this->request->data['PatientAdmissionReport']['patient_location'];
			$blood_group = $this->request->data['PatientAdmissionReport']['blood_group'];
			$reference_doctor = $this->request->data['PatientAdmissionReport']['reference_doctor'];
			$patient_type = 'OPD';
			$doctor_type = $this->request->data['doctor'];
			$department_type = $this->request->data['PatientAdmissionReport']['department_type'];
			$payment_category = $this->request->data['PatientRegistrationReport']['payment_category'];
			$credit_type = $this->request->data['PatientRegistrationReport']['sponsor'];
			$corporate_loc = $this->request->data['PatientRegistrationReport']['corporate_location_id'];
			$corporate = $this->request->data['PatientRegistrationReport']['corporate_id'];
			$corporate_sub_loc = $this->request->data['PatientRegistrationReport']['sublocation_id'];
			$insurance_type = $this->request->data['PatientRegistrationReport']['insurance_type_id'];
			$insurance_com = $this->request->data['PatientRegistrationReport']['insurenceCom_id'];


			if(isset($this->request->data['PatientAdmissionReport']['treatment_type'])){
				$treatment_type = $this->request->data['PatientAdmissionReport']['treatment_type'];
			}
			//$sponsor = $this->request->data['PatientRegistrationReport']['sponsor'];
			$record = '';
			//BOF pankaj code
			$this->Patient->bindModel(array(
					'belongsTo' => array(
							'Location' =>array('foreignKey' => 'location_id'),
							'Corporate' =>array('foreignKey' => 'corporate_id'),
							'InsuranceCompany' =>array('foreignKey' => 'insurance_company_id'),
							'Person'=>array('foreignKey'=>'person_id'),
							'DoctorProfile'=>array('foreignKey'=>false,'conditions'=>array('DoctorProfile.user_id=Patient.doctor_id')),
							'User'=>array('foreignKey'=>false,'conditions'=>array('User.id=Patient.doctor_id')),
							'Initial'=>array('foreignKey'=>false,'conditions'=>array('Initial.id=User.initial_id')),
							'Consultant'=>array('foreignKey'=>'consultant_id'),
							'Department'=>array('foreignKey'=>'department_id'),

							'PatientInitial' =>array('foreignKey' => false,'conditions'=>array('PatientInitial.id =Person.initial_id' )),
							'FinalBilling'=>array('foreignKey'=>false,'conditions'=>array('FinalBilling.patient_id=Patient.id'))
					)),false);

			if(!empty($to) && !empty($from)){
				$from = $this->DateFormat->formatDate2STDForReport($this->request->data['PatientAdmissionReport']['from'],Configure::read('date_format'))." 00:00:00";
				$to = $this->DateFormat->formatDate2STDForReport($this->request->data['PatientAdmissionReport']['to'],Configure::read('date_format'))." 23:59:59";
				// get record between two dates. Make condition
				$search_key = array('Patient.form_received_on <=' => $to, 'Patient.form_received_on >=' => $from,'Patient.is_deleted'=>0,'Patient.location_id'=>$this->Session->read('locationid'));
			}else{
				$search_key =array('Patient.location_id'=>$this->Session->read('locationid')) ;
			}

			if(!(empty($payment_category))){
				$search_key['Patient.payment_category'] =  $payment_category;
			}
			if(!(empty($credit_type))){
				$search_key['Patient.credit_type_id'] =  $credit_type;
			}
			if(!(empty($corporate_loc))){
				$search_key['Patient.corporate_location_id'] =  $corporate_loc;
			}
			if(!(empty($corporate))){
				$search_key['Patient.corporate_id'] =  $corporate;
			}
			if(!(empty($corporate_sub_loc))){
				$search_key['Patient.corporate_sublocation_id'] =  $corporate_sub_loc;
			}
			if(!(empty($insurance_type))){
				$search_key['Patient.insurnace_type_id'] =  $insurance_type;
			}
			if(!(empty($insurance_com))){
				$search_key['Patient.insurance_company_id'] =  $insurance_com;
			}
			if(!(empty($sex))){
				$search_key['Person.sex'] =  $sex;
			}
			if(!(empty($age))){
				$ageRange = explode('-',$age);
				$search_key['Person.age between ? and ?'] =  array($ageRange[0],$ageRange[1]);
			}
			if(!(empty($blood_group))){
				$search_key['Person.blood_group'] =  $blood_group;
			}
			if(!empty($patient_location)){
				$search_key['Person.city'] =  $patient_location;
			}
			if(!empty($reference_doctor)){
				$search_key['Patient.consultant_id'] =  $reference_doctor;
			}
			if(!empty($patient_type)){
				if($patient_type == 'Emergency'){
					$search_key['Patient.is_emergency'] = 1;
					$search_key['Patient.admission_type'] =  'IPD';
				} else if($patient_type == 'IPD'){
					$search_key['Patient.admission_type'] =  'IPD';
				} else if($patient_type == 'OPD'){
					if(isset($treatment_type) AND $treatment_type != ''){
						$search_key['Patient.treatment_type'] = $treatment_type;
						$search_key['Patient.admission_type'] =  'OPD';
					} else {
						$search_key['Patient.admission_type'] =  'OPD';
					}
				}
			}

			if(!empty($doctor_type)){
				$search_key['Patient.doctor_id'] =  $doctor_type;
			}
			if(!empty($department_type)){
				$search_key['Patient.department_id'] =  $department_type;
			}


			$selectedFields = '';
			// if you select fields of finalbilling table //
			$finalBillingFields = array('bill_number', 'total_amount', 'amount_paid', 'discount_rupees', 'amount_pending');
			if(!empty($this->request->data['PatientAdmissionReport']['field_id'])){
				foreach($this->request->data['PatientAdmissionReport']['field_id'] as $key=>$value){

					if($value=='department_id'){
						$selectedFields .= ",Department.name";
					} elseif($value=='name_of_ip'){
						$selectedFields .= ",Person.name_of_ip";
					} elseif($value=='executive_emp_id_no'){
						$selectedFields .= ",Person.executive_emp_id_no";
					} elseif(in_array($value, $finalBillingFields)) {
						$selectedFields .= ",FinalBilling.".$this->request->data['PatientAdmissionReport']['field_id'][$key];
					} else {
						$selectedFields .= ",Patient.".$this->request->data['PatientAdmissionReport']['field_id'][$key];
					}
				}
			}
			$fields =array('Corporate.name,Department.name,InsuranceCompany.name,PatientInitial.name,Patient.id,Patient.patient_id,Patient.lookup_name,Patient.is_emergency,Patient.admission_type,Patient.treatment_type,Person.city,Patient.form_received_on,
					Patient.admission_id,Patient.mobile_phone,Person.age,Person.sex,Person.blood_group,CONCAT(Initial.name," ",DoctorProfile.doctor_name) AS doctor_name,CONCAT(Consultant.first_name," ",Consultant.last_name)'.$selectedFields);


			$record = $this->Patient->find('all',array('order'=>array('Patient.form_received_on' => 'ASC'),'fields'=>$fields,'conditions'=>$search_key));
			$this->set('selctedFields',$this->request->data['PatientAdmissionReport']['field_id']);


			//EOF pankaj code
			//pr($record);exit;
			if($format == 'PDF'){
				$this->set('reports',$record);
				$this->set(compact('fieldName'));
				$this->set(compact('patient_type'));
				$this->render('patient_admitted_pdf','pdf');
			} else {
				$this->set('reports', $record);
				$this->set(compact('fieldName'));
				$this->set(compact('patient_type'));
				$this->render('patient_admitted_excel','');
			}
		}
		//patient location
		$this->set('patient_location',$this->Person->find('list',array('fields'=>array('city','city'))));
		$this->set('refrences',$this->Consultant->getConsultant());
		// get department list //
		$departmentList = $this->Department->find('list', array('fields' => array('Department.id', 'Department.name'), 'conditions' => array('Department.location_id' => $this->Session->read('locationid'), 'Department.is_active' => 1)));
		$this->set('departmentList', $departmentList);
		$this->set('doctorList', $this->DoctorProfile->getDoctors());

	}


	/**
	@name : admin_patient_admitted_report_chart
	@created for: Admitted report

	**/
	public function admin_patient_admitted_report_chart(){

		$this->uses = array('Patient','Location','Person','Consultant','User','DoctorProfile');
		$this->layout ='Advance';
		if(!empty($this->request->data)){

			$this->set('title_for_layout', __('Total Admissions Report Chart', true));

			$reportYear = $this->request->data['PatientAdmissionReport']['year'];
			$reference = $this->request->data['PatientAdmissionReport']['reference_doctor'];
			$patient_type = 'IPD';
			$doctor_type = $this->request->data['doctor'];
			$department_type = $this->request->data['PatientAdmissionReport']['department_type'];
			$location_id = $this->Session->read('locationid');
			$consultantName = '';
			$type = 'All';
			$reportMonth = $this->request->data['PatientAdmissionReport']['month'];
			if(!empty($reportMonth)){
				$countDays = cal_days_in_month(CAL_GREGORIAN, $reportMonth, $reportYear); // Days of the month selected
				$fromDate = $reportYear."-".$reportMonth."-01";
				$toDate = $reportYear."-".$reportMonth."-".$countDays;
			} else {
				$fromDate = $reportYear."-01-01"; // set first date of current year
				$toDate = $reportYear."-12-31"; // set last date of current year
			}

			// Bind Models
			$this->Patient->bindModel(array(
					'belongsTo' => array(
							'Location' =>array('foreignKey' => 'location_id'),
							'Person'=>array('foreignKey'=>'person_id'),
							/*'DoctorProfile'=>array('foreignKey'=>false,'conditions'=>array('DoctorProfile.user_id=Patient.doctor_id')),*/
							'Consultant'=>array('foreignKey'=>'consultant_id'),
							'Department'=>array('foreignKey'=>'department_id'),
					)),false);
			// This will not change the actual from date
			$setDate = $fromDate;
			// Create Y axix array as per month
			while($toDate > $setDate) {
				$yaxisArray[date("F-Y", strtotime($setDate))] = date("F", strtotime($setDate));
				$expfromdate = explode("-", $setDate);
				$setDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}

			if($fromDate != '' AND $toDate != ''){
				$toSearch = array('Patient.form_received_on <=' => $toDate, 'Patient.form_received_on >=' => $fromDate, 'Patient.is_deleted'=>0,'Patient.location_id'=>$this->Session->read('locationid'));
			}

			if(!empty($reference)){
				$toSearch['Patient.consultant_id'] = $reference; // Condition reference doctors
			}

			if(!empty($patient_type)){
				$toSearch['Patient.admission_type'] = 'IPD';
			}

			if(!empty($doctor_type)){
				$toSearch['Patient.doctor_id'] = $doctor_type; // Condition reference doctors
			}
			if(!empty($department_type)){
				$toSearch['Patient.department_id'] = $department_type; // Condition reference doctors
			}
			// Collect record here
			$countRecord = $this->Patient->find('all', array('fields' => array('COUNT(*) AS recordcount', 'DATE_FORMAT(form_received_on, "%M-%Y") AS month_reports',
					'Patient.form_received_on', 'Patient.doctor_id','Patient.admission_type','Patient.is_emergency','CONCAT(Consultant.first_name," ",Consultant.last_name)'),
					'conditions' => $toSearch ,'group' => array('month_reports')));

			//pr($countRecord);exit;

			// Set data for view as per record counted
			foreach($countRecord as $countRecordVal) {
				$filterRecordDateArray[] = $countRecordVal[0]['month_reports'];
				$filterRecordCountArray[$countRecordVal[0]['month_reports']] = $countRecordVal[0]['recordcount'];
			}
			$this->set('reportYear', isset($reportYear)?$reportYear:date("Y"));
			$this->set('filterRecordDateArray', isset($filterRecordDateArray)?$filterRecordDateArray:"");
			$this->set('filterRecordCountArray', isset($filterRecordCountArray)?$filterRecordCountArray:0);
			$this->set('yaxisArray', $yaxisArray);
			$this->set(compact('countRecord'));
			$this->set(compact('reportMonth'));
			$this->set(compact('type'));

		}
	}

	/**
	 * birth/death report
	 *
	 */

	public function admin_birth_death() {
		$this->layout ='advance';
		$this->set('title_for_layout', __('Birth/Death', true));
		if ($this->request->is('post') || $this->request->is('put')) {
			if($this->request->data['format'] == "PDF") {
				if($this->request->data['reportType'] == "Death") {
					$this->death_record($this->request->data);
					$this->render('death_pdf', 'pdf');
				}
				if($this->request->data['reportType'] == "Birth") {
					$this->birth_record($this->request->data);
					$this->render('birth_pdf', 'pdf');
				}
			}
			if($this->request->data['format'] == "EXCEL") {
				if($this->request->data['reportType'] == "Death") {
					$this->death_record($this->request->data);
					$this->render('death_xls','');
				}
				if($this->request->data['reportType'] == "Birth") {
					$this->birth_record($this->request->data);
					$this->render('birth_xls','');
				}
			}
		}
	}


	/**
	 * death query
	 *
	 */

	private function death_record($getData=null) {
		$this->layout ='Advance';
		$this->uses = array('DeathCertificate');
		$from = $this->DateFormat->formatDate2STDForReport($getData['from'],Configure::read('date_format'))." 00:00:00";
		$to = $this->DateFormat->formatDate2STDForReport($getData['to'],Configure::read('date_format'))." 23:59:59";
		$this->DeathCertificate->bindModel(array('belongsTo'=>array('Patient'=>array('foreignKey'=>false,'conditions'=>array("DeathCertificate.patient_id=Patient.id")),
				'DoctorProfile'=>array('foreignKey'=>false,'conditions'=>array('DoctorProfile.user_id=Patient.doctor_id')),
				'User'=>array('foreignKey'=>false,'conditions'=>array('User.id=Patient.doctor_id')),
				'Initial'=>array('foreignKey'=>false,'conditions'=>array('Initial.id=User.initial_id')),
				'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id' )),
				'Department' =>array('foreignKey' => false,'conditions'=>array('Department.id=Patient.department_id' )),
				'PatientInitial' =>array('foreignKey' => false,'conditions'=>array('PatientInitial.id =Person.initial_id' )),
		)));

		$conditionsDeath['DeathCertificate'] = array('expired_on BETWEEN ? AND ?'=> array($from,$to));
		$conditionsDeath['Patient'] = array('is_deleted'=> 0, 'location_id'=> $this->Session->read('locationid'));
		$conditionsDeath = $this->postConditions($conditionsDeath);
		$getDeathReport = $this->DeathCertificate->find("all",array('conditions' => $conditionsDeath, 'fields' => array('CONCAT(Initial.name, " ", DoctorProfile.doctor_name) AS doctor_name', 'Patient.lookup_name','PatientInitial.name','Person.*', 'Patient.mobile_phone', 'Patient.admission_id', 'Patient.address1','Patient.sex','Patient.age','Patient.admission_type', 'Patient.form_received_on','Patient.form_completed_on','DeathCertificate.expired_on','DeathCertificate.cause_of_death','DeathCertificate.date_of_issue')));
		$this->set('getDeathReport', $getDeathReport);


	}

	/**
	 * birth query
	 *
	 */

	private function birth_record($getData=null) {
		$this->layout ='Advance';
		$this->uses = array('ChildBirth');
		$from = $this->DateFormat->formatDate2STDForReport($getData['from'],Configure::read('date_format'))." 00:00:00";
		$to = $this->DateFormat->formatDate2STDForReport($getData['to'],Configure::read('date_format'))." 23:59:59";
			
		$this->ChildBirth->bindModel(array('belongsTo'=>array('Patient'=>array('foreignKey'=>'patient_id'),
				'User'=>array('foreignKey'=>false,'conditions'=>array('User.id=Patient.doctor_id')),
				'Initial'=>array('foreignKey'=>false,'conditions'=>array('Initial.id=User.initial_id')),
				'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id' )),
				'Department' =>array('foreignKey' => false,'conditions'=>array('Department.id=Patient.department_id' )),
				'PatientInitial' =>array('foreignKey' => false,'conditions'=>array('PatientInitial.id =Person.initial_id' )),
		)));
		$conditionsBirth['ChildBirth'] = array('dob BETWEEN ? AND ?'=> array($from,$to));
		$conditionsBirth['Patient'] = array('is_deleted'=> 0, 'location_id'=> $this->Session->read('locationid'));
		$conditionsBirth = $this->postConditions($conditionsBirth);
		$getBirthReport = $this->ChildBirth->find("all",array('conditions' => $conditionsBirth, 'fields' => array('Patient.lookup_name','PatientInitial.name','Person.*','Patient.lookup_name', 'Patient.mobile_phone', 'Patient.admission_id', 'Patient.form_received_on','Patient.form_completed_on','Patient.address1','Patient.sex','Patient.age','Patient.admission_type', 'ChildBirth.*', 'CONCAT(Initial.name, " ", User.first_name, " ", User.last_name) AS doctor_name')));
		$this->set('getBirthReport', $getBirthReport);
	}

	/**
	 * birth/death  chart report
	 *
	 */
	public function admin_birth_death_chart(){
		$this->uses = array('DeathCertificate', 'ChildBirth','FinalBilling');
		$this->layout ='Advance';
		$this->set('title_for_layout', __('Birth/Death Chart', true));
		if(!empty($this->request->data)){
			$reportYear = $this->request->data['year'];
			$reportMonth = $this->request->data['month'];
			if(!empty($reportMonth)){
				$countDays = cal_days_in_month(CAL_GREGORIAN, $reportMonth, $reportYear); // Days of the month selected
				$fromDate = $reportYear."-".$reportMonth."-01  00:00:00";
				$toDate = $reportYear."-".$reportMonth."-".$countDays." 23:59:59";
			} else {
				$fromDate = $reportYear."-01-01 00:00:00"; // set first date of current year
				$toDate = $reportYear."-12-31 23:59:59"; // set last date of current year
			}

			// Bind Models
			//$this->DeathCertificate->bindModel(array('belongsTo'=>array('Patient'=>array('foreignKey'=>false,'conditions'=>array("DeathCertificate.patient_id=Patient.id")))));
			//$this->ChildBirth->bindModel(array('belongsTo'=>array('Patient'=>array('foreignKey'=>false,'conditions'=>array("ChildBirth.patient_id=Patient.id")))));
			// This will not change the actual from date
			$setDate = $fromDate;
			// Create Y axix array as per month
			while($toDate > $setDate) {
				$yaxisArray[date("F-Y", strtotime($setDate))] = date("F", strtotime($setDate));
				$expfromdate = explode("-", $setDate);
				$setDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
		//$toDeathSearch = array('DeathCertificate.expired_on  <=' => $toDate, 'DeathCertificate.expired_on >=' => $fromDate, 'Patient.is_deleted'=>0,'Patient.location_id'=>$this->Session->read('locationid'));

			// Collect record here
			
		//added recently
		$recoverCount = $this->FinalBilling->find('all', array('fields' => array('COUNT(*) AS recovercount', 'DATE_FORMAT(discharge_date, "%M-%Y") AS month_reports', 'FinalBilling.discharge_date', 'FinalBilling.reason_of_discharge', 'FinalBilling.location_id', 'FinalBilling.id'), 'group' => array("month_reports  HAVING  discharge_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('FinalBilling.reason_of_discharge' => 'Recovered', 'FinalBilling.location_id' => $this->Session->read('locationid')), 'recursive' => -1));
		foreach($recoverCount as $recoverCountVal) {
			$filterRecoverDateArray[] = $recoverCountVal[0]['month_reports'];
			$filterRecoverCountArray[$recoverCountVal[0]['month_reports']] = $recoverCountVal[0]['recovercount'];
		}
		
		$this->set('filterRecoverDateArray', isset($filterRecoverDateArray)?$filterRecoverDateArray:"");
		$this->set('filterRecoverCountArray', isset($filterRecoverCountArray)?$filterRecoverCountArray:0);
		
		$damaCount = $this->FinalBilling->find('all', array('fields' => array('COUNT(*) AS damarcount', 'DATE_FORMAT(discharge_date, "%M-%Y") AS month_reports', 'FinalBilling.discharge_date', 'FinalBilling.reason_of_discharge', 'FinalBilling.location_id', 'FinalBilling.id'), 'group' => array("month_reports  HAVING  discharge_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'conditions' => array('FinalBilling.reason_of_discharge' => 'DAMA', 'FinalBilling.location_id' => $this->Session->read('locationid')), 'recursive' => -1));
		foreach($damaCount as $damaCountVal) {
			$filterDamaDateArray[] = $damaCountVal[0]['month_reports'];
			$filterDamaCountArray[$damaCountVal[0]['month_reports']] = $damaCountVal[0]['damarcount'];
		}
		
		$this->set('filterDamaDateArray', isset($filterDamaDateArray)?$filterDamaDateArray:"");
		$this->set('filterDamaCountArray', isset($filterDamaCountArray)?$filterDamaCountArray:0);
		 $this->FinalBilling->bindModel(array('belongsTo'=>
				array(
				'DeathCertificate'=>array('type'=>'inner','foreignKey'=>false,'conditions'=>array('FinalBilling.patient_id=DeathCertificate.patient_id'))//'conditions'=>array('FinalBilling.patient_id=DeathCertificate.patient_id AND FinalBilling.reason_of_discharge ="Death"')
		))); 
		
		$deathCount = $this->FinalBilling->find('all', array('fields' => array(
				  'COUNT(*) AS deathcount','DATE_FORMAT(discharge_date, "%M-%Y") AS month_reports', 'FinalBilling.discharge_date',
				 'FinalBilling.reason_of_discharge', 'FinalBilling.location_id', 'FinalBilling.id',
				'FinalBilling.patient_id'), 'conditions' => array('FinalBilling.reason_of_discharge'=>'Death','FinalBilling.location_id' => $this->Session->read('locationid')), 'group' => array("month_reports  HAVING  discharge_date BETWEEN '{$fromDate}' AND '{$toDate}'"),'order'=>array('discharge_date')));
		
		$i=0;
		foreach($deathCount as $deathCount)
		{	
			$year=date("Y",strtotime($deathCount['FinalBilling']['discharge_date']));
			$month=date("F",strtotime($deathCount['FinalBilling']['discharge_date']));
			$dataArray[$year][$month]['death'][]=$deathCount[0]['deathcount'];
			$i++;
			
		}
		
		foreach($damaCount as $damaCount)
		{
			$year=date("Y",strtotime($damaCount['FinalBilling']['discharge_date']));
			$month=date("F",strtotime($damaCount['FinalBilling']['discharge_date']));
			$dataArray[$year][$month]['dama'][]=$damaCount[0]['damarcount'];
			$i++;
				
		}
		foreach($recoverCount as $recoverCount)
		{
			$year=date("Y",strtotime($recoverCount['FinalBilling']['discharge_date']));
			$month=date("F",strtotime($recoverCount['FinalBilling']['discharge_date']));
			$dataArray[$year][$month]['recover'][]=$recoverCount[0]['recovercount'];
			$i++;
		
		} 
			
			
			$this->set('yaxisArray', $yaxisArray);
			$this->set(compact('countRecord','dataArray'));
			$this->set(compact('reportMonth','reportYear'));

			// for birth graph //
			/* $toBirthSearch = array('ChildBirth.dob  <=' => $toDate, 'ChildBirth.dob >=' => $fromDate, 'Patient.is_deleted'=>0,'Patient.location_id'=>$this->Session->read('locationid'));
			$countBirthRecord = $this->ChildBirth->find('all', array('fields' => array('COUNT(*) AS recordcount', 'DATE_FORMAT(ChildBirth.dob, "%M-%Y") AS month_reports',
					'ChildBirth.dob', 'Patient.doctor_id','Patient.admission_type','Patient.is_emergency'),
					'conditions' => $toBirthSearch ,'group' => array('month_reports'))); */


			// Set data for view as per record counted
			foreach($countBirthRecord as $countBirthRecordVal) {
				$filterBirthRecordDateArray[] = $countBirthRecordVal[0]['month_reports'];
				$filterBirthRecordCountArray[$countBirthRecordVal[0]['month_reports']] = $countBirthRecordVal[0]['recordcount'];
			}

			$this->set('filterBirthRecordDateArray', isset($filterBirthRecordDateArray)?$filterBirthRecordDateArray:"");
			$this->set('filterBirthRecordCountArray', isset($filterBirthRecordCountArray)?$filterBirthRecordCountArray:0);
			$this->set(compact('countBirthRecord'));

		}
	}

	/**
	 * ot listing
	 *
	 */
	public function admin_ot_list() {
		$this->layout ='advance';
		$this->loadModel("OptAppointment");
		$this->set('title_for_layout', __('OT Listing', true));
		$this->OptAppointment->unbindModel(array(
				'belongsTo' => array('Initial')));
		$this->OptAppointment->bindModel(array(
				'belongsTo' => array(

						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id' )),
						'PatientInitial' =>array('foreignKey' => false,'conditions'=>array('PatientInitial.id =Person.initial_id')),
						'User' =>array('foreignKey' => false,'conditions'=>array('User.id =DoctorProfile.user_id')),
						'Initial' =>array('foreignKey' => false,'conditions'=>array('Initial.id =User.initial_id')),
						'InitialAlias' =>array('foreignKey' => false,'conditions'=>array('InitialAlias.id =Doctor.initial_id')),

				)),false);
		if ($this->request->is('post') || ($this->request->params['named']['report'] == "excel" || $this->request->params['named']['report'] == "print" && !empty($this->request->params['named']['fromdate']) && !empty($this->request->params['named']['todate']))) {
			if(!empty($this->request->params['named']['fromdate']) && !empty($this->request->params['named']['todate']))  {
				$stdfromdate = $this->request->params['named']['fromdate'];
				$stdtodate = $this->request->params['named']['todate'];
			} else {
				$stdfromdate = $this->DateFormat->formatDate2STDForReport($this->request->data["from"],Configure::read('date_format'))." 00:00:00";
				$stdtodate = $this->DateFormat->formatDate2STDForReport($this->request->data["to"],Configure::read('date_format'))." 23:59:59";
			}
			$data = $this->OptAppointment->find('all', array('conditions' => array('OptAppointment.procedure_complete'=> 0,'OptAppointment.location_id' => $this->Session->read('locationid'), 'OR' => array('OptAppointment.starttime BETWEEN ? AND ?' => array($stdfromdate,$stdtodate),'OptAppointment.endtime BETWEEN ? AND ?' => array($stdfromdate,$stdtodate)), 'OptAppointment.is_deleted' => 0), 'fields' => array('PatientInitial.name','Patient.lookup_name','Patient.admission_id','Patient.admission_type','Patient.form_received_on','Patient.form_completed_on','OptAppointment.starttime','OptAppointment.endtime','Opt.name','OptTable.name','Surgery.name','OptAppointment.operation_type','DoctorProfile.doctor_name','OptAppointment.anaesthesia','Initial.name','InitialAlias.name','Doctor.first_name','Doctor.middle_name','Doctor.last_name')));
			$this->set('stdfromdate', $stdfromdate);
			$this->set('stdtodate', $stdtodate);
		} else {
			$data = $this->OptAppointment->find('all', array('conditions' => array('OptAppointment.procedure_complete'=> 0, 'OptAppointment.location_id' => $this->Session->read('locationid'),'OptAppointment.starttime BETWEEN ? AND ?' => array($this->DateFormat->formatDate2STDForReport(date('Y-m-d'),Configure::read('date_format'))." 00:00:00",$this->DateFormat->formatDate2STDForReport(date('Y-m-d'),Configure::read('date_format'))." 23:59:59"), 'OptAppointment.is_deleted' => 0), 'fields' => array('PatientInitial.name','Patient.lookup_name','Patient.admission_id','Patient.admission_type','Patient.form_received_on','Patient.form_completed_on','OptAppointment.starttime','OptAppointment.endtime','Opt.name','OptTable.name','Surgery.name','OptAppointment.operation_type','DoctorProfile.doctor_name','OptAppointment.anaesthesia','Initial.name','InitialAlias.name','Doctor.first_name','Doctor.middle_name','Doctor.last_name')));
		}
		$this->set('data', $data);
		if($this->request->params['named']['report'] == "print") {
			$this->layout = false;
			$this->render('print_ot_list');
		}
		if($this->request->params['named']['report'] == "excel") {
			$this->layout = false;
			$this->render('ot_list_xls');
		}
	}

	/***
		this function for pharmacy Purchase report
	**/
	public function admin_purchase_report($type="purchase"){
		$this->uses = array("InventoryPurchaseDetail","InventoryPurchaseReturn","InventoryPurchaseItemDetail","PharmacyItem");
		$this->layout ='Advance';
		$this->set('title_for_layout', __('Pharmacy Report - Purchase Report', true));
		if ($this->request->is('post')) {
			$from = $this->DateFormat->formatDate2STDForReport($this->request->data['PharmacyPurchase']['from'],Configure::read('date_format'))." 00:00:00";
			$to = $this->DateFormat->formatDate2STDForReport($this->request->data['PharmacyPurchase']['to'],Configure::read('date_format'))." 23:59:59";
			$format = $this->request->data['PharmacyPurchase']['format'];
			if($this->request->data['PharmacyPurchase']['payment_type'] == "cash" ||  $this->request->data['PharmacyPurchase']['payment_type'] == "credit") {
				$payment_type = $this->request->data['PharmacyPurchase']['payment_type'];
			} else {
				$payment_type = array("cash", "credit");
			}
			$this->set('from',$from);
			$this->set('to',$to);
			if($this->request->data['PharmacyPurchase']['for'] == "Purchase"){
				$this->set('for',"purchase");
				$this->InventoryPurchaseDetail->bindModel(array(
						"hasMany"=>array(
								"InventoryPurchaseItemDetail"=>array("foreignKey"=>"inventory_purchase_detail_id"),
									
						),
						"belongsTo"=>array(
								"InventorySupplier"=>array("foreignKey"=>"party_id"),
								"User"=>array("foreignKey"=>"created_by"),
								'Initial'=>array('foreignKey'=>false,'conditions'=>array('Initial.id=User.initial_id')),
						)

				));
				$record = $this->InventoryPurchaseDetail->find("all",array(
						"conditions"=>array("InventoryPurchaseDetail.location_id" =>$this->Session->read('locationid'),
								'InventoryPurchaseDetail.create_time <=' => $to, 'InventoryPurchaseDetail.create_time >=' => $from,
								'InventoryPurchaseDetail.payment_mode' => $payment_type
						),
							
				));
				foreach($record as $key=>$value){
					foreach($value['InventoryPurchaseItemDetail'] as $k=>$v){
						$this->InventoryPurchaseItemDetail->unbindModel(array("belongsTo"=>array("InventoryPurchaseDetail")));
						$itemdetail = $this->InventoryPurchaseItemDetail->read(null,$v['id']);
						$record[$key]['InventoryPurchaseItemDetail'][$k]['item'] = $itemdetail['PharmacyItem']['name'];
						$record[$key]['InventoryPurchaseItemDetail'][$k]['code'] = $itemdetail['PharmacyItem']['item_code'];
					}
				}
			}else{
				$this->set('for',"return");
				$this->InventoryPurchaseReturn->bindModel(array(
						"hasMany"=>array(
								"InventoryPurchaseReturnItem"=>array("foreignKey"=>"inventory_purchase_return_id"),
						),

						"belongsTo"=>array(
								"InventorySupplier"=>array("foreignKey"=>"party_id"),
								"User"=>array("foreignKey"=>"created_by"),
							 'Initial'=>array('foreignKey'=>false,'conditions'=>array('Initial.id=User.initial_id')),

						)

				));
				$record = $this->InventoryPurchaseReturn->find("all",array(
						"conditions"=>array("InventoryPurchaseReturn.location_id" =>$this->Session->read('locationid'),
								'InventoryPurchaseReturn.create_time <=' => $to,'InventoryPurchaseReturn.create_time >=' => $from
						)
							
				));
				foreach($record as $key=>$value){
					foreach($value['InventoryPurchaseReturnItem'] as $k=>$v){
						$this->PharmacyItem->belongsTo = array();
						$this->PharmacyItem->hasMany = array();
						$this->PharmacyItem->hasOne = array();
						$itemdetail = $this->PharmacyItem->read(null,$v['item_id']);
						$record[$key]['InventoryPurchaseReturnItem'][$k]['item'] = $itemdetail['PharmacyItem']['name'];
						$record[$key]['InventoryPurchaseReturnItem'][$k]['code'] = $itemdetail['PharmacyItem']['item_code'];
					}
				}
			}
			#pr($record);exit;
			$this->set('reports',$record);
			$this->layout = false;
			if($format == 'PDF'){
				if($this->request->data['PharmacyPurchase']['for'] == "Purchase")
					$this->render('purchase_report_pdf');
				else
					$this->render('purchase_return_report_pdf');
			} else {
				if($this->request->data['PharmacyPurchase']['for'] == "Purchase")
					$this->render('purchase_report_excel');
				else
					$this->render('purchase_reportl_return_excel');
			}
		}

	}
	
	
	public function admin_party_wise_purchase_report($type=NULL)
	{
		
		$this->uses = array("PurchaseOrder");			
		$this->set('getLocName',$this->Session->read('location_name'));
		$this->set('getLocAdd1',$this->Session->read('location_address1'));
		$this->set('getLocAdd2',$this->Session->read('location_address2'));
		$this->set('location_zipcode',$this->Session->read('location_zipcode'));
		$this->set('location_country',$this->Session->read('location_country'));
		 $conditions = array("PurchaseOrder.location_id" =>$this->Session->read('locationid'));
		 if(!empty($this->params->query)){
		 	$this->request->data['PurchaseOrder']=$this->params->query;
		 }
		 if(!empty($this->request->data['PurchaseOrder'])){		   
			if(!empty($this->request->data['PurchaseOrder']['supp_id'])){
					$conditions['PurchaseOrder.supplier_id'] = $this->request->data['PurchaseOrder']['supp_id'];
			}
		
		if(!empty($this->request->data['PurchaseOrder']['from'])){			
					$from = $this->DateFormat->formatDate2STD($this->request->data['PurchaseOrder']['from'],Configure::read('date_format'))." 00:00:00";
					$conditions['PurchaseOrder.order_Date >='] = $from;					
			
	     }		
	      if(!empty($this->request->data['PurchaseOrder']['to'])){
	     			$to = $this->DateFormat->formatDate2STD($this->request->data['PurchaseOrder']['to'],Configure::read('date_format'))." 23:59:59";
					$conditions['PurchaseOrder.order_Date <='] = $to;
			}
		 } 
		 $this->PurchaseOrder->unbindModel(array("hasMany"=>array("PurchaseOrderItem")));
		 $this->PurchaseOrder->bindModel(array('belongsTo'=>array(		 
		 		'InventorySupplier'=>array('foreignKey'=>false,
		 				'conditions'=>array('PurchaseOrder.supplier_id = InventorySupplier.id')),
		 )));
		

		//added by pankaj to list products 

		if($this->request->data['PurchaseOrder']['list_products']){
			$this->PurchaseOrder->bindModel(array('hasOne'=>array(
			'PurchaseOrderItem'=>array('type'=>'inner','foreignKey'=>'purchase_order_id'),
			'Product'=>array('type'=>'inner','foreignKey'=>false,'conditions'=>array('Product.id=PurchaseOrderItem.product_id'))))); 
			
			if($type=='excel' || $type=='pdf'){
				$record = $this->PurchaseOrder->find('all',array(
					"limit" => Configure::read('number_of_rows'),
					"fields"=>array('Product.name','PurchaseOrderItem.purchase_price','PurchaseOrderItem.mrp',
						'PurchaseOrder.party_invoice_number','PurchaseOrder.order_date','PurchaseOrder.net_amount',
		 				'InventorySupplier.name'
						),
				"conditions"=>$conditions,
					'order' => array('InventorySupplier.name' => 'desc')));
			}else{
				$this->paginate = array(
					"limit" => Configure::read('number_of_rows'),
					"fields"=>array('Product.name','PurchaseOrderItem.purchase_price','PurchaseOrderItem.mrp','PurchaseOrder.party_invoice_number','PurchaseOrder.order_date','PurchaseOrder.net_amount',
		 				'InventorySupplier.name'
						),
				"conditions"=>$conditions,
					'order' => array('InventorySupplier.name' => 'desc'),
					/*"group"=>array('InventoryPurchaseDetail.id')*/
						);
				$record = $this->paginate('PurchaseOrder');	
			}
		}else{  
			if($type=='excel' || $type=='pdf'){
				$record = $this->PurchaseOrder->find('all',array(
					"limit" => Configure::read('number_of_rows'),
					"fields"=>array('PurchaseOrder.id','PurchaseOrder.party_invoice_number','PurchaseOrder.order_date','PurchaseOrder.net_amount','PurchaseOrder.supplier_id',
		 				'InventorySupplier.name'
						),
				"conditions"=>$conditions,
					'order' => array('InventorySupplier.name' => 'desc')));
			}else{
				$this->paginate = array(
					"limit" => Configure::read('number_of_rows'),
					"fields"=>array('PurchaseOrder.id','PurchaseOrder.party_invoice_number','PurchaseOrder.order_date','PurchaseOrder.net_amount','PurchaseOrder.supplier_id',
		 				'InventorySupplier.name'
						
						),
				"conditions"=>$conditions,
					'order' => array('PurchaseOrder.id' => 'desc'), );
				$record = $this->paginate('PurchaseOrder');	
			}

		}
		//EOF pankaj 
		 
		
	
	    $this->set('reports',$record);

	    if($type=='excel'){
	    	$this->autoRender = false;
	    	$this->layout = false ;
	    	$this->render('party_wise_purchase_report_xls',false);
	    }else  if($type=='pdf'){
	    	$this->autoRender = false;
	    	$this->layout = false ;
	    	$this->render('party_wise_purchase_report_pdf',false);
	    }
		    
	}
	public function admin_patient_wise_sale($type = NULL) {
		
	$this->uses = array("PharmacySalesBill","Patient","InventoryPharmacySalesReturn","PharmacyItem","PharmacySalesBillDetail","Initial");
	
	$conditions	= array("PharmacySalesBill.location_id" =>$this->Session->read('locationid'));
	$this->PharmacySalesBillDetail->bindModel(array("belongsTo"=>array(
			'PharmacyItem' => array('foreignKey' => false,'conditions'=>array('PharmacyItem.id = PharmacySalesBillDetail.item_id'),
			))));
	
		if(!empty($this->request->query))
		{
			if(!empty($this->request->query['lookup_name']))
			{
				if($this->request->query['lookup_name'] != 'null')
				{
					$conditions['Patient.lookup_name'] = $this->request->query['lookup_name'];
				}
			}
			if(!empty($this->request->query['from']))
			{
				if($this->request->query['from'] != 'null')
				{
					$from = $this->DateFormat->formatDate2STD($this->request->query['from'],Configure::read('date_format'))." 00:00:00";
					$conditions['PharmacySalesBill.create_time >='] = $from;
				}
			}
			if(!empty($this->request->query['to']))
			{
				if($this->request->query['to'] != 'null')
				{
					$to = $this->DateFormat->formatDate2STD($this->request->query['to'],Configure::read('date_format'))." 23:59:59";
					$conditions['PharmacySalesBill.create_time <='] = $to;
				}
			}
		}
		//debug($conditions);
		
		$this->paginate = array(
				"limit" => Configure::read('number_of_rows'),
				"fields"=>array('Patient.lookup_name','PharmacySalesBill.payment_mode','PharmacySalesBill.total','PharmacySalesBill.tax','PharmacySalesBill.create_time'),
				"conditions"=>$conditions,
				'order' => array('PharmacySalesBill.create_time' => 'desc')
		);	
		$record = $this->paginate('PharmacySalesBill');	
		foreach($record as $key=>$value){
			foreach($value['PharmacySalesBillDetail'] as $k=>$v){
				$this->PharmacySalesBillDetail->unbindModel(array("belongsTo"=>array("PharmacySalesBill")));
				$itemdetail = $this->PharmacySalesBillDetail->read(null,$v['id']);
				$record[$key]['PharmacySalesBillDetail'][$k]['item'] = $itemdetail['PharmacyItem']['name'];
			}
		}
		$items = $record[$key]['PharmacySalesBillDetail'][$k]['item'];
			$this->set('items',$items);
			$this->set('reports',$record);
	
		
	
		if($type=='excel'){
			$this->autoRender = false;
			$this->layout = false ;
			$this->render('patient_wise_sale_xls',false);
		}
	
	}
	/***
	 this function for pharmacy product wise Sale report
	**/
	
	public function admin_product_wise_sale($type = null) {
		$this->uses = array("PharmacySalesBill","PharmacyItem","PharmacySalesBillDetail");
		$conditions = array("PharmacySalesBill.location_id" =>$this->Session->read('locationid'));
		if(!empty($this->request->query))
		{
			if(!empty($this->request->query['product_name']))
			{
				if($this->request->query['product_name'] != 'null')
				{
					$conditions['PharmacyItem.name'] = $this->request->query['product_name'];
				}
			}
			if(!empty($this->request->query['from']))
			{
				if($this->request->query['from'] != 'null')
				{
					$from = $this->DateFormat->formatDate2STD($this->request->query['from'],Configure::read('date_format'))." 00:00:00";
					$conditions['PharmacySalesBill.create_time >='] = $from;
				}
			}
			if(!empty($this->request->query['to']))
			{
				if($this->request->query['to'] != 'null')
				{
					$to = $this->DateFormat->formatDate2STD($this->request->query['to'],Configure::read('date_format'))." 23:59:59";
					$conditions['PharmacySalesBill.create_time <='] = $to;
				}
			}
		}	
		
	/* 	 $this->PharmacySalesBill->unbindModel(array('belongsTo'=>array('Patient','Doctor','Initial'),
				'hasMany'=>array('PharmacySalesBillDetail')));
		
		$this->PharmacyItem->bindModel(array(
					'belongsTo' => array(
							'PharmacySalesBillDetail' =>array('foreignKey' => false),
							array('conditions'=>array('PharmacySalesBillDetail.item_id = PharmacyItem.id')),
							'PharmacySalesBill' =>array('foreignKey' => false),array('PharmacySalesBill.id = PharmacySalesBillDetail.pharmacy_sales_bill_id','PharmacySalesBill.is_deleted' =>'0')
					)
	
				)); */
	$this->paginate = array(
			"limit" => Configure::read('number_of_rows'),
			//"fields"=>array('PharmacyItem.stock'),
			 "conditions"=>$conditions,
			//"group"=> array('PharmacyItem.id')
	);
	$record = $this->paginate('PharmacySalesBill');  //debug($record);
		foreach($record as $key=>$value){
					foreach($value['PharmacySalesBillDetail'] as $k=>$v){
						$this->PharmacySalesBillDetail->unbindModel(array("belongsTo"=>array("PharmacySalesBill")));
						$itemdetail = $this->PharmacySalesBillDetail->read(null,$v['id']);
						$record[$key]['PharmacySalesBillDetail'][$k]['item'] = $itemdetail['PharmacyItem']['name'];	
				}
		} 
		
		//debug($record);exit;
		$items = $record[$key]['PharmacySalesBillDetail'][$k]['item'];
		$this->set('items',$items); 
		$this->set('reports',$record);
				
			
		if($type=='excel'){
			$this->autoRender = false;
			$this->layout = false ;
			$this->render('product_sale_xls',false);
		}
			
	
	}
	public function admin_purchase_day_book($type = null) {
		
	}
	public function admin_sale_day_book($type = null) {
		
	}
	public function admin_receipt_payment_account_eport() {
		
	}
	
	/**
	 * function to search Sales Report
	 * @author Mahalaxmi
	 */
	public function admin_sales_report($type="sale"){
		$this->layout ='advance';	
		$this->uses = array("PharmacySalesBill","InventoryPharmacySalesReturn","PharmacyItem","PharmacySalesBillDetail","Initial","Billing","ServiceCategory","PharmacyReturnDetail");
		$this->set('title_for_layout', __('Pharmacy Report - Sale Report', true));
		$this->set('getLocName',$this->Session->read('location_name'));
		$this->set('getLocAdd1',$this->Session->read('location_address1'));
		$this->set('getLocAdd2',$this->Session->read('location_address2'));		
		$this->set('location_zipcode',$this->Session->read('location_zipcode'));		
		$this->set('location_country',$this->Session->read('location_country'));		
		if ($this->request->is('post')) { 
			$from = $this->DateFormat->formatDate2STDForReport($this->request->data['PharmacySale']['from'],Configure::read('date_format'))." 00:00:00";
			$to = $this->DateFormat->formatDate2STDForReport($this->request->data['PharmacySale']['to'],Configure::read('date_format'))." 23:59:59";
			$format = $this->request->data['PharmacySale']['format'];
			if($this->request->data['PharmacySale']['payment_type'] == "cash" ||  $this->request->data['PharmacySale']['payment_type'] == "credit") {
				$payment_type = $this->request->data['PharmacySale']['payment_type'];
			} else {
				$payment_type = array("cash", "credit");
			}
			$this->set('from',$from);
			$this->set('to',$to);
			if($this->request->data['PharmacySale']['for'] == "Sales"){
				$this->set('for',"Sale");
				$this->PharmacySalesBill->bindModel(array(
						"belongsTo"=>array("User"=>array("foreignKey"=>"created_by"),)));
				$record = $this->PharmacySalesBill->find("all",array(
						'fields'=>array('PharmacySalesBill.payment_mode',
						 'PharmacySalesBill.paid_amnt','PharmacySalesBill.total','PharmacySalesBill.create_time','PharmacySalesBill.bill_code',
								'PharmacySalesBill.patient_id','PharmacySalesBill.customer_name','PharmacySalesBill.discount','User.first_name','User.last_name',
								'Patient.lookup_name','Patient.patient_id'),
						"conditions"=>array("PharmacySalesBill.location_id" =>$this->Session->read('locationid'),
								'PharmacySalesBill.create_time <=' => $to, 'PharmacySalesBill.create_time >=' => $from,
								'PharmacySalesBill.payment_mode' => $payment_type,'PharmacySalesBill.is_deleted'=>'0'),'order'=>array('PharmacySalesBill.bill_code')));
	
				$totalCreditAmt=0;
				$totalCashAmt=0;
				$getTotalAmt=0;
				$totalAmt=0;
				foreach($record as $key=>$value){
					if(trim(strtolower($value['PharmacySalesBill']['payment_mode']))=='credit'){
						$flagCredit=true;	
						//if(empty($value['PharmacySalesBill']['paid_amnt'])){
							$value['PharmacySalesBill']['paid_amnt']=$value['PharmacySalesBill']['total']-$value['PharmacySalesBill']['discount'];
						//}					
						$totalCreditAmt=$totalCreditAmt+round($value['PharmacySalesBill']['paid_amnt']);
					}else if(trim(strtolower($value['PharmacySalesBill']['payment_mode']))=='cash'){
						$flagCash=true;
						//if(empty($value['PharmacySalesBill']['paid_amnt'])){
							$value['PharmacySalesBill']['paid_amnt']=$value['PharmacySalesBill']['total']-$value['PharmacySalesBill']['discount'];
						//}
						$totalCashAmt=$totalCashAmt+round($value['PharmacySalesBill']['paid_amnt']);						
					}	
					//if(empty($value['PharmacySalesBill']['paid_amnt'])){
						$value['PharmacySalesBill']['paid_amnt']=$value['PharmacySalesBill']['total']-$value['PharmacySalesBill']['discount'];
					//}				
					$getTotalAmt=$getTotalAmt+round($value['PharmacySalesBill']['paid_amnt']);						
					$totalAmt=$totalAmt+$value['PharmacySalesBill']['total'];
					foreach($value['PharmacySalesBillDetail'] as $k=>$v){
						$this->PharmacySalesBillDetail->unbindModel(array("belongsTo"=>array("PharmacySalesBill")));
						$itemdetail = $this->PharmacySalesBillDetail->read(null,$v['id']);
						$record[$key]['PharmacySalesBillDetail'][$k]['item'] = $itemdetail['PharmacyItem']['name'];
						$record[$key]['PharmacySalesBillDetail'][$k]['code'] = $itemdetail['PharmacyItem']['item_code'];
					}
				}
				
			}else{
				$this->set('for',"Sale Return");
				$this->InventoryPharmacySalesReturn->bindModel(array(
						"belongsTo"=>array(
								"User"=>array("foreignKey"=>"created_by"),
							 	'Initial'=>array('foreignKey'=>false,'conditions'=>array('Initial.id=User.initial_id')),
						)
				));
				
				/* Credited Pharmacy sales return - from billing the patient dont have entry in billing  
				 * Credited Direct Sales return- they dont have entry in billing as well as patient_id null in sales return
				 * Cash paid Pharmacy Sales Return - having entry in Billing with Patient_id nd paid_to_patient, paymentCategory, mode_of_payment
				 * Cash Paid Direct Return - having entry in Pharmacy Sales Bill in paid_to_patient 
				 */
				$pharmacyCategoryId=$this->ServiceCategory->getPharmacyId();
				$conditions['InventoryPharmacySalesReturn.location_id']=$this->Session->read('locationid');
				$conditions['InventoryPharmacySalesReturn.create_time <=']=$to;
				/* $conditions['InventoryPharmacySalesReturn.is_deleted'] = 0; */
				$conditions['InventoryPharmacySalesReturn.create_time >=']=$from;
				
				$record = $this->InventoryPharmacySalesReturn->find("all",array(
						"fields"=>array("InventoryPharmacySalesReturn.id","InventoryPharmacySalesReturn.create_time","InventoryPharmacySalesReturn.patient_id",
								"InventoryPharmacySalesReturn.customer_name","InventoryPharmacySalesReturn.total","InventoryPharmacySalesReturn.discount","InventoryPharmacySalesReturn.bill_code",
								"InventoryPharmacySalesReturn.pharmacy_sale_bill_id","InventoryPharmacySalesReturn.is_deleted","InventoryPharmacySalesReturn.payment_mode",
								'User.first_name','User.last_name','Patient.lookup_name','Patient.patient_id'),
						"conditions"=>$conditions,
						"order"=>array("InventoryPharmacySalesReturn.create_time"),
							
				));
				//1. Cash returned Amount of Pharmacy sales
				$frmBilling = $this->Billing->find('all',array(
								'conditions'=>array('Billing.payment_category'=>$pharmacyCategoryId,'Billing.mode_of_payment'=>"Cash",'Billing.refund'=>"1",'Billing.date <='=>$to,'Billing.date >='=>$from),
								'fields'=>array('sum(Billing.paid_to_patient)as returnedCash')
						));
			
				//2. Direct Sales Return Amount from PharmacyReturnDetails - new Table by Mrunal - 6/7/15
				$this->PharmacyReturnDetail->bindModel(array(
						"belongsTo"=>array(
								"InventoryPharmacySalesReturn"=>array("foreignKey"=>'pharmacy_sales_return_id'),
						)
				));
				
				$salesData = $this->PharmacyReturnDetail->find('all',array(
						'conditions'=>array('PharmacyReturnDetail.create_time <='=>$to,'PharmacyReturnDetail.create_time >='=>$from,'InventoryPharmacySalesReturn.is_deleted'=>0),
						'fields'=>array('sum(PharmacyReturnDetail.paid_to_patient)as directRefund') 
						));
				
				$getTotalAmt=0;
				foreach($record as $key=>$value){						
					$getTotalAmt=$getTotalAmt+$value['InventoryPharmacySalesReturn']['total'];									
					foreach($value['InventoryPharmacySalesReturnsDetail'] as $k=>$v){
						$this->PharmacyItem->belongsTo = array();
						$this->PharmacyItem->hasMany = array();
						$this->PharmacyItem->hasOne = array();
						$itemdetail = $this->PharmacyItem->read(null,$v['item_id']);
						$record[$key]['InventoryPharmacySalesReturnsDetail'][$k]['item'] = $itemdetail['PharmacyItem']['name'];
						$record[$key]['InventoryPharmacySalesReturnsDetail'][$k]['code'] = $itemdetail['PharmacyItem']['item_code'];
						$qty = $v['qty'];
						$qtyType = $v['qty_type'];
						$returnPack = $v['pack'];
						if(!empty($v['sale_price'])) {
							$price = $v['sale_price'] ;
						}else{
							$price = $v['mrp'] ;
						}
						//debug($price);
						if($qtyType == "Tab"){
							$amount =($price/ $returnPack) * $qty;							
						}else{
							$amount = $price * $qty;							
						}
						
						$totalreturnAmt[$v['inventory_pharmacy_sales_return_id']] += $amount;
					
						$totalreturnBilledAmt[$v['inventory_pharmacy_sales_return_id']] += $v['return_tot_amount'];
						
					}
				}
			}
			$this->set('reports',$record);
			$this->set(array('totalreturnBilledAmt'=>$totalreturnBilledAmt,'salesData'=>$salesData,'frmBilling'=>$frmBilling,'totalreturnAmt'=>$totalreturnAmt,'totalAmt'=>$totalAmt,'flagCash'=>$flagCash,'flagCredit'=>$flagCredit,'totalCreditAmt'=>$totalCreditAmt,'totalCashAmt'=>$totalCashAmt,'getTotalAmt'=>$getTotalAmt,'showItem'=>$this->request->data['PharmacySale']['show_item']));
			$this->layout = false;
			if($format == 'PDF'){
				if($this->request->data['PharmacySale']['for'] == "Sales")
					$this->render('sale_report_pdf');
				else
					$this->render('sale_return_report_pdf');
			} else {
				if($this->request->data['PharmacySale']['for'] == "Sales")
					$this->render('sale_report_excel');
				else
					$this->render('sale_return_report_excel');
			}

		}

	}

	/**
	 * function to search Sales Hope Report Only
	 * @author Mahalaxmi
	 */
	public function salesCollectionReport($type="sale"){
		$this->layout ='advance';
		$this->uses = array("PharmacySalesBill","InventoryPharmacySalesReturn","PharmacyItem","PharmacySalesBillDetail","Initial","ServiceCategory",'Billing');
		$this->set('title_for_layout', __('Pharmacy Report - Sale Report', true));
		if ($this->request->is('post')) { 		
			$from = $this->DateFormat->formatDate2STDForReport($this->request->data['PharmacySale']['from'],Configure::read('date_format'))." 00:00:00";
			$to = $this->DateFormat->formatDate2STDForReport($this->request->data['PharmacySale']['to'],Configure::read('date_format'))." 23:59:59";
			$format = $this->request->data['PharmacySale']['format'];
		
			$this->set('from',$from);
			$this->set('to',$to);
			$pharmacyCategoryId=$this->ServiceCategory->getPharmacyId();//in case need of pharmacy category ID
				
			//payment_Category is the service_id
			
				$this->set('for',"Sale");
				$this->PharmacySalesBill->unBindModel(array('belongsTo'=>array('Doctor','Initial'),'hasMany'=>array('PharmacySalesBillDetail')));
			/*	$this->PharmacySalesBill->bindModel(
							array('belongsTo' => array(							
									'Billing' => array('foreignKey'=>false,'conditions'=> array('Billing.patient_id=PharmacySalesBill.patient_id',"Billing.payment_category"=>$pharmacyCategoryId,"OR"=>array("Billing.amount <>"=>0,"Billing.paid_to_patient <>"=>0))),													
				)));	*/	
				$record = $this->PharmacySalesBill->find("all",array("fields"=>array("SUM(PharmacySalesBill.total) as totalAmt","Patient.lookup_name","PharmacySalesBill.*"),"conditions"=>array("PharmacySalesBill.location_id" =>$this->Session->read('locationid'),
				'PharmacySalesBill.create_time <=' => $to, 'PharmacySalesBill.create_time >=' => $from,		),"group"=>array('PharmacySalesBill.patient_id'),'order'=>array('PharmacySalesBill.create_time'=>'ASC')));
				//debug($this->PharmacySalesBill->getDataSource()->getLog(false, false));exit;
				
				$recordBilling = $this->Billing->find("all",array("fields"=>array("SUM(Billing.amount)-SUM(Billing.paid_to_patient) as billingAmt",'Billing.patient_id'),
						"conditions"=>array("Billing.location_id" =>$this->Session->read('locationid'),
								'Billing.date <=' => $to, 'Billing.date >=' => $from,
								"Billing.payment_category"=>$pharmacyCategoryId,
								/*"Billing.amount <>"=>0	*/							
						),"group"=>array('Billing.patient_id')
								
				));
		
				foreach($recordBilling as $keyBill=>$recordBillings){
					$billArr[$recordBillings['Billing']['patient_id']]=$recordBillings[0]['billingAmt'];
				}			
			
				$recordArr=array();
				/*$paidAmtCredit=array();
				$paidAmtCash=array();
				
				foreach($record as $key=>$values){
					if(empty($values['PharmacySalesBill']['paid_amnt'])){
						$values['PharmacySalesBill']['paid_amnt']=$values['PharmacySalesBill']['total'];
					}
				
					if(trim(strtolower($values['PharmacySalesBill']['payment_mode']))=='credit' || empty($values['PharmacySalesBill']['billing_id'])){
						//$flagCredit=true;						
						$paidAmtCredit[$values['PharmacySalesBill']['patient_id']]=$paidAmtCredit[$values['PharmacySalesBill']['patient_id']]+$values['PharmacySalesBill']['paid_amnt'];
					}
				
					if(trim(strtolower($values['PharmacySalesBill']['payment_mode']))=='cash' || !empty($values['PharmacySalesBill']['billing_id'])){
						//$flagCash=true;
						$paidAmtCash[$values['PharmacySalesBill']['patient_id']]=$paidAmtCash[$values['PharmacySalesBill']['patient_id']]+$values['PharmacySalesBill']['paid_amnt'];
					}					
				}*/
			
				foreach($record as $key=>$value){

						$recordArr[$value['PharmacySalesBill']['patient_id']]['lookup_name']=$value['Patient']['lookup_name'];
						$recordArr[$value['PharmacySalesBill']['patient_id']]['patient_id']=$value['PharmacySalesBill']['patient_id'];
						$recordArr[$value['PharmacySalesBill']['patient_id']]['customer_name']=$value['PharmacySalesBill']['customer_name'];
						$recordArr[$value['PharmacySalesBill']['patient_id']]['create_time']=$value['PharmacySalesBill']['create_time'];
						$recordArr[$value['PharmacySalesBill']['patient_id']]['payment_mode']=$value['PharmacySalesBill']['payment_mode'];
						if(trim(strtolower($value['PharmacySalesBill']['payment_mode']))=="credit" && !empty($value['PharmacySalesBill']['total'])){
							$recordArr[$value['PharmacySalesBill']['patient_id']]['credit_amnt']= $recordArr[$value['PharmacySalesBill']['patient_id']]['credit_amnt']+$value['PharmacySalesBill']['total'];					
						}
						if(!empty($value['Billing']['amount'])){
							$recordArr[$value['PharmacySalesBill']['patient_id']]['cash_amnt']= $recordArr[$value['PharmacySalesBill']['patient_id']]['cash_amnt']+$value['Billing']['amount'];
							//$recordArr[$value['PharmacySalesBill']['patient_id']]['cash_amnt']=$paidAmtCash[$value['PharmacySalesBill']['patient_id']];
						}	
						
						
				}	
				
			$this->set(array('recordArr'=>$record,'billArr'=>$billArr));
			$this->layout = false;
			if($format == 'PDF'){				
				$this->render('sales_collection_report_pdf');						
		    } else {					
				$this->render('sales_collection_report_excel');
						
			}
	
			}
	
		}
	
	/**
	 * card patient status report
	 *
	 */

	public function admin_card_patients_status() {
		$this->set('title_for_layout', __('Total Concessions', true));
		if ($this->request->is('post') || $this->request->is('put')) {
			$this->cardPatientStatus($this->request->data);
			if($this->request->data['format'] == "PDF") {
				$this->render('card_patient_status_pdf', 'pdf');
			}
			if($this->request->data['format'] == "EXCEL") {
				$this->render('card_patient_status_xls','');
			}
		}
	}


	/**
	 * card patient status query
	 *
	 */

	private function cardPatientStatus($getData=null) {
		$this->uses = array('Patient');
		$from = $this->DateFormat->formatDate2STDForReport($getData['from'],Configure::read('date_format'))." 00:00:00";
		$to = $this->DateFormat->formatDate2STDForReport($getData['to'],Configure::read('date_format'))." 23:59:59";
		$conditions['Patient'] = array('form_received_on BETWEEN ? AND ?'=> array($from,$to));
		if($getData['admission_type'] != "") {
			$conditions['Patient']['admission_type'] = $getData['admission_type'];
		} else {
			$conditions['Patient']['admission_type'] =  array('IPD', 'OPD');

		}
		if($getData['skip_registration'] != "") {
			$conditions['Patient']['treatment_type'] = $getData['skip_registration'];
		}
		if($getData['ipd_patient_status'] != "") {
			$conditions['Patient']['is_discharge'] = $getData['ipd_patient_status'];
		}
		if($getData['opd_patient_status'] != "") {
			$conditions['Patient']['is_discharge'] = $getData['opd_patient_status'];
		}
		$conditions['Patient']['location_id'] = $this->Session->read('locationid');
		$conditions['Patient']['is_deleted'] = 0;
		$conditions['Patient']['payment_category NOT'] = 'cash';

		$conditions = $this->postConditions($conditions);
		$this->Patient->bindModel(array('belongsTo' => array('Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id' )),
				'PatientInitial' =>array('foreignKey' => false,'conditions'=>array('PatientInitial.id =Person.initial_id')),
				'Corporate' =>array('foreignKey' => 'corporate_id'),
				'InsuranceCompany' =>array('foreignKey' => 'insurance_company_id'),
		)),false);
		$getDetails = $this->Patient->find("all",array('order' => array('Patient.form_received_on DESC'),'conditions' => $conditions, 'fields' => array('PatientInitial.name','Person.*','Patient.form_received_on','Patient.form_completed_on','Patient.lookup_name', 'Patient.mobile_phone', 'Patient.admission_id', 'Patient.address1','Patient.admission_id','Patient.is_discharge','Patient.admission_type', 'Patient.status','Patient.remark','Patient.corporate_id','Patient.insurance_company_id','Corporate.name','InsuranceCompany.name')));
		$this->set('getDetails', $getDetails);

	}

	/**
	 * OT utilization rate
	 *
	 */

	public function admin_ot_utilization_rate() {
		$this->set('title_for_layout', __('OT Utilization Rate', true));
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->otutilizationrate($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		} else {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31"; // set last date of current year
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
			$this->otutilizationrate();

		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
	}


	/**
	 * OT utilization rate query
	 *
	 */

	private function otutilizationrate($fromDate=null,$toDate=null) {
		$this->uses = array('OptAppointment');
		//$this->layout ='Advance';
		if(empty($fromDate) && empty($toDate)) {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31";
		}

		// count number of invasive procedure performed //
		$procedureCount = $this->OptAppointment->find('all', array('fields' => array('COUNT(*) AS procedurecount', 'DATE_FORMAT(starttime, "%M-%Y") AS month_reports', 'OptAppointment.patient_id', 'OptAppointment.location_id', 'OptAppointment.id'), 'conditions' => array('OptAppointment.location_id' => $this->Session->read('locationid'),'OptAppointment.is_deleted=0'/*, 'OptAppointment.procedure_complete' => 1*/,'OptAppointment.starttime BETWEEN ? AND ?' => array($fromDate, $toDate)), 'group' => array('month_reports'), 'recursive' => -1));
		foreach($procedureCount as $procedureCountVal) {
			$filterProcedureDateArray[] = $procedureCountVal[0]['month_reports'];
			$filterProcedureCountArray[$procedureCountVal[0]['month_reports']] = $procedureCountVal[0]['procedurecount'];
		}
		$this->set('filterProcedureDateArray', isset($filterProcedureDateArray)?$filterProcedureDateArray:"");
		$this->set('filterProcedureCountArray', isset($filterProcedureCountArray)?$filterProcedureCountArray:0);

		// total time for invasive procedure performed //
		$totalTime = $this->OptAppointment->find('all', array('fields' => array('COUNT(*) AS procedurecount','SUM(TIMESTAMPDIFF(MINUTE , starttime, endtime)) AS totaltime' , 'DATE_FORMAT(starttime, "%M-%Y") AS month_reports', 'OptAppointment.patient_id', 'OptAppointment.location_id', 'OptAppointment.id'), 'conditions' => array('OptAppointment.location_id' => $this->Session->read('locationid'),'OptAppointment.is_deleted=0'/*, 'OptAppointment.procedure_complete' => 1*/,'OptAppointment.starttime BETWEEN ? AND ?' => array($fromDate, $toDate)), 'group' => array('month_reports'), 'recursive' => -1));
		foreach($totalTime as $totalTimeVal) {
			$filterTotalTimeDateArray[] = $totalTimeVal[0]['month_reports'];
			$filterTotalTimeArray[$totalTimeVal[0]['month_reports']] = $totalTimeVal[0]['totaltime'];
		}
		$this->set('filterTotalTimeDateArray', isset($filterTotalTimeDateArray)?$filterTotalTimeDateArray:"");
		$this->set('filterTotalTimeArray', isset($filterTotalTimeArray)?$filterTotalTimeArray:0);

		// total time  with patient for invasive procedure performed //
		$totalTimeTaken = $this->OptAppointment->find('all', array('fields' => array('COUNT(*) AS procedurecount','SUM(TIMESTAMPDIFF(MINUTE , ot_in_date, out_date)) AS totaltimetaken' , 'DATE_FORMAT(starttime, "%M-%Y") AS month_reports', 'OptAppointment.patient_id', 'OptAppointment.location_id', 'OptAppointment.id'), 'conditions' => array('OptAppointment.location_id' => $this->Session->read('locationid')/*, 'OptAppointment.procedure_complete' => 1*/,'OptAppointment.is_deleted=0','OptAppointment.starttime BETWEEN ? AND ?' => array($fromDate, $toDate)), 'group' => array('month_reports'), 'recursive' => -1));
		foreach($totalTimeTaken as $totalTimeTakenVal) {
			$filterTotalTimeTakenDateArray[] = $totalTimeTakenVal[0]['month_reports'];
			$filterTotalTimeTakenArray[$totalTimeTakenVal[0]['month_reports']] = $totalTimeTakenVal[0]['totaltimetaken'];
		}
		$this->set('filterTotalTimeTakenDateArray', isset($filterTotalTimeTakenDateArray)?$filterTotalTimeTakenDateArray:"");
		$this->set('filterTotalTimeTakenArray', isset($filterTotalTimeTakenArray)?$filterTotalTimeTakenArray:0);

	}

	/**
	 * OT utilization rate chart
	 *
	 */


	public function admin_ot_utilization_rate_chart() {
		$this->set('title_for_layout', __('OT Utilization Rate Chart', true));
		$this->layout ='advance';
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->otutilizationrate($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
		}
		//debug($yaxisArray);
		$this->set('yaxisArray', $yaxisArray);
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
	}


	/**
	 * OT utilization rate xls reports
	 *
	 */

	public function admin_ot_utilization_rate_xls() {
		$this->set('title_for_layout', __('OT Utilization Rate XLS Report', true));
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->otutilizationrate($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
		$this->layout = false;
	}

	/**
	 * ICU utilization rate
	 *
	 */

	public function admin_icu_utilization_report() {
		$this->set('title_for_layout', __('ICU Utilization Rate', true));
		$this->layout ='advance';
		
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->icuutilizationreport($fromDate,$toDate);
			$this->patientIcuHours($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		} else {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31"; // set last date of current year
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
			$this->icuutilizationreport();
			$this->patientIcuHours();

		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
	}


	/**
	 * ICU utilization rate query
	 *
	 */

	private function icuutilizationreport($fromDate=null,$toDate=null) {
		$this->layout ='Advance';
		$this->uses = array('Room', 'OptAppointment', 'RoomUpdateHistory');
		if(empty($fromDate) && empty($toDate)) {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31";
		}
		$this->Room->unbindModel(array('hasMany' => array('Bed')));

		$this->Room->bindModel(array('belongsTo'=>array('Ward'=>array('foreignKey'=>'ward_id'))));
		// count total icu hours monthlwise //
		$bedCount = $this->Room->find('all', array('fields' => array('Room.ward_id', 'Room.location_id', 'Room.id', 'Room.no_of_beds'), 'conditions' => array('Room.location_id' => $this->Session->read('locationid'), 'Room.is_active' => 1,'Ward.ward_type' => 'ICU')));
		$totalBedCount =0;
		foreach($bedCount as $bedCountVal) {
			$totalBedCount += $bedCountVal['Room']['no_of_beds'];
		}

		$this->RoomUpdateHistory->bindModel(array('belongsTo'=>array('Ward'=>array('foreignKey'=>'ward_id'))));
		// count total icu hours monthlwise //
		$oldBedCount = $this->RoomUpdateHistory->find('all', array('fields' => array('DATE_FORMAT(RoomUpdateHistory.create_time, "%M-%Y") AS total_bed_months', 'DATE_FORMAT(RoomUpdateHistory.create_time, "%Y-%m-%d") AS total_bed_dates', 'RoomUpdateHistory.ward_id', 'RoomUpdateHistory.location_id', 'RoomUpdateHistory.id', 'RoomUpdateHistory.no_of_beds'), 'conditions' => array('RoomUpdateHistory.location_id' => $this->Session->read('locationid'), 'RoomUpdateHistory.is_active' => 1,'Ward.ward_type' => 'ICU'), 'group' => array("total_bed_months HAVING  total_bed_dates BETWEEN '{$fromDate}' AND '{$toDate}'"), 'order' => array('total_bed_dates')));

		foreach($oldBedCount as $oldBedCountVal) {
			$lastListBedMonth[] = $oldBedCountVal[0]['total_bed_months'];
			$lastListBedMonthCount[$oldBedCountVal[0]['total_bed_months']] = $oldBedCountVal['RoomUpdateHistory']['no_of_beds'];
		}

		$lastMonthVal = "";
		$countMonth = 0;
		while($toDate >= $fromDate) {
			$checkMonth = date("F-Y", strtotime($toDate));
			if(in_array($checkMonth, $lastListBedMonth)) {
				$countMonth++;
				if($countMonth == 1)
					$getLastListBedMonthCount[$checkMonth] = $totalBedCount;
				else
					$getLastListBedMonthCount[$checkMonth] = $lastListBedMonthCount[$checkMonth];
				$lastMonthVal = $lastListBedMonthCount[$checkMonth];
			}else{
				$getLastListBedMonthCount[$checkMonth] = $lastMonthVal;
			}
			$exptodate = explode("-", $toDate);
			$toDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $exptodate[1]-1, $exptodate[2], $exptodate[0]))));
		}

		$this->set('totalBedCount', isset($totalBedCount)?$totalBedCount:"");
		$this->set('getLastListBedMonthCount', isset($getLastListBedMonthCount)?$getLastListBedMonthCount:"");

	}

	/**
	 * ICU utilization rate chart
	 *
	 */


	public function admin_icu_utilization_report_chart() {
		$this->set('title_for_layout', __('OT Utilization Rate Chart', true));
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->icuutilizationreport($fromDate,$toDate);
			$this->patientIcuHours($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
		}

		$this->set('yaxisArray', $yaxisArray);
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
	}


	/**
	 * ICU utilization rate xls reports
	 *
	 */

	public function admin_icu_utilization_report_xls() {
		$this->set('title_for_layout', __('ICU Utilization Rate XLS Report', true));
		if ($this->request->is('post')) {
			$reportYear = $this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->icuutilizationreport($fromDate,$toDate);
			$this->patientIcuHours($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
		}
		$this->set('reportYear', isset($this->request->data['reportYear'])?$this->request->data['reportYear']:date("Y"));
		$this->layout = false;
	}

	/**
	 * count total patient hours in ICU monthwise
	 *
	 */

	private function patientIcuHours($fromDate=NULL, $toDate=NULL) {
		$this->uses = array('WardPatient');
		$this->layout ='Advance';
		$this->WardPatient->bindModel(array('belongsTo'=>array('Ward'=>array('foreignKey'=>'ward_id'))));
		if(empty($fromDate) && empty($toDate)) {
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31";
		}
		$patientAdmitDetails = $this->WardPatient->find('all', array('fields' => array('DATE_FORMAT(in_date, "%M-%Y") AS month_reports', 'DATE_FORMAT(in_date, "%Y-%m-%d") AS admit_date',  'WardPatient.location_id','WardPatient.patient_id','WardPatient.in_date','WardPatient.out_date'), 'conditions' => array('WardPatient.location_id' => $this->Session->read('locationid'),'WardPatient.is_deleted' => 0,'Ward.ward_type' => 'ICU'), 'group' => array("WardPatient.id  HAVING  admit_date BETWEEN '{$fromDate}' AND '{$toDate}'"), 'order' => 'in_date'));
			

		foreach($patientAdmitDetails as $key => $patientAdmitDetailsVal ) {
			$expPatientAdmitDate = explode("-", date("Y-m-d", strtotime($patientAdmitDetailsVal['WardPatient']['in_date'])));
			if(!empty($patientAdmitDetailsVal['WardPatient']['out_date'])) {
			 $expPatientDischargeDate = explode("-", date("Y-m-d", strtotime($patientAdmitDetailsVal['WardPatient']['out_date'])));
			} else {
			 $expPatientDischargeDate = explode("-", date("Y-m-d"));
			}

			$inDateInMonthYear = date("F-Y", strtotime($patientAdmitDetailsVal['WardPatient']['in_date']));
			if(!empty($patientAdmitDetailsVal['WardPatient']['out_date'])) {
				$outDateInMonthYear = date("F-Y", strtotime($patientAdmitDetailsVal['WardPatient']['out_date']));
				$outDateInMonthYear1 = date("m-Y", strtotime($patientAdmitDetailsVal['WardPatient']['out_date']));
			} else {
			 $outDateInMonthYear = date("F-Y");
			 $outDateInMonthYear1 = date("m-Y");
			}

			// store last month value  //
			$cnt++;
			// check last month value if same or not //
			$timeHours=0;
			// if admit and dischare are on same month otherwise go to else //
			if($inDateInMonthYear == $outDateInMonthYear) {
				$interval = $this->DateFormat->dateDiff($patientAdmitDetailsVal['WardPatient']['out_date'], $patientAdmitDetailsVal['WardPatient']['in_date']);
				$timeDays 	= $interval->days;
				if($timeDays > 0) {
					$timeHours = $timeDays*24*60;
				}
				$timeHours += $interval->h;
				$filterIpdDateArray[] = $inDateInMonthYear;
				$filterIpdCountArray[$inDateInMonthYear] += $timeHours;
			} else {
				// more than one month gap //
				$diffDate = $outDateInMonthYear1 - date("m-Y", strtotime($patientAdmitDetailsVal['WardPatient']['in_date']));
				$i=0;
				while($i <= $diffDate) {

					if($i == 0) {
						$maxDate = $expPatientAdmitDate[0]."-".$expPatientAdmitDate[1]."-".cal_days_in_month(CAL_GREGORIAN, $expPatientAdmitDate[1], $expPatientAdmitDate[0]);
						$interval = $this->DateFormat->dateDiff($patientAdmitDetailsVal['WardPatient']['in_date'],$maxDate." 23:59:59");
						$timeDays 	= $interval->days;

						if($timeDays > 0) {
							$timeHours = $timeDays*24*60;
						}
						$timeHours += $interval->h;
						$filterIpdDateArray[] = $inDateInMonthYear;
						$filterIpdCountArray[$inDateInMonthYear] += $timeHours;


					} else if($i == $diffDate) {
						if(!empty($patientAdmitDetailsVal['WardPatient']['out_date']))
							$maxDate = date("Y-m-d H:i:s", strtotime($patientAdmitDetailsVal['WardPatient']['out_date']));
						else
							$maxDate = date("Y-m-d H:i:s");
						$startDate = $expPatientDischargeDate[0]."-".$expPatientDischargeDate[1]."-"."01 00:00:00";
						$interval = $this->DateFormat->dateDiff($startDate,$maxDate);
						$timeDays 	= $interval->days;
						if($timeDays > 0) {
							$timeHours = $timeDays*24*60;
						}
						$timeHours += $interval->h;
						$filterIpdDateArray[] = $outDateInMonthYear;
						$filterIpdCountArray[$outDateInMonthYear] += $timeHours;

					} else {
						$maxDate = $expPatientAdmitDate[0]."-".($expPatientAdmitDate[1]+$i)."-".cal_days_in_month(CAL_GREGORIAN, ($expPatientAdmitDate[1]+$i), $expPatientAdmitDate[0]);
						$startDate = $expPatientAdmitDate[0]."-".($expPatientAdmitDate[1]+$i)."-"."01";
						$interval = $this->DateFormat->dateDiff($startDate,$maxDate);
						$timeDays 	= $interval->days;
						if($timeDays > 0) {
							$timeHours = $timeDays*24*60;
						}
						$timeHours += $interval->h;
						$filterIpdDateArray[] = date("F-Y", strtotime($maxDate));
						$filterIpdCountArray[date("F-Y", strtotime($maxDate))] += $timeHours;

					}
					$timeHours=0;
					$i++;
				}
			}

		}

			
		$this->set('filterIpdDateArray', isset($filterIpdDateArray)?$filterIpdDateArray:"");
		$this->set('filterIpdCountArray', isset($filterIpdCountArray)?$filterIpdCountArray:0);

	}
	//---------------------- Aditya Start of the Medication Reports----------------------
	public function admin_medication_report(){
		$this->loadModel('PharmacyItem');
		$a = $this->PharmacyItem->find('list',array('field'=> array('id','name')));
		$this->set('a',$a);
		//pr($a);

		$list=$this->PharmacyItem->find('all');
		$this->set('lists',$list);
		//if($this->resquest->is('post')){
		//	$list=$this->PharmacyItem->find('all');
		//}
	}
	//-------------------------End of the Medication Reports----------------------------
	//-----------------Start of the Diagnosis Report-------------
	public function admin_diagnosis_report(){
		//--------------------------- Start Of the Bind--------------------------
		$this->uses = array('Icd','Diagnosis','Patient','Person');
		$this->Diagnosis->bindModel(array(
				'belongsTo' => array(
						'Patient' =>array('foreignKey' => false,'conditions'=>array('Patient.id =Diagnosis.patient_id' )),
				)),false);
		//-------------------------- Run time bind end----------------------------

		$icds = $this->Icd->find('list',array('fields'=>array('id','icd_code')));
		$this->set('icd',$icds);


		$searchResult = $this->Diagnosis->find('all');
		$this->set('Diagnosis',$searchResult);


		if ($this->request->is('post')) {

			//pr($this->data);
			//$this->loadModel('Diagnosis');
			$searchResult = $this->Diagnosis->find('all', array('conditions'=>array('ICD_code LIKE'=> '%'.$this->data['name'].'%')));


			$this->set('Diagnosis',$searchResult);

		}
		//----------- End of the Diagnosis Report----------------------------------
			
	}
	public function admin_clinical_quality_measure($GenerateView=null){
		$year=$this->request->data['year'];
		$this->set('GenerateView',$GenerateView);
		$expl_date=explode('_',$this->request->data['duration']);
		$start=$expl_date['0']."-".$year;
		$end=$expl_date['1']."-".$year;
		$start_date1=explode('-',$start);
		$end_date1=explode('-',$end);
		$start_date=$start_date1['2']."-".$start_date1['0']."-".$start_date1['1'];
		$end_date=$end_date1['2']."-".$end_date1['0']."-".$end_date1['1'];
		$doctor_id= $this->request->data['clinical_quality_measure']['doctor_name'];
		if(!empty($doctor_id)){
		$this->Session->write('cqm_doctor_id',$doctor_id);
		}
		if($start!='-'){
		$this->Session->write('cqm_start_date',$start_date);
		}
		if($end!='-'){
		$this->Session->write('cqm_end_date',$end_date);
		}
		/* $start_date= $this->request->data['clinical_quality_measure']['start_date'];
		 $duration= $this->request->data['clinical_quality_measure']['end_date'];
		$addDays=$duration;
		$end_date=	date("Y-m-d", strtotime("+$addDays days", strtotime($start_date))); */
		//echo $end_date;
		$this->set(compact('start_date','end_date','doctor_id'));
		$this->uses = array('CqmExclusionList','CqmReport','Note','NoteDiagnosis','PatientPersonalHistory','Diagnosis','Laboratory','Person','DoctorProfile','Patient');
		$this->set('doctors',$this->DoctorProfile->getDoctors());
		 /* debug($this->Session->read('cqm_doctor_id'));
		debug($this->Session->read('cqm_start_date'));
		debug($this->Session->read('cqm_end_date')); */
		//exit; */
		//---------------------------------HYPERTENSION Condition Of CQM----------------------------------------------------------------------------------
		$resultOfBp=$this->Report->ControllingHighBp($this->Session->read('cqm_doctor_id'),$this->Session->read('cqm_start_date'),$this->Session->read('cqm_end_date'));
		$this->set('resultOfBp',$resultOfBp);
		//debug($resultOfBp);
		//exit;
		//debug($resultOfBp);
		//debug($resultOfBp['0']);
		//debug($resultOfBp['1']);
		//debug($resultOfBp['2']);
		//exit;
		//---------------------------------------update and insert the in cqm report----------------------------------------------------------------------------
		if($this->Session->read('cqm_doctor_id') !=""){
			$this->CqmExclusionList->id=false;
			//$exclusion_demininator=$this->CqmExclusionList->find('count',array('conditions'=>array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0018','isdenominator'=>'1')));
			$updatevalue1=$this->CqmReport->find('count',array('conditions'=>array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0018')));
			if($updatevalue1 >0){
				//echo "UpdateBP";
				$this->CqmReport->updateAll(array('numerator'=>$resultOfBp[0] ,'denominator'=>$resultOfBp[1],'den_exclusion'=>$resultOfBp[6])
						,array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0018'));
			}
			else{
				///	echo "aditya";

				$this->CqmReport->id=false;
				$this->CqmReport->save(array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0018', 'numerator'=>$resultOfBp[0] ,'denominator'=>$resultOfBp[1],'den_exclusion'=>$resultOfBp[6],'den_exception'=>'0','measure_type'=>'EP'));
			}
		}
		//exit;
		//---------------------------------------------------------------------------------------------------------------------------------------------------------------
		$recordBp=$this->CqmReport->find('all',array('conditions'=>array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0018')));
		//echo "<pre>";print_r($recordBp);
		$this->set('recordBp',$recordBp);
		//$this->set('numerator',$recordBp['0']['CqmReport']['numerator']);
		//$this->set('denominator',$recordBp['0']['CqmReport']['denominator']);
		//$cal_percentageBp=($numerator/$denominator)*100;
		//$this->set('cal_percentageBp',$cal_percentageBp);
		$this->set('resultOfBp[3]',$cal_percentageBp);
		$this->set('resultOfBp[4]',$resultOfBp[4]);
		$this->set('resultOfBp[5]',$resultOfBp[5]);


		//---------------------------------Low Back Pain Condition Of CQM----------------------------------------------------------------------------------
		$resultOfLowBackPain=$this->Report->LowBackPain($this->Session->read('cqm_doctor_id'),$this->Session->read('cqm_start_date'),$this->Session->read('cqm_end_date'));

		//$this->set('resultOfLowBackPain',$resultOfLowBackPain);
		  
		/*foreach($resultOfLowBackPain[0] as $resultOfLowBackPains){
			$p_id[]=$resultOfLowBackPains['NoteDiagnosis']['patient_id'];
		}
		exit; */
		//---------------------------------------update and insert the in cqm report----------------------------------------------------------------------------
		if($this->Session->read('cqm_doctor_id') !=""){
			$this->CqmExclusionList->id=false;
		//	$exclusion_demininator=$this->CqmExclusionList->find('count',array('conditions'=>array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0052','isdenominator'=>'1')));
			//debug($exclusion_demininator);

			$updatevalue=$this->CqmReport->find('count',array('conditions'=>array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0052')));
			if($updatevalue >0){
				//debug($resultOfLowBackPain[6]);
				//exit;
				$this->CqmReport->updateAll(array('numerator'=>$resultOfLowBackPain[2],'denominator'=>$resultOfLowBackPain[3],'den_exclusion'=>$resultOfLowBackPain[6])
						,array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0052'));
			}
			else{

				$this->CqmReport->id=false;
				//$this->request->data
				$this->CqmReport->save(array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0052', 'numerator'=>$resultOfLowBackPain[2] ,'denominator'=>$resultOfLowBackPain[3],'den_exclusion'=>$resultOfLowBackPain[6],'den_exception'=>'0','measure_type'=>'EP'));

			}
		}
		//exit;
		$recordLPB=$this->CqmReport->find('all',array('conditions'=>array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0052')));
		$this->set('resultOfLowBackPain',$recordLPB);
		/* echo "<pre>";print_r($recordBp);
		 exit; */
		$this->set('numerator',$recordLPB['0']['CqmReport']['numerator']);
		$this->set('denominator',$recordLPB['0']['CqmReport']['denominator']);
		$cal_percentageLBP=($numerator/$denominator)*100;
		$this->set('cal_percentageBp',$cal_percentageBp);
		/*---------------------------------------update and insert the in cqm report----------------------------------------------------------------------------
		 if($this->Session->read('cqm_doctor_id') !=""){
		$this->CqmExclusionList->id=false;
		$exclusion_demininator=$this->CqmExclusionList->find('count',array('conditions'=>array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0052','isdenominator'=>'1')));
		//debug($exclusion_demininator);

		$updatevalue=$this->CqmReport->find('count',array('conditions'=>array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0052')));
		if($updatevalue >0){

		$this->CqmReport->updateAll(array('numerator'=>$resultOfLowBackPain[2],'denominator'=>$resultOfLowBackPain[3],'den_exclusion'=>$exclusion_demininator)
				,array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0052'));
		}
		else{
		//echo "Santosh";
		//exit;
		$this->CqmReport->id=false;
		//$this->request->data
		$this->CqmReport->save(array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0052', 'numerator'=>$resultOfLowBackPain[2] ,'denominator'=>$resultOfLowBackPain[3],'den_exclusion'=>'0','den_exception'=>'0','measure_type'=>'EP'));

		}
		}
		//exit;*/
		//---------------------------------------------------------------------------------------------------------------------------------------------------------------

		//echo "<pre>";print_r($resultOfLowBackPain);
		//---------------------------------Tobacco Condition Of CQM---------------------------------------------------------------------------
		$resultOTobaccoScreening=$this->Report->TobaccoScreening($this->Session->read('cqm_doctor_id'),$this->Session->read('cqm_start_date'),$this->Session->read('cqm_end_date'));
		/* debug($resultOTobaccoScreening);
		 exit; */
		$this->set('resultOTobaccoScreening',$resultOTobaccoScreening);
		if($this->Session->read('cqm_doctor_id') !=""){
			$this->CqmExclusionList->id=false;
			//$exclusion_demininator=$this->CqmExclusionList->find('count',array('conditions'=>array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0028','isdenominator'=>'0')));
			//debug($exclusion_demininator);

			$updatevalue=$this->CqmReport->find('count',array('conditions'=>array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0028')));
			if($updatevalue >0){

				$this->CqmReport->updateAll(array('numerator'=>$resultOTobaccoScreening[0],'denominator'=>$resultOTobaccoScreening[1],'den_exclusion'=>$exclusion_demininator,'den_exception'=>$resultOTobaccoScreening[6])
						,array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0028'));
			}
			else{
				//echo "Santosh";
				//exit;
				$this->CqmReport->id=false;
				//$this->request->data
				$this->CqmReport->save(array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0028', 'numerator'=>$resultOTobaccoScreening[0] ,'denominator'=>$resultOTobaccoScreening[1],'den_exclusion'=>'0','den_exception'=>$resultOTobaccoScreening[6],'measure_type'=>'EP'));

			}
		}
		//---------------------------------------update and insert the in cqm report----------------------------------------------------------------------------
		if($this->Session->read('cqm_doctor_id') !=""){

			$updatevalue2=$this->CqmReport->find('count',array('conditions'=>array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0028')));
			if($updatevalue2>0){
				$this->CqmReport->updateAll(array('numerator'=>$resultOTobaccoScreening[0] ,'denominator'=>$resultOTobaccoScreening[1])
						,array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0028'));
			}
			else{

				$this->CqmReport->id=false;
				$this->CqmReport->saveAll(array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0028', 'numerator'=>$resultOTobaccoScreening[0] ,'denominator'=>$resultOTobaccoScreening[1],'den_exclusion'=>'0','den_exception'=>'0','measure_type'=>'EP'));

			}
		}
		$recordBp=$this->CqmReport->find('all',array('conditions'=>array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0028')));
		$this->set('resultOfTS',$recordBp);
		/* echo "<pre>";print_r($recordBp);
		 exit; */
		$this->set('numerator',$recordBp['0']['CqmReport']['numerator']);
		$this->set('denominator',$recordBp['0']['CqmReport']['denominator']);
		$cal_percentageLBP=($numerator/$denominator)*100;
		$this->set('cal_percentageBp',$cal_percentageBp);
		//---------------------------------------------------------------------------------------------------------------------------------------------------------------

		//--------------------------------------------------------------------Depression Condition Of CQM--------------------------------------------------------------------
		$resultODepression=$this->Report->Depression($this->Session->read('cqm_doctor_id'),$this->Session->read('cqm_start_date'),$this->Session->read('cqm_end_date'));
		$this->set('resultODepression',$resultODepression);
		if($this->Session->read('cqm_doctor_id') !=""){

			$updatevalue2=$this->CqmReport->find('count',array('conditions'=>array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0418')));
			if($updatevalue2>0){
				$this->CqmReport->updateAll(array('numerator'=>$resultODepression[0] ,'denominator'=>$resultODepression[1],'den_exclusion'=>$resultODepression[6],'den_exception'=>$resultODepression[7])
						,array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0418'));
			}
			else{

				$this->CqmReport->id=false;
				$this->CqmReport->saveAll(array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0418', 'numerator'=>$resultODepression[0] ,'denominator'=>$resultODepression[1],'den_exclusion'=>$resultODepression[6],'den_exception'=>$resultODepression[7],'measure_type'=>'EP'));

			}
		}
		$recordBp=$this->CqmReport->find('all',array('conditions'=>array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0418')));
		$this->set('resultOfDepression',$recordBp);
		//----------------------------------------------BMI Condition Of CQM-----------------------------------------------------------------------------------
		$resultOfBMI_A=$this->Report->BMI_A($this->Session->read('cqm_doctor_id'),$this->Session->read('cqm_start_date'),$this->Session->read('cqm_end_date'));
		$this->set('resultOfBMI_A',$resultOfBMI_A);
		if($this->Session->read('cqm_doctor_id') !=""){

			$updatevalue2=$this->CqmReport->find('count',array('conditions'=>array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0421-1')));
			if($updatevalue2>0){
				$this->CqmReport->updateAll(array('numerator'=>$resultOfBMI_A[0] ,'denominator'=>$resultOfBMI_A[1],'den_exclusion'=>$resultOfBMI_A[6])
						,array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0421-1'));
			}
			else{

				$this->CqmReport->id=false;
				$this->CqmReport->saveAll(array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0421-1', 'numerator'=>$resultOfBMI_A[0] ,'denominator'=>$resultOfBMI_A[1],'den_exclusion'=>$resultOfBMI_A[6],'den_exception'=>'0','measure_type'=>'EP'));

			}
		}
		$recordBMIA=$this->CqmReport->find('all',array('conditions'=>array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0421-1')));
		$this->set('recordBMIA',$recordBMIA);
		$resultOfBMI_B=$this->Report->BMI_B($this->Session->read('cqm_doctor_id'),$this->Session->read('cqm_start_date'),$this->Session->read('cqm_end_date'));
		$this->set('resultOfBMI_B',$resultOfBMI_B);
		if($this->Session->read('cqm_doctor_id') !=""){

			$updatevalue2=$this->CqmReport->find('count',array('conditions'=>array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0421-2')));
			if($updatevalue2>0){
				$this->CqmReport->updateAll(array('numerator'=>$resultOfBMI_B[0] ,'denominator'=>$resultOfBMI_B[1],'den_exclusion'=>$resultOfBMI_B[6])
						,array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0421-2'));
			}
			else{

				$this->CqmReport->id=false;
				$this->CqmReport->saveAll(array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0421-2', 'numerator'=>$resultOfBMI_B[0] ,'denominator'=>$resultOfBMI_B[1],'den_exclusion'=>$resultOfBMI_B[6],'den_exception'=>'0','measure_type'=>'EP'));

			}
		}
		$recordBMIB=$this->CqmReport->find('all',array('conditions'=>array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0421-2')));
		$this->set('recordBMIB',$recordBMIB);
		//---------------------------------------------------------------------------------Documentation of current medication in the Medical Recdords---------------------------------------------------------------------------------------------
		$resultOfDCM=$this->Report->DocumentationOfCurrentMedication($this->Session->read('cqm_doctor_id'),$this->Session->read('cqm_start_date'),$this->Session->read('cqm_end_date'));
		
		$this->set('resultOfDCM',$resultOfDCM);

		if($this->Session->read('cqm_doctor_id') !=""){

			$updatevalue2=$this->CqmReport->find('count',array('conditions'=>array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0419')));
			if($updatevalue2>0){
				$this->CqmReport->updateAll(array('numerator'=>$resultOfDCM[0] ,'denominator'=>$resultOfDCM[1],'den_exclusion'=>$resultOfDCM[6])
						,array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0419'));
			}
			else{

				$this->CqmReport->id=false;
				$this->CqmReport->saveAll(array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0419', 'numerator'=>$resultOfDCM[0] ,'denominator'=>$resultOfDCM[1],'den_exclusion'=>$resultOfDCM[6],'den_exception'=>'0','measure_type'=>'EP'));

			}
		}
		$recordDCM=$this->CqmReport->find('all',array('conditions'=>array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0419')));
		$this->set('recordDCM',$recordDCM);
		//---------------------------------------------------------------------------------Pragnent Women Case---------------------------------------------------------------------------------------------
		$resultOfWomen=$this->Report->PragnentWomen($this->Session->read('cqm_doctor_id'),$this->Session->read('cqm_start_date'),$this->Session->read('cqm_end_date'));

		$this->set('resultOfWomen',$resultOfWomen);

		if($this->Session->read('cqm_doctor_id') !=""){

			$updatevalue2=$this->CqmReport->find('count',array('conditions'=>array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0608','den_exception'=>'0')));
			if($updatevalue2>0){
				$this->CqmReport->updateAll(array('numerator'=>$resultOfWomen[0] ,'denominator'=>$resultOfWomen[1])
						,array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0608'));
			}
			else{

				$this->CqmReport->id=false;
				$this->CqmReport->saveAll(array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0608', 'numerator'=>$resultOfWomen[0] ,'denominator'=>$resultOfWomen[1],'den_exclusion'=>'0','den_exception'=>'0','measure_type'=>'EP'));

			}
		}
		$recordW=$this->CqmReport->find('all',array('conditions'=>array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0608')));
		$this->set('recordW',$recordW);
		//---------------------------------elderlymedication Condition Of CQM----------------------------------------------------------------------------------
		$resultOfelderlymedication=$this->Report->elderlymedication($this->Session->read('cqm_doctor_id'),$this->Session->read('cqm_start_date'),$this->Session->read('cqm_end_date'));
		
		$this->set('resultOfelderlymedication',$resultOfelderlymedication);

		if($this->Session->read('cqm_doctor_id') !=""){

			$updatevalue2=$this->CqmReport->find('count',array('conditions'=>array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0022')));
			if($updatevalue2 > 0){
				$this->CqmReport->updateAll(array('numerator'=>$resultOfelderlymedication[0] ,'denominator'=>$resultOfelderlymedication[1])
						,array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0022'));
			}
			else{

				$this->CqmReport->id=false;
				$this->CqmReport->saveAll(array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0022', 'numerator'=>$resultOfelderlymedication[0] ,'denominator'=>$resultOfelderlymedication[1],'den_exclusion'=>'0','den_exception'=>'0','measure_type'=>'EP'));

			}
		}
		//debug($resultOfelderlymedication);
		//-------for CQM Details..
		$this->set(compact('doctor_id','start_date','end_date'));
		$recordEM=$this->CqmReport->find('all',array('conditions'=>array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0022')));
		//debug($resultOfelderlymedication);exit;
		$this->set('recordEM',$recordEM);
		//debug($recordEM);
		//-------------------------------------------------------Elder medication 2----------------------------------------------------------------
		$resultOfelderlymedication=$this->Report->elderlymedication2($this->Session->read('cqm_doctor_id'),$this->Session->read('cqm_start_date'),$this->Session->read('cqm_end_date'));
		$this->set('resultOfelderlymedication',$resultOfelderlymedication);
			
		if($this->Session->read('cqm_doctor_id') !=""){

			$updatevalue2=$this->CqmReport->find('count',array('conditions'=>array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0022-2')));
			if($updatevalue2 > 0){
				$this->CqmReport->updateAll(array('numerator'=>$resultOfelderlymedication[0] ,'denominator'=>$resultOfelderlymedication[1])
						,array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0022-2'));
			}
			else{
					
				$this->CqmReport->id=false;
				$this->CqmReport->saveAll(array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0022-2', 'numerator'=>$resultOfelderlymedication[0] ,'denominator'=>$resultOfelderlymedication[1],'den_exclusion'=>'0','den_exception'=>'0','measure_type'=>'EP'));
					
			}
		}
		//debug($resultOfelderlymedication);
		//-------for CQM Details..
		$this->set(compact('doctor_id','start_date','end_date'));
		$recordEM2=$this->CqmReport->find('all',array('conditions'=>array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0022-2')));
		//debug($resultOfelderlymedication);exit;
		$this->set('recordEM2',$recordEM2);
			
		//debug($recordEM2);
			
		//--------------------------------------blood peresure inprovement---------------------------------------------

		$resultOfControllingHighBpImprove=$this->Report->ControllingHighBpImprove($this->Session->read('cqm_doctor_id'),$this->Session->read('cqm_start_date'),$this->Session->read('cqm_end_date'));
		$this->set('resultOfControllingHighBpImprove',$resultOfControllingHighBpImprove);
		if($this->Session->read('cqm_doctor_id') !=""){
			
			$updatevalue2=$this->CqmReport->find('count',array('conditions'=>array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0018-1')));
			if($updatevalue2 > 0){
				$this->CqmReport->updateAll(array('numerator'=>$resultOfControllingHighBpImprove[0] ,'denominator'=>$resultOfControllingHighBpImprove[1],'den_exclusion'=>$resultOfControllingHighBpImprove[6])
						,array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0018-1'));
			}
			else{

				$this->CqmReport->id=false;
				$this->CqmReport->saveAll(array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0018-1', 'numerator'=>$resultOfControllingHighBpImprove[0] ,'denominator'=>$resultOfControllingHighBpImprove[1],'den_exclusion'=>$resultOfControllingHighBpImprove[6],'den_exception'=>'0','measure_type'=>'EP'));

			}
		}
		//debug($resultOfelderlymedication);
		//-------for CQM Details..
		$this->set(compact('doctor_id','start_date','end_date'));
		$BpImprove=$this->CqmReport->find('all',array('conditions'=>array('doctor_id'=>$this->Session->read('cqm_doctor_id'),'measure_id'=>'0018-1')));
		//debug($resultOfelderlymedication);exit;
		$this->set('BpImprove',$BpImprove);
		//-------------------------------------------------------------Stroke-2 Ischemic stroke-Dicharged on anti-thrombotic--------------------------------------------------------------------------------------------------------------------------------
		$count_stroke=$this->NoteDiagnosis->find('all',array('fields'=>array('patient_id'),'conditions'=>array('icd_id'=>'801162')));
		$patient_id=" ";
		foreach($count_stroke as $count_strokes){
			$patient_id.=$count_stroke['0']['NoteDiagnosis']['patient_id'] .",";
		}

		$expl_id=explode(",",$patient_id);

		$count_id=count($expl_id);
		unset($expl_id[$count_id-1]);
		//echo "<pre>";print_r($expl_id);exit;
		$this->Laboratory->bindModel(array('belongsTo' => array(
				'LaboratoryToken' =>array('foreignKey'=>false, 'conditions' => array('Laboratory.id=LaboratoryToken.laboratory_id')),
				//'Patient' =>array('foreignKey'=>false, 'conditions' => array('Patient.id=LaboratoryToken.patient_id')),
				//'NoteDiagnosis' =>array('foreignKey'=>false, 'conditions' => array('Patient.id=NoteDiagnosis.patient_id')),
		)),false);
		$count_stroke1=$this->Laboratory->find('count',array('conditions'=>array('name'=>'Antithrombotic therapy prescribed at discharge','LaboratoryToken.patient_id'=>$expl_id),'group'=>'Laboratory.name'));
		//echo "<pre>";print_r($count_stroke1);exit;
		$count_stroke=$this->NoteDiagnosis->find('count',array('conditions'=>array('icd_id'=>'801162'),'group'=>'icd_id'));
		$cal_percentage_stroke=($count_stroke1/$count_stroke)*100;
		$this->set(compact('count_stroke','count_stroke1','cal_percentage_stroke'));
		//$this->set('countDepressionPatients',$countDepressionPatients);
		//$cal_percentage_drepreesion=($countDepressionPatients/$count_notedig)*100;
		//$this->set('cal_percentage_drepreesion',$cal_percentage_drepreesion);

		//-------------------------------------------------------------Stroke-3 Anticoagulation Therapy for Antrial Fibrillation/Flutter--------------------------------------------------------------------------------------------------------------------------------
		$count_stroke_Anticoagulation=$this->NoteDiagnosis->find('all',array('fields'=>array('patient_id'),'conditions'=>array('icd_id'=>'1083073')));
		$patient_id=" ";
		for($i=0;$i<=count($count_stroke_Anticoagulation);$i++){
			$expl[] = $count_stroke_Anticoagulation[$i]['NoteDiagnosis']['patient_id'];
		}
		$count_id_stroke3=count($expl);
		unset($expl[$count_id_stroke3-1]);
		$this->Laboratory->bindModel(array('belongsTo' => array(
				'LaboratoryToken' =>array('foreignKey'=>false, 'conditions' => array('Laboratory.id=LaboratoryToken.laboratory_id')),
		)),false);
		$count_stroke_Anticoagulation1=$this->Laboratory->find('count',array('conditions'=>array('name'=>'Anticoagulation therapy','LaboratoryToken.patient_id'=>$expl),'group'=>'Laboratory.name'));
		$count_stroke_Anticoagulation=$this->NoteDiagnosis->find('count',array('conditions'=>array('icd_id'=>'1083073'),'group'=>'icd_id'));
		$cal_percentage_Anticoagulation=($count_stroke_Anticoagulation1/$count_stroke_Anticoagulation)*100;
		$this->set(compact('count_stroke_Anticoagulation','count_stroke_Anticoagulation1','cal_percentage_Anticoagulation'));
		//-------------------------------------------------------------Stroke-4 Ischemic Stroke Thrombolytic Therapy--------------------------------------------------------------------------------------------------------------------------------
		// Admission
		$get_pid=$this->NoteDiagnosis->find('all',array('fields'=>array('patient_id'),'group'=>'patient_id'));
		//echo "<pre>";print_r($get_pid);exit;
		$count_id=count($get_pid);
		for($i=0;$i<$count_id;$i++){
			$array_id[]=$get_pid['0']['NoteDiagnosis'][''];

		}
		//$get_pid=$this->Person->find('all',array('fields'=>array('patient_id'),'group'=>'patient_id'));
		//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	}
	public function admin_patient_list(){	
		$getFlag=$this->request->query['flag'];	
		$this->layout = 'advance' ;
		$this->uses=array('Language','Race');
		///$get_language=$this->Language->find('list',array('fields'=>array('code','language')));
		$languages=$this->Language->find('list',array('fields'=>array('code','language'),'order'=>array('language DESC')));
		unset($languages['EN'],$languages['ES']);
		$keyEnglish = array('ES'=>'Spanish','EN'=>'English');
		$languages = $languages+$keyEnglish;
		$get_language = array_reverse($languages);
		$get_race=$this->Race->find('list',array('fields'=>array('value_code','race_name')));
		//echo '<pre>';print_r($get_language);exit;
		$this->set('getFlag', $getFlag);
		$this->set(compact('get_language','get_race'));
		//abc();
	}

	public function communication(){
		$this->uses=array('Person');
		$this->layout ='Advance';
		$this->Person->bindModel(array('belongsTo' => array(
				'Language' =>array('foreignKey'=>false, 'conditions' => array('Language.code=Person.language')),
				'Race' =>array('foreignKey'=>false, 'conditions' => array('Person.race=Race.value_code')),
				'Patient' =>array('foreignKey'=>false, 'conditions' => array('Patient.person_id=Person.id')),

		)),false);
	
	/*	if($this->request->query['start_date']!=''){		
		$this->request->query['start_date']=$this->DateFormat->formatDate2STD($this->request->query['start_date'],Configure::read('date_format'));
		$this->request->query['end_date']=$this->DateFormat->formatDate2STD($this->request->query['end_date'],Configure::read('date_format'));
			$conditions['Person'] = array('create_time BETWEEN ? AND ?'=> array($this->request->query['start_date'],$this->request->query['end_date']));
		}*/
		if($this->request->query['first_name']!=''){
			$conditions['Person']['first_name LIKE'] = "%".$this->request->query['first_name']."%";
		}
		if($this->request->query['last_name']!=''){
			$conditions['Person']['last_name LIKE'] = "%".$this->request->query['last_name']."%";
		}
		if($this->request->query['language']!=''){
			$conditions['Person']['language LIKE'] = "%".$this->request->query['language']."%";
		}
		if($this->request->query['P_comm']!=''){
			$conditions['Person']['P_comm LIKE'] = "%".$this->request->query['P_comm']."%";
		}
	
		//$conditions=array_merge($search_key,$conditions);
		$conditions = $this->postConditions($conditions);
	
		$this->paginate = array(
				'limit' => Configure::read('number_of_rows'),
				'conditions' =>$conditions,
				'fields'=>array('Person.first_name','Person.last_name','Patient.id','Person.sex','Person.age','Person.dob'),'group'=>array('Person.first_name','Person.last_name')
		);
		
		$data = $this->paginate('Person');
				$this->set('data', $data);
		$this->data = array('Person'=>$this->params->query);
		$this->set('isAjax', $this->RequestHandler->isAjax());
		//$this->layout = false;
		$this->render('comm');

	}
	public function demographic(){
		$this->uses=array('Person','Inbox');
		$this->layout ='Advance';
		$this->Person->bindModel(array('belongsTo' => array(
				'Language' =>array('foreignKey'=>false, 'conditions' => array('Language.code=Person.language')),
				'Race' =>array('foreignKey'=>false, 'conditions' => array('Person.race=Race.value_code')),
				'Patient' =>array('foreignKey'=>false, 'conditions' => array('Patient.person_id=Person.id')),

		)),false);

	
		/*if($this->request->query['start_date']!=''){
		$this->request->query['start_date']=$this->DateFormat->formatDate2STD($this->request->query['start_date'],Configure::read('date_format'));
		$this->request->query['end_date']=$this->DateFormat->formatDate2STD($this->request->query['end_date'],Configure::read('date_format'));
			$conditions['Person'] = array('create_time BETWEEN ? AND ?'=> array($this->request->query['start_date'],$this->request->query['end_date']));
		}*/
		if($this->request->query['age1']!=''){
		$this->request->query['age1']=$this->DateFormat->formatDate2STDForReport($this->request->query['age1'],Configure::read('date_format'));
		$this->request->query['age2']=$this->DateFormat->formatDate2STDForReport($this->request->query['age2'],Configure::read('date_format'));
		$conditions['Person'] = array('dob BETWEEN ? AND ?'=> array($this->request->query['age1'],$this->request->query['age2']));
		}	
		if($this->request->query['first_name']!=''){
			$conditions['Person']['first_name LIKE'] = "%".$this->request->query['first_name']."%";
		}
		if($this->request->query['last_name']!=''){
			$conditions['Person']['last_name LIKE'] = "%".$this->request->query['last_name']."%";
		}
		if($this->request->query['language']!=''){
			$conditions['Person']['language LIKE'] = "%".$this->request->query['language']."%";
		}
		if($this->request->query['race']!=''){
			$conditions['Person']['race LIKE'] = "%".$this->request->query['race']."%";
		}
		if($this->request->query['enthnicity']!=''){
			$conditions['Person']['ethnicity LIKE'] = "%".$this->request->query['enthnicity']."%";
		}
		if($this->request->query['P_comm']!=''){
			$conditions['Person']['P_comm LIKE'] = "%".$this->request->query['P_comm']."%";
		}
	
		/*if($this->request->query['age1']!=''){
			$conditions['Patient']=array('age BETWEEN ? AND ?'=> array($this->request->query['age1'],$this->request->query['age2']));
		}*/
		//$conditions=array_merge($search_key,$conditions);
		$conditions = $this->postConditions($conditions);
		$this->paginate = array(
				'limit' => Configure::read('number_of_rows'),
				'conditions' =>$conditions,
				'fields'=>array('Person.first_name','Person.last_name','Patient.id','Patient.patient_id','Person.dob','Person.sex','Person.age'),'group'=>array('Person.first_name','Person.last_name')
		);
		$data = $this->paginate('Person'); 
		/*$getAgeUnit=$this->request->query['age_unit'];
		foreach($data as $getData){
			$getDataAge=explode(' ',$getData['Person']['age']);
			if(trim($getAgeUnit)==trim($getDataAge[1])){
				$getlastVar=$getAgeUnit;
			}
			debug($getlastVar);
		}*/
		//debug($getData);
		$this->set('data', $data);
		$this->data = array('Person'=>$this->params->query);
		// for reminders
		$Uid= array();
		foreach($data as $patientUid){
			$Uid[]=$patientUid['Patient']['patient_id'];		
		}
		$recFormInbox=$this->Inbox->find('all',array('fields'=>array('Inbox.action','Inbox.to'),'conditions'=>array('Inbox.to'=>$Uid)));
		
		foreach( $recFormInbox as $data){
			$reminder[]=$data['Inbox']['to'];
		}
		$this->set('recFormInbox', $reminder);
		$this->set('recFormInboxAll', $recFormInbox);
		//debug($this->request->query['age_unit']);
		//$this->set('ageUnit',$this->request->query['age_unit']);
		//EOD
		$this->set('isAjax', $this->RequestHandler->isAjax());
		//$this->layout = 'advance_ajax';
		$this->render('ajaxpatientlist');
		//echo  json_encode($result_demograpic);exit;

	}
	public function problem(){
		$this->uses=array('NoteDiagnosis','Person');
		$this->layout ='Advance';
		/*$this->NoteDiagnosis->bindModel(array('belongsTo' => array(				
				'Patient' =>array('foreignKey'=>false, 'conditions' => array('Patient.id=NoteDiagnosis.patient_id')),				
				//'NewCropPrescription' =>array('foreignKey'=>false, 'conditions' => array('Patient.patient_id=NewCropPrescription.patient_id')),
				'Person' =>array('foreignKey'=>false, 'conditions' => array('Person.id=Patient.person_id')),
		)),false);*/
		$this->Person->bindModel(array('belongsTo' => array(
				'Patient' =>array('foreignKey'=>false, 'conditions' => array('Patient.person_id=Person.id')),
				'NoteDiagnosis' =>array('foreignKey'=>false, 'conditions' => array('Patient.id=NoteDiagnosis.patient_id')),
				//'NewCropAllergies' =>array('foreignKey'=>false, 'conditions' => array('Patient.id=NewCropAllergies.patient_id')),
				'NewCropPrescription' =>array('foreignKey'=>false, 'conditions' => array('Patient.id=NewCropPrescription.patient_uniqueid')),
		)),false);
	
		/*if($this->request->query['start_date']!=''){
		$this->request->query['start_date']=$this->DateFormat->formatDate2STD($this->request->query['start_date'],Configure::read('date_format'));
		$this->request->query['end_date']=$this->DateFormat->formatDate2STD($this->request->query['end_date'],Configure::read('date_format'));
			$conditions['NoteDiagnosis'] = array('start_dt BETWEEN ? AND ?'=> array($this->request->query['start_date'],$this->request->query['end_date']));
		}*/
		
		if($this->request->query['age1']!=''){
			$this->request->query['age1']=$this->DateFormat->formatDate2STDForReport($this->request->query['age1'],Configure::read('date_format'));
			$this->request->query['age2']=$this->DateFormat->formatDate2STDForReport($this->request->query['age2'],Configure::read('date_format'));
			$conditions['Person'] = array('dob BETWEEN ? AND ?'=> array($this->request->query['age1'],$this->request->query['age2']));
		}
	
		if($this->request->query['first_name']!=''){
			$conditions['Person']['first_name LIKE'] = "%".$this->request->query['first_name']."%";
		}
		if($this->request->query['last_name']!=''){
			$conditions['Person']['last_name LIKE'] = "%".$this->request->query['last_name']."%";
		}
		if($this->request->query['problem']!=''){
			$conditions['NoteDiagnosis']['diagnoses_name LIKE'] = "%".$this->request->query['problem']."%";
		}
		/*if($this->request->query['age1']!=''){
			$conditions['Patient']=array('age BETWEEN ? AND ?'=> array($this->request->query['age1'],$this->request->query['age2']));
		}*/
		if($this->request->query['problem_Sex']!=''){
			$conditions['Person']['sex LIKE'] = trim($this->request->query['problem_Sex'])."%";
		}
	/*	if($this->request->query['medication']!=''){
			$conditions['NewCropPrescription']['description LIKE'] = "%".$this->request->query['medication']."%";
		}*/
		$conditions = $this->postConditions($conditions);
		$this->paginate = array(
				'limit' => Configure::read('number_of_rows'),
				'conditions' => $conditions,
				'fields'=>array('Person.first_name','Person.last_name','Patient.patient_id','Patient.id','Person.sex','Person.age','Person.dob'),'group'=>array('Person.first_name','Person.last_name')
		);
		$data = $this->paginate('Person');
		$this->set('data', $data);
		$this->data = array('NoteDiagnosis'=>$this->params->query);
		$this->set('isAjax', $this->RequestHandler->isAjax());
		//$this->layout = false;
		$this->render('ajaxproblemlist');
		//echo  json_encode($get_result);exit;

	}
	public function lab(){
		$this->uses=array('Laboratory');
	/* $this->Laboratory->bindModel(array('belongsTo' => array(
				'LaboratoryToken' =>array('foreignKey'=>false, 'conditions' => array('Laboratory.id=LaboratoryToken.laboratory_id')),
				'Patient' =>array('foreignKey'=>false, 'conditions' => array('Patient.id=LaboratoryToken.patient_id')),
				'NoteDiagnosis' =>array('foreignKey'=>false, 'conditions' => array('Patient.id=NoteDiagnosis.patient_id')),)),false);
		if($this->request->query['start_date']!=''){
		$conditions['Laboratory'] = array('create_time BETWEEN ? AND ?'=> array($this->request->query['start_date'],$this->request->query['end_date']));
		}
		if($this->request->query['problem']!=''){
		$conditions['NoteDiagnosis']['diagnoses_name LIKE'] = "%".$this->request->query['problem']."%";
		}
		if($this->request->query['lab']!=''){
		$conditions['Laboratory']['name LIKE'] = "%".$this->request->query['lab']."%";
		}

		$conditions = $this->postConditions($conditions);*/
		
		$this->uses=array('LaboratoryToken');

		$this->LaboratoryToken->bindModel(array('belongsTo' => array(
				'Laboratory' =>array('foreignKey'=>'laboratory_id'),
				'Patient' =>array('foreignKey'=>'patient_id'),
				'NoteDiagnosis' =>array('foreignKey'=>false, 'conditions' => array('LaboratoryToken.patient_id=NoteDiagnosis.patient_id')),
				'LaboratoryTestOrder' =>array('foreignKey'=>false, 'conditions' => array('LaboratoryTestOrder.laboratory_id=Laboratory.id')),
				'LaboratoryResult' =>array('foreignKey'=>false, 'conditions' => array('LaboratoryResult.laboratory_test_order_id=LaboratoryTestOrder.id')),
				'LaboratoryHl7Result' =>array('foreignKey'=>false, 'conditions' => array('LaboratoryHl7Result.laboratory_result_id=LaboratoryResult.id')),
				'Person' =>array('foreignKey'=>false, 'conditions' => array('Patient.person_id=Person.id')),
		)),false);
		/*if($this->request->query['start_date']!=''){
		$this->request->query['start_date']=$this->DateFormat->formatDate2STD($this->request->query['start_date'],Configure::read('date_format'));
		$this->request->query['end_date']=$this->DateFormat->formatDate2STD($this->request->query['end_date'],Configure::read('date_format'));
			$conditions['Laboratory'] = array('create_time BETWEEN ? AND ?'=> array($this->request->query['start_date'],$this->request->query['end_date']));
		}*/
		if($this->request->query['problem']!=''){
			$conditions['NoteDiagnosis']['diagnoses_name LIKE'] = "%".$this->request->query['problem']."%";
		}
		if($this->request->query['lab']!=''){
			$conditions['Laboratory']['name LIKE'] = "%".$this->request->query['lab']."%";
		}
		if($this->request->query['range']!=''){
			if($this->request->query['range']=='1'){
				$conditions['LaboratoryHl7Result']['result >'] = $this->request->query['result_value'];
			}
			if($this->request->query['range']=='2'){
				$conditions['LaboratoryHl7Result']['result <'] = $this->request->query['result_value'];
			}
			if($this->request->query['range']=='3'){
				$conditions['LaboratoryHl7Result']['result'] = $this->request->query['result_value'];
			}
		}
		$conditions = $this->postConditions($conditions);
		$this->paginate = array(
				'limit' => Configure::read('number_of_rows'),
				'conditions'=>$conditions,
				'fields'=>array('Person.first_name','Person.last_name','Patient.patient_id','Patient.id','Person.sex','Patient.age','Person.dob'),'group'=>array('Person.first_name','Person.last_name',)
		);
		$data = $this->paginate('LaboratoryToken');
		$this->set('data', $data);
		$this->data = array('LaboratoryToken'=>$this->params->query);
		$this->set('isAjax', $this->RequestHandler->isAjax());
		$this->layout = false;
		$this->render('ajaxlab');

		//echo  json_encode($get_Observation);exit;
		//echo "<pre>";print_r($get_Observation);exit;
	}

	public function medication(){
		$this->uses=array('NewCropPrescription','Person');
		//echo "<pre>";print_r($this->request->query);exit;
		/*$this->NewCropPrescription->bindModel(array('belongsTo' => array(
				'Patient' =>array('foreignKey'=>false, 'conditions' => array('Patient.id=NewCropPrescription.patient_uniqueid')), //,'type'=>'inner'
				//'NewCropAllergies' =>array('foreignKey'=>false, 'conditions' => array('Patient.patient_id=NewCropAllergies.patient_id')),
				'Person' =>array('foreignKey'=>false, 'conditions' => array('Person.id=Patient.person_id')),
		)),false);*/
		$this->Person->bindModel(array('belongsTo' => array(
				'Patient' =>array('foreignKey'=>false, 'conditions' => array('Patient.person_id=Person.id')),
				//'NewCropAllergies' =>array('foreignKey'=>false, 'conditions' => array('Patient.id=NewCropAllergies.patient_id')),
				'NewCropPrescription' =>array('foreignKey'=>false, 'conditions' => array('Patient.id=NewCropPrescription.patient_uniqueid')),		
		)),false);
		/*if($this->request->query['start_date']!=''){
		$this->request->query['start_date']=$this->DateFormat->formatDate2STD($this->request->query['start_date'],Configure::read('date_format'));
		$this->request->query['end_date']=$this->DateFormat->formatDate2STD($this->request->query['end_date'],Configure::read('date_format'));
			$conditions['NewCropPrescription'] = array('created BETWEEN ? AND ?'=> array($this->request->query['start_date'],$this->request->query['end_date']));
		}*/
		
		/*if($this->request->query['allergies']!=''){
			$conditions['NewCropAllergies']['name LIKE'] = "%".$this->request->query['allergies']."%";
		}*/
		//debug($conditions);//exit;
		if($this->request->query['age1']!=''){
			$this->request->query['age1']=$this->DateFormat->formatDate2STDForReport($this->request->query['age1'],Configure::read('date_format'));
			$this->request->query['age2']=$this->DateFormat->formatDate2STDForReport($this->request->query['age2'],Configure::read('date_format'));
			$conditions['Person'] = array('dob BETWEEN ? AND ?'=> array($this->request->query['age1'],$this->request->query['age2']));
		}
		if($this->request->query['first_name']!=''){
			$conditions['Person']['first_name LIKE'] = "%".trim($this->request->query['first_name'])."%";
		}
		if($this->request->query['last_name']!=''){
			$conditions['Person']['last_name LIKE'] = "%".trim($this->request->query['last_name'])."%";
		}	
		if($this->request->query['medication']!=''){
			$conditions['NewCropPrescription']['description LIKE'] = "%".$this->request->query['medication']."%";
		}	
		if($this->request->query['drug_type']!=''){
			$conditions['NewCropPrescription']['DeaGenericNamedCode LIKE'] = "%".$this->request->query['drug_type']."%";
		}	
		/*if($this->request->query['age1']!=''){
			$conditions['Patient']=array('age BETWEEN ? AND ?'=> array($this->request->query['age1'],$this->request->query['age2']));
		}	*/
		/*if($this->request->query['medication']!=''){
			$conditions['NewCropPrescription']['description LIKE'] = "%".$this->request->query['medication']."%";
		}*/
		if($this->request->query['medication_Sex']!=''){
			$conditions['Person']['sex LIKE'] = trim($this->request->query['medication_Sex'])."%";
		}
		$conditions = $this->postConditions($conditions);
		$this->paginate = array(
				'limit' => Configure::read('number_of_rows'),
				'conditions' =>$conditions ,
				'fields'=>array('Person.first_name','Person.last_name','Patient.patient_id','Patient.id','Person.sex','Person.age','Person.dob'),'group'=>array('Person.first_name','Person.last_name')
		);
		$data = $this->paginate('Person');
		$this->set('data', $data);
		$this->data = array('Person'=>$this->params->query);
		$this->set('isAjax', $this->RequestHandler->isAjax());
		//$this->layout = false;
		$this->render('ajaxmedication');
		//echo  json_encode($get_medication);exit;

	}
	public function Allergies(){
		//echo "<pre>";print_r($this->request->data['lab']);
		//echo  json_encode($this->request->data);exit;
		$this->uses=array('NewCropAllergies','Person');

		$this->NewCropAllergies->bindModel(array('belongsTo' => array(				
				'Patient' =>array('foreignKey'=>false, 'conditions' => array('Patient.id=NewCropAllergies.patient_uniqueid')),
				'Person' =>array('foreignKey'=>false, 'conditions' => array('Person.id=Patient.person_id')),
				'NoteDiagnosis' =>array('foreignKey'=>false, 'conditions' => array('Patient.id=NoteDiagnosis.patient_id')),
		)),false);
		/*$this->Person->bindModel(array('belongsTo' => array(
				'Patient' =>array('foreignKey'=>false, 'conditions' => array('Patient.person_id=Person.id')),
				'NewCropAllergies' =>array('foreignKey'=>false, 'conditions' => array('Patient.id=NewCropAllergies.patient_id')),
				'NewCropPrescription' =>array('foreignKey'=>false, 'conditions' => array('Patient.id=NewCropPrescription.patient_uniqueid')),
				'NoteDiagnosis' =>array('foreignKey'=>false, 'conditions' => array('Patient.id=NoteDiagnosis.patient_id')),
		)),false);*/
		//$get_allergies=$this->NewCropAllergies->find('all',array('fields'=>array('Patient.lookup_name'),'conditions'=>array('allergiesname LIKE'=>"%".$this->request->data['allergies']."%")));
		/*if($this->request->query['start_date']!=''){
		$this->request->query['start_date']=$this->DateFormat->formatDate2STD($this->request->query['start_date'],Configure::read('date_format'));
		$this->request->query['end_date']=$this->DateFormat->formatDate2STD($this->request->query['end_date'],Configure::read('date_format'));
			$conditions['NewCropAllergies'] = array('created BETWEEN ? AND ?'=> array($this->request->query['start_date'],$this->request->query['end_date']));
		}*/
		if($this->request->query['age1']!=''){
			$this->request->query['age1']=$this->DateFormat->formatDate2STDForReport($this->request->query['age1'],Configure::read('date_format'));
			$this->request->query['age2']=$this->DateFormat->formatDate2STDForReport($this->request->query['age2'],Configure::read('date_format'));
			$conditions['Person'] = array('dob BETWEEN ? AND ?'=> array($this->request->query['age1'],$this->request->query['age2']));
		}
		if($this->request->query['first_name']!=''){
			$conditions['Person']['first_name LIKE'] = "%".$this->request->query['first_name']."%";
		}
		if($this->request->query['last_name']!=''){
			$conditions['Person']['last_name LIKE'] = "%".$this->request->query['last_name']."%";
		}			
		if($this->request->query['allergies']!=''){
			$conditions['NewCropAllergies']['name LIKE'] = "%".$this->request->query['allergies']."%";
		}
		if($this->request->query['allergies_reaction']!=''){
			$conditions['NewCropAllergies']['note LIKE'] = $this->request->query['allergies_reaction']."%";
		}
		if($this->request->query['allergies_problem']!=''){
			$conditions['NoteDiagnosis']['diagnoses_name LIKE'] = "%".$this->request->query['allergies_problem']."%";
		}
		$conditions = $this->postConditions($conditions);
		$this->paginate = array(
				'limit' => Configure::read('number_of_rows'),
				'conditions'=>$conditions,
				'fields'=>array('Person.first_name','Person.last_name','Patient.patient_id','Patient.id','Person.sex','Person.age','Person.dob'),'group'=>array('Person.first_name','Person.last_name')
		);

		$data = $this->paginate('NewCropAllergies');
		$this->set('data', $data);
		$this->data = array('NewCropAllergies'=>$this->params->query);
		$this->set('isAjax', $this->RequestHandler->isAjax());
		//$this->layout = false;
		$this->render('ajaxallergies');
		//echo  json_encode($get_allergies);exit;

	}





	/*
	 *
	* measure calculation which is based on patient diagnosis
	*
	*/
	public function admin_auto_measure_calculation() {
		$this->uses = array('DoctorProfile', 'Patient', 'Note');
		$this->layout ='Advance';
		$this->set('title_for_layout', __('Measure Calculation', true));
		$this->DoctorProfile->bindModel(array('belongsTo' => array('User' => array('foreignKey'=>'user_id'),
				'Initial' => array('foreignKey'=>false, conditions => array('Initial.id=User.initial_id')),
				'Role' => array('foreignKey'=>false, conditions => array('Role.id=User.role_id'))
		)),false);
		$searchUserName='';
		if(isset($this->request->data) && isset($this->request->data) && $this->request->data['first_name']!=''){
			$searchFirstName = $this->request->data['first_name'];
		}
		if(isset($this->request->data) && isset($this->request->data) && $this->request->data['last_name']!=''){
			$searchLastName = $this->request->data['last_name'];
		}

		$condition = array('User.is_deleted' => 0, 'Role.name' => Configure::read('doctor'),'User.is_emergency' => 0, 'User.location_id' => $this->Session->read('locationid'));

		if(!empty($searchFirstName)){
			$searchConditions = array('User.first_name LIKE ' => $searchFirstName.'%');
			$condition = array_merge($searchConditions,$condition);
		}
		if(!empty($searchLastName)){
			$searchConditions = array('User.last_name LIKE ' => $searchLastName.'%');
			$condition = array_merge($searchConditions,$condition);
		}

		$this->paginate = array('limit' => Configure::read('number_of_rows'),
				'fields' => array('User.*','DoctorProfile.doctor_name', 'Initial.name'),
				'conditions' => $condition );
		$data = $this->paginate('DoctorProfile');
		$this->set('data', $data);

		// total patient count //
		$this->Note->bindModel(array('belongsTo' => array('Patient' => array('foreignKey'=>'patient_id')

		)),false);

		$bothTime = array($this->DateFormat->formatDate2STDForReport("01-01-".date('Y'),Configure::read('date_format'))." 00:00:00",$this->DateFormat->formatDate2STDForReport("31-12-".date('Y'),Configure::read('date_format'))." 23:59:59");
		//$withinTime = array($this->DateFormat->formatDate2STDForReport("01-02-".date('Y'),Configure::read('date_format'))." 00:00:00",$this->DateFormat->formatDate2STDForReport("31-12-".date('Y'),Configure::read('date_format'))." 23:59:59");
		//$outsideTime = array($this->DateFormat->formatDate2STDForReport("01-01".date('Y'),Configure::read('date_format'))." 00:00:00",$this->DateFormat->formatDate2STDForReport("31-01".date('Y'),Configure::read('date_format'))." 23:59:59");

		// first test data crieteria //
		$firstStageDenominatorCount =  $this->Patient->find('all', array('fields' => array('COUNT(DISTINCT Patient.patient_id) as count', 'Patient.doctor_id'), 'conditions' => array('Patient.form_received_on BETWEEN ? AND ? ' =>$bothTime, 'Patient.location_id'=>$this->Session->read('locationid'), 'Patient.is_deleted' => 0), 'group' => array('Patient.doctor_id')));
		foreach($firstStageDenominatorCount as $firstStageDenominatorCountVal) {
			$firstStageDenominatorCountArray[$firstStageDenominatorCountVal['Patient']['doctor_id']] = $firstStageDenominatorCountVal[0]['count'];
		}

		$firstStageNumeratorCount = $this->Note->find('all', array('fields' => array('COUNT(Patient.patient_id) as count', 'Patient.doctor_id'), 'conditions' => array('Patient.form_received_on BETWEEN ? AND ? ' =>$bothTime, 'Patient.location_id'=>$this->Session->read('locationid'), 'Patient.is_deleted' => 0, 'OR' => array(array('Note.icd <>' => "",'Note.icd_record' => 0), array('Note.icd' => "",'Note.icd_record' => 1))), 'group' => array('Patient.doctor_id')));
		foreach($firstStageNumeratorCount as $firstStageNumeratorCountVal) {
			$firstStageNumeratorCountArray[$firstStageNumeratorCountVal['Patient']['doctor_id']] = $firstStageNumeratorCountVal[0]['count'];
		}

		$this->set('firstStageDenominatorCountArray', $firstStageDenominatorCountArray);
		$this->set('firstStageNumeratorCountArray', $firstStageNumeratorCountArray);
	}

	/*
	 *
	* get doctor individual report based of patient diagnosis
	*
	*/
	public function admin_doctor_measure_calculation($doctorid) {
		$this->uses = array('Note', 'Patient', 'DoctorProfile');
		// total patient count //
		$this->Note->bindModel(array('belongsTo' => array('Patient' => array('foreignKey'=>'patient_id')

		)),false);

		$bothTime = array($this->DateFormat->formatDate2STDForReport("01-01-".date('Y'),Configure::read('date_format'))." 00:00:00",$this->DateFormat->formatDate2STDForReport("31-12-".date('Y'),Configure::read('date_format'))." 23:59:59");

		$doctorTotalCount =  $this->Patient->find('all', array('fields' => array('COUNT(Patient.patient_id) as count', 'Patient.doctor_id'), 'conditions' => array('Patient.form_received_on BETWEEN ? AND ? ' =>$bothTime, 'Patient.location_id'=>$this->Session->read('locationid'), 'Patient.is_deleted' => 0, 'Patient.doctor_id' => $doctorid), 'group' => array('Patient.patient_id')));
		$doctorPatientList = $this->Note->find('all', array('fields' => array('Patient.patient_id', 'Patient.doctor_id','Patient.lookup_name','Patient.sex','Patient.email','Patient.mobile_phone'), 'conditions' => array('Patient.form_received_on BETWEEN ? AND ? ' =>$bothTime, 'Patient.location_id'=>$this->Session->read('locationid'), 'Patient.is_deleted' => 0, 'Patient.doctor_id' => $doctorid,'OR' => array(array('Note.icd <>' => "",'Note.icd_record' => 0), array('Note.icd' => "",'Note.icd_record' => 1)))));
		//print_r($doctorPatientList);exit;
		$doctorDetails = $this->DoctorProfile->find('first', array('conditions' => array('DoctorProfile.user_id' => $doctorid)));
		$this->set('doctorDetails', $doctorDetails);
		$this->set('doctorTotalCount', $doctorTotalCount);
		$this->set('doctorPatientList', $doctorPatientList);

	}
	public function admin_eh($GenerateView=null){
		$this->uses=array('CqmReportEh','ChildBirth','DischargeSummary','Laboratory','LaboratoryToken','DignosticStudy',
				'NoteDiagnosis','Note','Person','Patient','ProcedurePerform','NewCropPrescription','Laboratory','LaboratoryToken','LaboratoryHl7Result','DeviceUse','LaboratoryResult');
		
		$this->set('GenerateView',$GenerateView);
		$startdate=$this->request->data[clinical_quality_measure][start_date];
		//echo $startdate."<br/>";
		
		$duration=$this->request->data[clinical_quality_measure][end_date];
		$addDays=$duration;
		$end_date=	date("Y-m-d", strtotime("+$addDays days", strtotime($startdate)));
		if(!empty($startdate)){
			$this->Session->write('StartDateEh',$startdate);
		}
		if(!empty($end_date)){
			$this->Session->write('EndDateEh',$end_date);
		}
		/* debug($this->Session->read('StartDateEh'));
		debug($this->Session->read('EndDateEh')); */
		$this->set('enddate',$end_date);
		$this->set('startdate',$startdate);
		if(!empty($this->request->data) || $GenerateView=='1'){
			//echo "here";
		//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//------------------------------------stroke 2-------------------------------------------------------------
		$this->Patient->unBindModel(array(
				'hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)
				,
				'belongsTo'=>array(
						'NoteDiagnosis'=>array('foreignKey'=>false,'conditions'=>array('NoteDiagnosis.patient_id=Patient.id')),

				),
		));
		//----------------Ipp calculations for stroke 2-------------------------------------------
		$ipp_stroke2=$this->Patient->find('all',array('fields'=>array('Patient.lookup_name','NoteDiagnosis.snowmedid','Patient.id','Patient.discharge_date','.Patient.form_received_on'),'conditions'=>array('Patient.doctor_id'=>'99','Patient.admission_type'=>'IPD',
				'Patient.age >=' => 18,'Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh')),'NoteDiagnosis.snowmedid'=>'111297002','DATEDIFF(discharge_date,form_received_on) <='=> 120),'recurcive'=>1));
		foreach($ipp_stroke2 as $ipp_stroke2s){
			$ipp_idstroke2[]=$ipp_stroke2s['Patient']['id'];
		}
		/* debug($ipp_idstroke2); */
		$this->Patient->id=false;
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$ipp_result=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$ipp_idstroke2)));
		if(!empty($ipp_result)){
			$demographic_stroke2=$this->admin_ehdemographic($ipp_result);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ipp_stroke2=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0435')));
			if(!empty($update_ipp_stroke2)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('ipp_count'=>$demographic_stroke2['0']['totalcount'],'ipp_male'=>$demographic_stroke2['0']['count_male'],
						'ipp_female'=>$demographic_stroke2['0']['female'],'ipp_race'=>$demographic_stroke2['0']['black'],'ipp_eth'=>$demographic_stroke2['0']['not_hispanic'])
						,array('measure_id'=>'0435'));
			}
			else{
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->save(array('measure_id'=>'0435','ipp_count'=>$demographic_stroke2['0']['totalcount'],'ipp_male'=>$demographic_stroke2['0']['totalcount'],'ipp_female'=>$demographic_stroke2['0']['female'],'ipp_race'=>$demographic_stroke2['0']['black'],'ipp_eth'=>$demographic_stroke2['0']['not_hispanic']));
			}

		}
		//--------------------------------------------------------------------------------------------
		//$demographic_result=$this->admin_demographic_calculation($denominator_result,$numarator_result,$exception_result);
		$this->NoteDiagnosis->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("NoteDiagnosis.patient_id=Patient.id"))
				)));
		$demo_patient_ids=$this->NoteDiagnosis->find('list',array('fields'=>array('Patient.patient_id','Patient.patient_id'),'conditions'=>array('NoteDiagnosis.patient_id'=>$ipp_idstroke2,'Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh'))),'recursive'=>1));
		//debug($demo_patient_ids);
		$a=$this->Patient->find('list',array('fields'=>array('id','id'),'conditions'=>array('Patient.patient_id'=>$demo_patient_ids),'group'=>'Patient.patient_id'));
		//-----------------------------------------Exculsion-----------------------------------------------------------------
		$s2_exclusion=$this->Note->find('list',array('fields'=>array('patient_id','patient_id'),'conditions'=>array('Note.patient_id'=>$a,'Note.atrial_documented !='=>'')));
		if(!empty($s2_exclusion)){
			$this->Note->bindModel(array(
					'belongsTo' => array(
							'Patient' =>array('foreignKey' => false,'conditions'=>array('Note.patient_id=Patient.id')),
							'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

					)));
			$excusi_Stroke2_result=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex','Patient.lookup_name','Patient.patient_id'),'conditions'=>array('Patient.id'=>$s2_exclusion),'group'=>'Patient.patient_id'));
			if(!empty($s2_exclusion)){
				$exculsion_stroke2=$this->admin_ehdemographic($excusi_Stroke2_result);
					
				$update_ipp_stroke2=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0435')));
				if(!empty($update_ipp_stroke2)){
					$this->CqmReportEh->id=false;
					$this->CqmReportEh->updateAll(array('exclusion_denominator'=>$exculsion_stroke2['0']['totalcount'],'exclud_male'=>$exculsion_stroke2['0']['count_male'],
							'exclud_female'=>$exculsion_stroke2['0']['female'],'exclud_race'=>$exculsion_stroke2['0']['black'],'exclud_eth'=>$exculsion_stroke2['0']['not_hispanic'])
							,array('measure_id'=>'0435'));

				}
			}
		}
		//----------------------------------------------Exception--------------------------------------------------------------------------------------------------------
		$this->NewCropPrescription->bindModel(array(
				'belongsTo' => array(
						'Patient' =>array('foreignKey' => false,'conditions'=>array('NewCropPrescription.patient_uniqueid=Patient.id')),
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$s2_exception=$this->NewCropPrescription->find('list',array('fields'=>array('patient_uniqueid','patient_uniqueid'),
				'conditions'=>array('NewCropPrescription.patient_uniqueid'=>$patient_id,'NewCropPrescription.rxnorm'=>'198467','Patient.is_discharge'=>1),'recursive'=>1));
		if(!empty($s2_exception)){
			$this->NewCropPrescription->bindModel(array(
					'belongsTo' => array(
							'Patient' =>array('foreignKey' => false,'conditions'=>array('NewCropPrescription.patient_uniqueid=Patient.id')),
							'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

					)));
			$excusi_Stroke2_result=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex','Patient.lookup_name','Patient.patient_id'),
					'conditions'=>array('Patient.id'=>$s2_exception),'group'=>'Patient.patient_id'));
			if(!empty($s2_exception)){
				$exculsion_stroke2=$this->admin_ehdemographic($excusi_Stroke2_result);
				$update_ipp_stroke2=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0436')));
				if(!empty($update_ipp_stroke2)){
					$this->CqmReportEh->id=false;
					$this->CqmReportEh->updateAll(array('exception_denominator'=>$exculsion_stroke2['0']['totalcount'],'excepd_male'=>$exculsion_stroke2['0']['count_male'],
							'excepd_female'=>$exculsion_stroke2['0']['female'],'excepd_race'=>$exculsion_stroke2['0']['black'],'excepd_eth'=>$exculsion_stroke2['0']['not_hispanic'])
							,array('measure_id'=>'0436'));

				}
			}
		}
		$this->Patient->id=false;
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$denominator_result=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$a)));
		if(!empty($denominator_result)){
			$demographic_deno_stroke2=$this->admin_ehdemographic($denominator_result);
			$update_deno_ipp_stroke2=$this->CqmReportEh->find('first',array('conditions'=>array('measure_id'=>'0435')));
			if(!empty($update_deno_ipp_stroke2)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('denominator_count'=>$demographic_deno_stroke2['0']['totalcount'],'denominator_male'=>$demographic_deno_stroke2['0']['count_male'],
						'denominator_female'=>$demographic_deno_stroke2['0']['female'],'denominator_race'=>$demographic_deno_stroke2['0']['black'],'denominator_eth'=>$demographic_deno_stroke2['0']['not_hispanic'])
						,array('measure_id'=>'0435'));
			}
		}
		$result_N=$this->NewCropPrescription->find('all',array('fields'=>array('patient_id','patient_id'),'conditions'=>array('NewCropPrescription.patient_id'=>$demo_patient_ids,'NewCropPrescription.rxnorm'=>'198467','NewCropPrescription.is_discharge_medication'=>1)));
		//debug($result_N);
		foreach($result_N as $result_Ns){
			$num_id=$result_Ns['NewCropPrescription']['patient_id'];
		}
		$this->Patient->id=false;
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$numarator_result=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex','Patient.lookup_name','Patient.patient_id'),'conditions'=>array('Patient.patient_id'=>$num_id),'group'=>'Patient.patient_id'));
		if(!empty($numarator_result)){
			$demographic_num_stroke2=$this->admin_ehdemographic($numarator_result);
			$update_num_ipp_stroke2=$this->CqmReportEh->find('first',array('conditions'=>array('measure_id'=>'0435')));
			if(!empty($update_num_ipp_stroke2)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('numerator_count'=>$demographic_num_stroke2['0']['totalcount'],'numerator_male'=>$demographic_num_stroke2['0']['count_male'],
						'numerator_female'=>$demographic_num_stroke2['0']['female'],'numerator_race'=>$demographic_num_stroke2['0']['black'],'numerator_eth'=>$demographic_num_stroke2['0']['not_hispanic'])
						,array('measure_id'=>'0435'));
			}
		}
		//debug($numarator_result);
	
		//$demographic_result=$this->admin_demographic_calculation($denominator_result,$numarator_result,$exception_result);
		//-----------------------------------------end--------------------------------------------------------------
		//------------------------------------stroke 3-------------------------------------------------------------
		//----------------Ipp calculations for stroke 3------------------------------------------
		$this->Patient->unBindModel(array(
				'hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),
							
				)
				,
				'belongsTo'=>array(
						'NoteDiagnosis'=>array('foreignKey'=>false,'conditions'=>array('NoteDiagnosis.patient_id=Patient.id')),
							
				),
		));
		$ipp_stroke3=$this->Patient->find('all',array('fields'=>array('Patient.lookup_name','NoteDiagnosis.snowmedid','Patient.id','Patient.discharge_date','.Patient.form_received_on'),'conditions'=>array('Patient.doctor_id'=>'99','Patient.admission_type'=>'IPD',
				'Patient.age >=' => 18,'Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh')),'NoteDiagnosis.snowmedid'=>'111297002','DATEDIFF(discharge_date,form_received_on) <='=> 120),'recurcive'=>1));
		
		foreach($ipp_stroke3 as $ipp_stroke3s){
			$ipp_idstroke3[]=$ipp_stroke3s['Patient']['id'];
		}
		/* debug($ipp_idstroke3); */
		$this->Patient->id=false;
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),
							
				)));
		$ipp_result=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$ipp_idstroke3)));
		if(!empty($ipp_result)){
			$demographic_stroke3=$this->admin_ehdemographic($ipp_result);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ipp_stroke3=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0436')));
			if(!empty($update_ipp_stroke3)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('ipp_count'=>$demographic_stroke2['0']['totalcount'],'ipp_male'=>$demographic_stroke2['0']['count_male'],
						'ipp_female'=>$demographic_stroke2['0']['female'],'ipp_race'=>$demographic_stroke2['0']['black'],'ipp_eth'=>$demographic_stroke2['0']['not_hispanic'])
						,array('measure_id'=>'0436'));
			}
			else{
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->save(array('measure_id'=>'0436','ipp_count'=>$demographic_stroke2['0']['totalcount'],'ipp_male'=>$demographic_stroke2['0']['totalcount'],'ipp_female'=>$demographic_stroke2['0']['female'],'ipp_race'=>$demographic_stroke2['0']['black'],'ipp_eth'=>$demographic_stroke2['0']['not_hispanic']));
			}

		}
		//--------------------------------------------------------------------------------------------
		$s3_u_id=$this->Patient->find('list',array('fields'=>array('Patient.patient_id','Patient.patient_id'),'conditions'=>array('Patient.id'=>$ipp_idstroke3)));
		$this->NoteDiagnosis->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("NoteDiagnosis.patient_id=Patient.id"))
				)));
		$patient_id=$this->NoteDiagnosis->find('list',array('fields'=>array('Patient.id','Patient.id'),
				'conditions'=>array('NoteDiagnosis.u_id'=>$s3_u_id,'Patient.admission_type'=>'IPD',
						'NoteDiagnosis.snowmedid'=>'111297002','NoteDiagnosis.snowmedid'=>'195080001',
						'start_dt BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh'))),'group'=>'Patient.patient_id','recursive'=>1));
		
		
		//-----------------------------------------Exculsion-----------------------------------------------------------------
		$s3_exclusion=$this->Note->find('list',array('fields'=>array('patient_id','patient_id'),'conditions'=>array('Note.patient_id'=>$patient_id,'Note.atrial_documented !='=>'')));
		if(!empty($s3_exclusion)){
			$this->Note->bindModel(array(
					'belongsTo' => array(
							'Patient' =>array('foreignKey' => false,'conditions'=>array('Note.patient_id=Patient.id')),
							'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

					)));
			$excusi_Stroke3_result=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex','Patient.lookup_name','Patient.patient_id'),'conditions'=>array('Patient.id'=>$s3_exclusion),'group'=>'Patient.patient_id'));
			if(!empty($s3_exclusion)){
				$exculsion_stroke3=$this->admin_ehdemographic($excusi_Stroke3_result);
				$update_ipp_stroke3=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0436')));
				if(!empty($update_ipp_stroke3)){
					$this->CqmReportEh->id=false;
					$this->CqmReportEh->updateAll(array('exclusion_denominator'=>$exculsion_stroke3['0']['totalcount'],'exclud_male'=>$exculsion_stroke3['0']['count_male'],
							'exclud_female'=>$exculsion_stroke3['0']['female'],'exclud_race'=>$exculsion_stroke3['0']['black'],'exclud_eth'=>$exculsion_stroke3['0']['not_hispanic'])
							,array('measure_id'=>'0436'));

				}
			}
		}
		//----------------------------------------------Exception--------------------------------------------------------------------------------------------------------
		$this->NewCropPrescription->bindModel(array(
				'belongsTo' => array(
						'Patient' =>array('foreignKey' => false,'conditions'=>array('NewCropPrescription.patient_uniqueid=Patient.id')),
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$s3_exception=$this->NewCropPrescription->find('list',array('fields'=>array('patient_uniqueid','patient_uniqueid'),
				'conditions'=>array('NewCropPrescription.patient_uniqueid'=>$patient_id,'NewCropPrescription.rxnorm'=>'855332','Patient.is_discharge'=>0),'recursive'=>1));
		if(!empty($s3_exception)){
			$this->NewCropPrescription->bindModel(array(
					'belongsTo' => array(
							'Patient' =>array('foreignKey' => false,'conditions'=>array('NewCropPrescription.patient_uniqueid=Patient.id')),
							'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

					)));
			$excusi_Stroke3_result=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex','Patient.lookup_name','Patient.patient_id'),'conditions'=>array('Patient.id'=>$s3_exception),'group'=>'Patient.patient_id'));
			if(!empty($s3_exclusion)){
				$exculsion_stroke3=$this->admin_ehdemographic($excusi_Stroke3_result);
				$update_ipp_stroke3=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0436')));
				if(!empty($update_ipp_stroke3)){
					$this->CqmReportEh->id=false;
					$this->CqmReportEh->updateAll(array('exception_denominator'=>$exculsion_stroke3['0']['totalcount'],'excepn_male'=>$exculsion_stroke3['0']['count_male'],
							'excepn_female'=>$exculsion_stroke3['0']['female'],'excepn_race'=>$exculsion_stroke3['0']['black'],'excepn_eth'=>$exculsion_stroke3['0']['not_hispanic'])
							,array('measure_id'=>'0436'));

				}
			}
		}
		//$deno_nonpara=count($patient_id);
		$this->Patient->id=false;
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),
							
				)));
		$demo_Stroke3_result=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex','Patient.lookup_name','Patient.patient_id'),'conditions'=>array('Patient.id'=>$patient_id),'group'=>'Patient.patient_id'));
		if(!empty($patient_id)){
			$demographic_stroke3=$this->admin_ehdemographic($demo_Stroke3_result);
			$update_ipp_stroke3=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0436')));
			if(!empty($update_ipp_stroke3)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('denominator_count'=>$demographic_stroke3['0']['totalcount'],'denominator_male'=>$demographic_stroke3['0']['count_male'],
						'denominator_female'=>$demographic_stroke3['0']['female'],'denominator_race'=>$demographic_stroke3['0']['black'],'denominator_eth'=>$demographic_stroke3['0']['not_hispanic'])
						,array('measure_id'=>'0436'));
					
			}
		}
$my_id=$this->Patient->find('list',array('fields'=>array('patient_id','patient_id'),'conditions'=>array('Patient.id'=>$patient_id)));

		$result_N=$this->NewCropPrescription->find('list',array('fields'=>array('patient_uniqueid','patient_uniqueid'),'conditions'=>array('NewCropPrescription.patient_id'=>$my_id,'NewCropPrescription.rxnorm'=>'855332')));
			//for($i=0;$i=< count($result_N);$i++){
			//if($result_N !='0')
			//$newid[]=$result_N;
			//}
			//debug($newid);
			//debug($result_N[2127]);
			//exit;
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),
							
				)));
		$num_Stroke3_result=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex','Patient.lookup_name','Patient.patient_id'),'conditions'=>array('Patient.id'=>$result_N[2127]),'group'=>'Patient.patient_id'));
		if(!empty($num_Stroke3_result)){
			$demographic_num_stroke3=$this->admin_ehdemographic($num_Stroke3_result);
			$update_ipp_stroke3=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0436')));
			if(!empty($update_ipp_stroke3)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('numerator_count'=>$demographic_num_stroke3['0']['totalcount'],'numerator_male'=>$demographic_num_stroke3['0']['count_male'],
						'numerator_female'=>$demographic_num_stroke3['0']['female'],'numerator_race'=>$demographic_num_stroke3['0']['black'],'numerator_eth'=>$demographic_num_stroke3['0']['not_hispanic'])
						,array('measure_id'=>'0436'));
					
			}
		}
		//-----------------------------------------end--------------------------------------------------------------
		//------------------------------------stroke 5---------------------------------------------------------------------------------------------------------------------
		$this->Patient->unBindModel(array(
				'hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)
				,
				'belongsTo'=>array(
						'NoteDiagnosis'=>array('foreignKey'=>false,'conditions'=>array('NoteDiagnosis.patient_id=Patient.id')),

				),
		));
		//----------------Ipp calculations for stroke 5-------------------------------------------
		$ipp_stroke5=$this->Patient->find('all',array('fields'=>array('Patient.lookup_name','NoteDiagnosis.snowmedid','Patient.id','Patient.discharge_date','Patient.form_received_on'),'conditions'=>array('Patient.doctor_id'=>'99','Patient.admission_type'=>'IPD',
				'Patient.age >=' => 18,'Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh')),'OR'=>array(array('NoteDiagnosis.snowmedid'=>'111297002'),array('NoteDiagnosis.snowmedid'=>'195080001')),'DATEDIFF(discharge_date,form_received_on) <='=> 120),'group'=>'Patient.lookup_name','recurcive'=>1));
		foreach($ipp_stroke5 as $ipp_stroke5s){
			$ipp_idstroke5[]=$ipp_stroke5s['Patient']['id'];
		}
		/* debug($ipp_idstroke2); */
		$this->Patient->id=false;
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$ipp_result=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$ipp_idstroke5)));
		
		if(!empty($ipp_result)){
			$demographic_stroke5=$this->admin_ehdemographic($ipp_result);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ipp_stroke5=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0438')));
			if(!empty($update_ipp_stroke5)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('ipp_count'=>$demographic_stroke5['0']['totalcount'],'ipp_male'=>$demographic_stroke5['0']['count_male'],
						'ipp_female'=>$demographic_stroke5['0']['female'],'ipp_race'=>$demographic_stroke5['0']['black'],'ipp_eth'=>$demographic_stroke5['0']['not_hispanic'])
						,array('measure_id'=>'0438'));
			}
			else{
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->save(array('measure_id'=>'0438','ipp_count'=>$demographic_stroke5['0']['totalcount'],'ipp_male'=>$demographic_stroke5['0']['totalcount'],'ipp_female'=>$demographic_stroke5['0']['female'],
						'ipp_race'=>$demographic_stroke5['0']['black'],'ipp_eth'=>$demographic_stroke5['0']['not_hispanic']));
			}

		}

		//------------------------------------------------------denominator ------------------------------------------------------------------------------------------------------
		$awsed=$this->Patient->find('list',array('fields'=>array('patient_id','patient_id'),'conditions'=>array('Patient.id'=>$ipp_idstroke5)));
		$this->NoteDiagnosis->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("NoteDiagnosis.patient_id=Patient.id"))
				)));
		$patient_id=$this->NoteDiagnosis->find('list',array('fields'=>array('patient_id','patient_id'),
				'conditions'=>array('Patient.patient_id'=>$awsed,'Patient.admission_type'=>'IPD','snowmedid'=>'111297002','start_dt BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),
				$this->Session->read('EndDateEh'))),'group'=>'Patient.patient_id','recursive'=>1));
		
		$this->Patient->id=false;
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$deno_result=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$patient_id)));
		if(!empty($deno_result)){
			$denominator_stroke5=$this->admin_ehdemographic($deno_result);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ipp_stroke5=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0438')));
			if(!empty($update_ipp_stroke5)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('denominator_count'=>$denominator_stroke5['0']['totalcount'],'denominator_male'=>$denominator_stroke5['0']['count_male'],
						'denominator_female'=>$denominator_stroke5['0']['female'],'denominator_race'=>$denominator_stroke5['0']['black'],'denominator_eth'=>$denominator_stroke5['0']['not_hispanic'])
						,array('measure_id'=>'0438'));
			}


		}
		//-----------------------------------------Exculsion-----------------------------------------------------------------
		$this->NewCropPrescription->bindModel(array(
				'belongsTo' => array(
						'Patient' =>array('foreignKey' => false,'conditions'=>array('NewCropPrescription.patient_uniqueid=Patient.id')),
						'Note' =>array('foreignKey' => false,'conditions'=>array('Note.patient_id=Patient.id')),

				)));
		$a=$this->Patient->find('list',array('fields'=>array('patient_id','patient_id'),'conditions'=>array('Patient.id'=>$patient_id)));
		$s5_exclusion=$this->NewCropPrescription->find('list',array('fields'=>array('patient_id','patient_id'),
				'conditions'=>array('NewCropPrescription.patient_id'=>$a,'OR'=>array(array('NewCropPrescription.rxnorm'=>'544825'),
						array('Note.atrial_documented !='=>''))),'recursive'=>1));
		if(!empty($s5_exclusion)){
			$this->Patient->bindModel(array(
					'belongsTo' => array(
							'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

					)));
			$excusi_Stroke5_result=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex','Patient.lookup_name','Patient.patient_id'),'conditions'=>array('Patient.patient_id'=>$s5_exclusion),'group'=>'Patient.patient_id'));
			if(!empty($s5_exclusion)){
				$exculsion_stroke5=$this->admin_ehdemographic($excusi_Stroke5_result);
				/* debug($s5_exclusion);
				 debug($exculsion_stroke5);
				exit; */
				$update_ipp_stroke5=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0438')));
				if(!empty($update_ipp_stroke5)){
					$this->CqmReportEh->id=false;
					$this->CqmReportEh->updateAll(array('exclusion_denominator'=>$exculsion_stroke5['0']['totalcount'],'exclud_male'=>$exculsion_stroke5['0']['count_male'],
							'exclud_female'=>$exculsion_stroke5['0']['female'],'exclud_race'=>$exculsion_stroke5['0']['black'],'exclud_eth'=>$exculsion_stroke5['0']['not_hispanic'])
							,array('measure_id'=>'0438'));

				}
			}
		}
		//-----------------------------------------------------------exception-------------------------------------------------------------------------------------
		//----------------------------------------------------------------------------------------------------------------------------------------------------------

		$this->NewCropPrescription->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("NewCropPrescription.patient_uniqueid=Patient.id"))
				)));

		$result_N=$this->NewCropPrescription->find('list',array('fields'=>array('patient_uniqueid','patient_uniqueid'),'conditions'=>array('NewCropPrescription.patient_uniqueid'=>$patient_id,
				'NewCropPrescription.rxnorm'=>'198467','NewCropPrescription.archive'=>'N','DATEDIFF(`NewCropPrescription`.`drm_date`,DATE_FORMAT(`Patient`.`form_received_on`, "%Y-%m-%d")) <=' =>'2'), 'recursive' => 1));
		//debug($result_N);
		//------------------------------------------------------Nummrator-----------------------------------------------------------------------------------
		$this->Patient->id=false;
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$numa_result=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$result_N)));
		if(!empty($numa_result)){
			$numarator_stroke5=$this->admin_ehdemographic($numa_result);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ipp_stroke5=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0438')));
			if(!empty($update_ipp_stroke5)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('numerator_count'=>$numarator_stroke5['0']['totalcount'],'numerator_male'=>$numarator_stroke5['0']['count_male'],
						'numerator_female'=>$numarator_stroke5['0']['female'],'numerator_race'=>$numarator_stroke5['0']['black'],'numerator_eth'=>$numarator_stroke5['0']['not_hispanic'])
						,array('measure_id'=>'0438'));
			}


		}

		//-----------------------------------------end--------------------------------------------------------------
		//------------------------------------Stroke 6-------------------------------------------------------------
		//----------------Ipp calculations for stroke 6-------------------------------------------
		$this->Patient->unBindModel(array(
				'hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)
				,
				'belongsTo'=>array(
						'NoteDiagnosis'=>array('foreignKey'=>false,'conditions'=>array('NoteDiagnosis.patient_id=Patient.id')),

				),
		));
		$ipp_stroke6=$this->Patient->find('all',array('fields'=>array('Patient.lookup_name','NoteDiagnosis.snowmedid','Patient.id','Patient.discharge_date','Patient.form_received_on'),'conditions'=>array('Patient.doctor_id'=>'99','Patient.admission_type'=>'IPD',
				'Patient.age >=' => 18,'Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh')),'OR'=>array(array('NoteDiagnosis.snowmedid'=>'111297002'),array('NoteDiagnosis.snowmedid'=>'195080001')),'DATEDIFF(discharge_date,form_received_on) <='=> 120),'group'=>'Patient.lookup_name','recurcive'=>1));
		foreach($ipp_stroke6 as $ipp_stroke6s){
			$ipp_idstroke6[]=$ipp_stroke6s['Patient']['id'];
		}
		/* debug($ipp_idstroke2); */
		$this->Patient->id=false;
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$ipp_result=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$ipp_idstroke6)));
		if(!empty($ipp_result)){
			$demographic_stroke6=$this->admin_ehdemographic($ipp_result);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ipp_stroke6=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0439')));
			if(!empty($update_ipp_stroke6)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('ipp_count'=>$demographic_stroke6['0']['totalcount'],'ipp_male'=>$demographic_stroke6['0']['count_male'],
						'ipp_female'=>$demographic_stroke6['0']['female'],'ipp_race'=>$demographic_stroke6['0']['black'],'ipp_eth'=>$demographic_stroke6['0']['not_hispanic'])
						,array('measure_id'=>'0439'));
			}
			else{
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->save(array('measure_id'=>'0439','ipp_count'=>$demographic_stroke6['0']['totalcount'],'ipp_male'=>$demographic_stroke6['0']['totalcount'],'ipp_female'=>$demographic_stroke5['0']['female'],
						'ipp_race'=>$demographic_stroke6['0']['black'],'ipp_eth'=>$demographic_stroke6['0']['not_hispanic']));
			}

		}
		$a=$this->Patient->find('list',array('fields'=>array('Patient.patient_id','Patient.patient_id'),'conditions'=>array('Patient.id'=>$ipp_idstroke6)));
		$this->Patient->bindModel(array(
				'belongsTo'=>array(
						'LaboratoryResult'=>array('foreignKey'=>false,'conditions'=>array("LaboratoryResult.patient_id=Patient.id")),
						'LaboratoryHl7Result'=>array('foreignKey'=>false,'conditions'=>array("LaboratoryHl7Result.laboratory_result_id=LaboratoryResult.id")),
						'NoteDiagnosis'=>array('foreignKey'=>false,'conditions'=>array('NoteDiagnosis.patient_id=Patient.id')),
				)));

		//debug($ipp_idstroke6);
		$patient_id=$this->Patient->find('list',array('fields'=>array('Patient.patient_id','Patient.patient_id'),
				'conditions'=>array('Patient.patient_id'=>$a,'OR'=>array(array('LaboratoryHl7Result.result >= '=>'100')
						,array('NoteDiagnosis.snowmedid'=>'111297002'))),'recursive'=>1));

		$this->Patient->id=false;
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$deno_result=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),
				'conditions'=>array('Patient.patient_id'=>$patient_id),'group'=>'Patient.patient_id'));

		if(!empty($deno_result)){
			$denominator_stroke6=$this->admin_ehdemographic($deno_result);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ipp_stroke6=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0439')));
			if(!empty($update_ipp_stroke6)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('denominator_count'=>$denominator_stroke6['0']['totalcount'],'denominator_male'=>$denominator_stroke6['0']['count_male'],
						'denominator_female'=>$denominator_stroke6['0']['female'],'denominator_race'=>$denominator_stroke6['0']['black'],'denominator_eth'=>$denominator_stroke6['0']['not_hispanic'])
						,array('measure_id'=>'0439'));
			}


		}

		//echo "<pre>";print_r($patient_id);
		$deno_nonpara=count($patient_id);

		$this->NewCropPrescription->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("NewCropPrescription.patient_uniqueid=Patient.id")),
						'NoteDiagnosis'=>array('foreignKey'=>false,'conditions'=>array("NoteDiagnosis.patient_id=Patient.id")),
				)));
		$result_N=$this->NewCropPrescription->find('list',array('fields'=>array('patient_uniqueid','patient_uniqueid'),'conditions'=>array('NewCropPrescription.patient_id'=>$patient_id,'NewCropPrescription.rxnorm'=>'198211','NewCropPrescription.is_discharge_medication'=>'1'),'recursive'=>1));
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$num_result=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$result_N)));

		if(!empty($num_result)){
			$numarator_stroke6=$this->admin_ehdemographic($num_result);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ipp_stroke6=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0439')));
			if(!empty($update_ipp_stroke6)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('numerator_count'=>$numarator_stroke6['0']['totalcount'],'numerator_male'=>$numarator_stroke6['0']['count_male'],
						'numerator_female'=>$numarator_stroke6['0']['female'],'numerator_race'=>$numarator_stroke6['0']['black'],'numerator_eth'=>$numarator_stroke6['0']['not_hispanic'])
						,array('measure_id'=>'0439'));
			}
		}
		//-----------------------------------------end--------------------------------------------------------------
		//------------------------------------Ami 10 -------------------------------------------------------------
		//----------------------------------ipp calculation------------------------------------------------------------------------------------------
		$this->Patient->unBindModel(array(
				'hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)
				,
				'belongsTo'=>array(
						'NoteDiagnosis'=>array('foreignKey'=>false,'conditions'=>array('NoteDiagnosis.patient_id=Patient.id')),

				),
		));
		//----------------Ipp calculations for Ami 10 -----------------------------------------
		$ipp_ami10=$this->Patient->find('all',array('fields'=>array('Patient.patient_id','Patient.lookup_name','NoteDiagnosis.snowmedid','Patient.id','Patient.discharge_date','.Patient.form_received_on'),'conditions'=>array('Patient.doctor_id'=>'99','Patient.admission_type'=>'IPD',
				'Patient.age >=' => 18,'Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh')),'OR'=>array(array('NoteDiagnosis.snowmedid'=>'10273003')),'DATEDIFF(discharge_date,form_received_on) <='=> 120),'group'=>'Patient.lookup_name','recurcive'=>1));
		//debug($ipp_ami10);
		foreach($ipp_ami10 as $ipp_ami10s){
			$ipp_idani10[]=$ipp_ami10s['Patient']['patient_id'];
		}

		$this->Patient->id=false;
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$ipp_resultamo10=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.patient_id'=>$ipp_idani10)));
		if(!empty($ipp_resultamo10)){
			$demographic_ami10=$this->admin_ehdemographic($ipp_resultamo10);
			$update_ipp_ami10=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0639')));
			if(!empty($update_ipp_ami10)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('ipp_count'=>$demographic_ami10['0']['totalcount'],'ipp_male'=>$demographic_ami10['0']['count_male'],
						'ipp_female'=>$demographic_ami10['0']['female'],'ipp_race'=>$demographic_ami10['0']['black'],'ipp_eth'=>$demographic_ami10['0']['not_hispanic'],
						'denominator_count'=>$demographic_ami10['0']['totalcount'],'denominator_male'=>$demographic_ami10['0']['count_male'],
						'denominator_female'=>$demographic_ami10['0']['female'],'denominator_race'=>$demographic_ami10['0']['black'],'denominator_eth'=>$demographic_ami10['0']['not_hispanic'])
						,array('measure_id'=>'0639'));
			}
			else{
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->save(array('measure_id'=>'0639','ipp_count'=>$demographic_ami10['0']['totalcount'],'ipp_male'=>$demographic_ami10['0']['count_male'],'ipp_female'=>$demographic_ami10['0']['female'],
						'ipp_race'=>$demographic_ami10['0']['black'],'ipp_eth'=>$demographic_ami10['0']['not_hispanic'],
						'denominator_count'=>$demographic_ami10['0']['totalcount'],'denominator_male'=>$demographic_ami10['0']['count_male'],
						'denominator_female'=>$demographic_ami10['0']['female'],'denominator_race'=>$demographic_ami10['0']['black'],
						'denominator_eth'=>$demographic_ami10['0']['not_hispanic']));
			}

		}
		$this->NewCropPrescription->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("NewCropPrescription.patient_uniqueid=Patient.id"))
				)));

		$result_N=$this->NewCropPrescription->find('list',array('fields'=>array('patient_uniqueid','patient_uniqueid'),'conditions'=>array('NewCropPrescription.patient_id'=>$ipp_idani10,'NewCropPrescription.rxnorm'=>'198211','NewCropPrescription.is_discharge_medication'=>'1')));
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$num_result=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$result_N)));
		
		if(!empty($num_result)){
			$numarator_ami10=$this->admin_ehdemographic($num_result);
			//debug($numarator_ami10);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ipp_ami10=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0639')));
			if(!empty($update_ipp_ami10)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('numerator_count'=>$numarator_ami10['0']['totalcount'],'numerator_male'=>$numarator_ami10['0']['count_male'],
						'numerator_female'=>$numarator_ami10['0']['female'],'numerator_race'=>$numarator_ami10['0']['black'],'numerator_eth'=>$numarator_ami10['0']['not_hispanic'])
						,array('measure_id'=>'0639'));
			}
		}
		//-----------------------------------------end--------------------------------------------------------------
		//------------------------------------stroke 4-------------------------------------------------------------
		//----------------Ipp calculations for stroke 4-------------------------------------------
		$this->Patient->unBindModel(array(
				'hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)
				,
				'belongsTo'=>array(
						'NoteDiagnosis'=>array('foreignKey'=>false,'conditions'=>array('NoteDiagnosis.patient_id=Patient.id')),

				),
		));
		$ipp_stroke4=$this->Patient->find('all',array('fields'=>array('Patient.lookup_name','NoteDiagnosis.snowmedid','Patient.id','Patient.discharge_date','.Patient.form_received_on'),'conditions'=>array('Patient.doctor_id'=>'99','Patient.admission_type'=>'IPD',
				'Patient.age >=' => 18,'Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh')),'OR'=>array(array('NoteDiagnosis.snowmedid'=>'111297002'),array('NoteDiagnosis.snowmedid'=>'195080001')),'DATEDIFF(discharge_date,form_received_on) <='=> 120),'group'=>'Patient.lookup_name','recurcive'=>1));
		foreach($ipp_stroke4 as $ipp_stroke4s){
			$ipp_idstroke4[]=$ipp_stroke4s['Patient']['id'];
		}
		$this->Patient->id=false;
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$ipp_result=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$ipp_idstroke4)));
		if(!empty($ipp_result)){
			$demographic_stroke4=$this->admin_ehdemographic($ipp_result);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ipp_stroke4=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0437')));
			if(!empty($update_ipp_stroke4)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('ipp_count'=>$demographic_stroke4['0']['totalcount'],'ipp_male'=>$demographic_stroke4['0']['count_male'],
						'ipp_female'=>$demographic_stroke4['0']['female'],'ipp_race'=>$demographic_stroke4['0']['black'],'ipp_eth'=>$demographic_stroke4['0']['not_hispanic'])
						,array('measure_id'=>'0437'));
			}
			else{
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->save(array('measure_id'=>'0437','ipp_count'=>$demographic_stroke4['0']['totalcount'],'ipp_male'=>$demographic_stroke4['0']['totalcount'],'ipp_female'=>$demographic_stroke4['0']['female'],
						'ipp_race'=>$demographic_stroke4['0']['black'],'ipp_eth'=>$demographic_stroke4['0']['not_hispanic']));
			}

		}
		//debug($ipp_idstroke4);
		$a=$this->Patient->find('list',array('fields'=>array('patient_id','patient_id'),'conditions'=>array('id'=>$ipp_idstroke4)));
		$b=$this->Patient->find('list',array('fields'=>array('Patient.id','Patient.id'),'conditions'=>array('patient_id'=>$a)));
		$this->NoteDiagnosis->bindModel(array(
				'belongsTo'=>array(
						'Patient1'=>array('className'=>'Patient','foreignKey'=>false,'conditions'=>array("NoteDiagnosis.patient_id=Patient1.id")),
						'Patient2'=>array('type'=>'INNER','className'=>'Patient','foreignKey'=>false,'conditions'=>array("Patient1.patient_id=Patient2.patient_id"))
				)));

		$patient_id1=$this->NoteDiagnosis->find('list',array('fields'=>array('Patient1.id','Patient1.id'),'conditions'=>array('Patient1.id'=>$b,'Patient1.admission_type'=>'IPD',
				'snowmedid'=>'111297002','Patient1.form_received_on <'=>"DATE_ADD(Patient2.form_received_on, INTERVAL +2 HOUR)",'Patient1.id <> Patient2.id'),'recursive'=>1));

		$deno_nonpara=count($patient_id1);
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$deno_result=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),
				'conditions'=>array('Patient.id'=>$patient_id1),'group'=>'Patient.patient_id'));

		if(!empty($deno_result)){
			$denominator_stroke4=$this->admin_ehdemographic($deno_result);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ipp_stroke6=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0439')));
			if(!empty($update_ipp_stroke6)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('denominator_count'=>$denominator_stroke4['0']['totalcount'],'denominator_male'=>$denominator_stroke4['0']['count_male'],
						'denominator_female'=>$denominator_stroke4['0']['female'],'denominator_race'=>$denominator_stroke4['0']['black'],'denominator_eth'=>$denominator_stroke4['0']['not_hispanic'])
						,array('measure_id'=>'0437'));
			}


		}

		$this->NewCropPrescription->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("NewCropPrescription.patient_uniqueid=Patient.id"))
				)));
		$result_N=$this->NewCropPrescription->find('list',array('fields'=>array('patient_uniqueid','patient_uniqueid'),'conditions'=>array('NewCropPrescription.patient_uniqueid'=>$b,'NewCropPrescription.rxnorm'=>'544825','Patient.form_received_on <'=>"DATE_ADD(Patient.form_received_on, INTERVAL +3 HOUR)"),'recursive'=>1));
		//debug($b);
		//debug($result_N);
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$num_result=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$result_N)));
		//debug($num_result);
		//exit;
		if(!empty($num_result)){
			$numarator_s4=$this->admin_ehdemographic($num_result);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ipp_s4=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0437')));
			if(!empty($update_ipp_s4)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('numerator_count'=>$numarator_s4['0']['totalcount'],'numerator_male'=>$numarator_s4['0']['count_male'],
						'numerator_female'=>$numarator_s4['0']['female'],'numerator_race'=>$numarator_s4['0']['black'],'numerator_eth'=>$numarator_s4['0']['not_hispanic'])
						,array('measure_id'=>'0437'));
			}
		}
		//-----------------------------------------end--------------------------------------------------------------
		//------------------------------------VTE 1-------------------------------------------------------------
		//----------------------------------------------------------------ipp VTE1---------------------------------------------------------
		$this->Patient->unBindModel(array(
				'hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)
				,
				'belongsTo'=>array(
						'NoteDiagnosis'=>array('foreignKey'=>false,'conditions'=>array('NoteDiagnosis.patient_id=Patient.id')),

				),
		));



		//$ipp_vte1=$this->Patient->find('all',array('fields'=>array('Patient.id','Patient.lookup_name'),'conditions'=>array('Patient.doctor_id'=>'99','Patient.is_discharge'=>'1','Patient.admission_type'=>'IPD',
		//		'Patient.age >=' => 18,'Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh'))),'group'=>'Patient.lookup_name'));/*'NoteDiagnosis.snowmedid NOT'=>array('13943000','11029002')*/

		$ipp_vte1=$this->Patient->find('all',array('fields'=>array('Patient.id','Patient.patient_id','Patient.lookup_name'),'conditions'=>array('Patient.id NOT'=>$this->NoteDiagnosis->find('list', array('fields' => array('NoteDiagnosis.patient_id','NoteDiagnosis.patient_id'), 'conditions' => array('NoteDiagnosis.snowmedid'=>array('13943000','11029002')))), 'Patient.doctor_id'=>'99','Patient.is_discharge'=>'1','Patient.admission_type'=>'IPD',
				'Patient.age >=' => 18,'Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh'))),'group'=>'Patient.patient_id', 'recursive' => -1));/*'NoteDiagnosis.snowmedid NOT'=>array('13943000','11029002')*/
		 //debug($ipp_vte1);
		//debug($end_date);
		//debug(count($ipp_vte1));
		//exit; 
		foreach($ipp_vte1 as $ipp_vte1s){
			$ipp_idvte1[]=$ipp_vte1s['Patient']['id'];
		}
		$this->Patient->id=false;
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$ipp_result1=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$ipp_idvte1)));
		if(!empty($ipp_result)){
			$demographic_vte1=$this->admin_ehdemographic($ipp_result1);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ipp_vte1=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0371')));
			if(!empty($update_ipp_vte1)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('ipp_count'=>$demographic_vte1['0']['totalcount'],'ipp_male'=>$demographic_vte1['0']['count_male'],
						'ipp_female'=>$demographic_vte1['0']['female'],'ipp_race'=>$demographic_vte1['0']['black'],'ipp_eth'=>$demographic_vte1['0']['not_hispanic'],
						'denominator_count'=>$demographic_vte1['0']['totalcount'],'denominator_male'=>$demographic_vte1['0']['count_male'],
						'denominator_female'=>$demographic_vte1['0']['female'],'denominator_race'=>$demographic_vte1['0']['black'],'denominator_eth'=>$demographic_vte1['0']['not_hispanic'])
						,array('measure_id'=>'0371'));
			}
			else{
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->save(array('measure_id'=>'0371','ipp_count'=>$demographic_vte1['0']['totalcount'],'ipp_male'=>$demographic_vte1['0']['count_male'],'ipp_female'=>$demographic_vte1['0']['female'],
						'ipp_race'=>$demographic_vte1['0']['black'],'ipp_eth'=>$demographic_vte1['0']['not_hispanic'],
						'denominator_count'=>$demographic_vte1['0']['totalcount'],'denominator_male'=>$demographic_vte1['0']['count_male'],
						'denominator_female'=>$demographic_vte1['0']['female'],'denominator_race'=>$demographic_vte1['0']['black'],'denominator_eth'=>$demographic_vte1['0']['not_hispanic']));
			}

		}
		//-----------------------------------------Exculsion-----------------------------------------------------------------
		$this->Patient->unBindModel(array(
				'hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		/* $this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),
						'NewCropPrescription' =>array('foreignKey' => false,'conditions'=>array('NewCropPrescription.uniqueid=Patient.id')),

				)
				,
				'belongsTo'=>array(
						'NoteDiagnosis'=>array('foreignKey'=>false,'conditions'=>array('NoteDiagnosis.patient_id=Patient.patient_id')),

				),
				'belongsTo'=>array(
						'NewCropPrescription' =>array('foreignKey' => false,'conditions'=>array('NewCropPrescription.patient_uniqueid=Patient.id')),
				),
		)); */
		 $this->Patient->bindModel(array(
		 'belongsTo' => array(
		 		'NoteDiagnosis'=>array('foreignKey'=>false,'conditions'=>array('NoteDiagnosis.patient_id=Patient.patient_id')),	
		))); 
		$exclu_vte1=$this->Patient->find('all',array('fields'=>array('Patient.lookup_name','Patient.id','Patient.discharge_date',
				'Patient.form_received_on'),'conditions'=>array('OR'=>array(array('Patient.room_id'=>'10'),array('NoteDiagnosis.snowmedid'=>'111297002'),array('Patient.room_id'=>'13'),array('Patient.room_id'=>'12')),'Patient.id'=>$ipp_idvte1,'Patient.doctor_id'=>'99','Patient.admission_type'=>'IPD',
						'Patient.age >=' => 18,'Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh')),
						'DATEDIFF(discharge_date,form_received_on) <='=>1),'group'=>'Patient.lookup_name','recurcive'=>1));
//debug($exclu_vte1);
//debug($ipp_idvte1);
//exit;
		foreach($exclu_vte1 as $exclu_vte1s){
			$idvexclu[]=$exclu_vte1s['Patient']['id'];
		}
		if(!empty($exclu_vte1)){
			$this->Patient->bindModel(array(
					'belongsTo' => array(
							'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

					)));
			$excusi_vte1_result=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex','Patient.lookup_name','Patient.patient_id'),
					'conditions'=>array('Patient.id'=>$idvexclu),'group'=>'Patient.patient_id'));
			if(!empty($exclu_vte1)){
				$exculsion_vte1=$this->admin_ehdemographic($excusi_vte1_result);
				$update_vte11=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0371')));
				if(!empty($update_vte11)){
					$this->CqmReportEh->id=false;
					$this->CqmReportEh->updateAll(array('exclusion_denominator'=>$exculsion_vte1['0']['totalcount'],'exclud_male'=>$exculsion_vte1['0']['count_male'],
							'exclud_female'=>$exculsion_vte1['0']['female'],'exclud_race'=>$exculsion_vte1['0']['black'],'exclud_eth'=>$exculsion_vte1['0']['not_hispanic'])
							,array('measure_id'=>'0371'));

				}
			}
		}

		//===========================================NUmarator================================================================
		$a=$this->Patient->find('list',array('fields'=>array('patient_id','patient_id'),'conditions'=>array('id'=>$ipp_idvte1)));

//exit;
		$this->NewCropPrescription->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("NewCropPrescription.patient_id=Patient.patient_id")),
				)));

		$patient_idqwe=$this->NewCropPrescription->find('all',array('fields'=>array('patient_id','patient_id'),
				'conditions'=>array('NewCropPrescription.patient_id'=>'UHHO13I11027','NewCropPrescription.rxnorm !='=>'849710','Patient.admission_type'=>'IPD'),'group'=>'NewCropPrescription.patient_id'));
		
		foreach ($patient_idqwe as $patient_idqwes){
			$idv1[]=$patient_idqwes['NewCropPrescription']['patient_id'];
		}
		
		//--------------------------------------------------------------
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$num_result=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex')
				,'conditions'=>array('Patient.patient_id'=>$idv1),'group'=>'Patient.patient_id'));
		//debug($num_result);
		//exit;
		if(!empty($num_result)){
			$numarator_vte1=$this->admin_ehdemographic($num_result);
		//	debug($numarator_vte1);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_vt1=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0371')));
			if(!empty($update_vt1)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('numerator_count'=>$numarator_vte1['0']['totalcount'],'numerator_male'=>$numarator_vte1['0']['count_male'],
						'numerator_female'=>$numarator_vte1['0']['female'],'numerator_race'=>$numarator_vte1['0']['black'],'numerator_eth'=>$numarator_vte1['0']['not_hispanic'])
						,array('measure_id'=>'0371'));
			}
		}
		//-----------------------------------------end--------------------------------------------------------------
		//------------------------------------VTE 2-------------------------------------------------------------
		//----------------------------------------------------------------ipp VTE2---------------------------------------------------------
		$this->Patient->unBindModel(array(
				'hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)
				,
				'belongsTo'=>array(
						'NoteDiagnosis'=>array('foreignKey'=>false,'conditions'=>array('NoteDiagnosis.patient_id=Patient.id')),

				),
		));



		$ipp_vte2=$this->Patient->find('all',array('fields'=>array('Patient.id','Patient.lookup_name'),'conditions'=>array('Patient.id NOT'=>$this->NoteDiagnosis->find('list', array('fields' => array('NoteDiagnosis.patient_id','NoteDiagnosis.patient_id'), 'conditions' => array('NoteDiagnosis.snowmedid'=>array('13943000','11029002')))), 'Patient.doctor_id'=>'99','Patient.is_discharge'=>'1','Patient.admission_type'=>'IPD',
				'Patient.age >=' => 18,'Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh'))),'group'=>'Patient.patient_id', 'recursive' => -1));/*'NoteDiagnosis.snowmedid NOT'=>array('13943000','11029002')*/
		
		foreach($ipp_vte2 as $ipp_vte2s){
			$ipp_idvte2[]=$ipp_vte2s['Patient']['id'];
		}
		//debug($ipp_idvte2);
		//exit;
		$this->Patient->id=false;
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$ipp_resultvte2=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$ipp_idvte2)));
		//debug($ipp_resultvte2);
		//exit;
		if(!empty($ipp_resultvte2)){
			$demographic_vte2=$this->admin_ehdemographic($ipp_resultvte2);
			//debug($demographic_vte2);
			//exit;
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ipp_vte2=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0372')));
			if(!empty($update_ipp_vte2)){
				
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('ipp_count'=>$demographic_vte2['0']['totalcount'],'ipp_male'=>$demographic_vte2['0']['count_male'],
						'ipp_female'=>$demographic_vte2['0']['female'],'ipp_race'=>$demographic_vte2['0']['black'],'ipp_eth'=>$demographic_vte2['0']['not_hispanic']),
						array('measure_id'=>'0372'));
			}
			else{
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->save(array('measure_id'=>'0372','ipp_count'=>$demographic_vte2['0']['totalcount'],'ipp_male'=>$demographic_vte2['0']['count_male'],'ipp_female'=>$demographic_vte2['0']['female'],
						'ipp_race'=>$demographic_vte2['0']['black'],'ipp_eth'=>$demographic_vte2['0']['not_hispanic']));
			}

		}
		//-----------------------------------------------------------------------------------deniminator---------------------------------------------------------------------
		$thyu=$this->Patient->find('list',array('fields'=>array('patient_id','patient_id'),'conditions'=>array('id'=>$ipp_idvte2)));
		
		//exit;
		$ipp_vtedeno2=$this->Patient->find('all',array('fields'=>array('Patient.id','Patient.lookup_name','Patient.room_id'),
				'conditions' => array('Patient.room_id'=>'5','Patient.patient_id'=>$thyu)));
		//debug($ipp_vtedeno2);
		//exit;
		foreach($ipp_vtedeno2 as $ipp_vtedeno2s){
			$ipp_idvtedemo2[]=$ipp_vtedeno2s['Patient']['id'];
		}
		$this->Patient->id=false;
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$ipp_resultvtedeno2=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$ipp_idvtedemo2)));
		if(!empty($ipp_resultvtedeno2)){
			$demographic_vtedeno2=$this->admin_ehdemographic($ipp_resultvtedeno2);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ipp_vted2=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0372')));
			if(!empty($update_ipp_vted2)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('denominator_count'=>$demographic_vtedeno2['0']['totalcount'],'denominator_male'=>$demographic_vtedeno2['0']['count_male'],
						'denominator_female'=>$demographic_vtedeno2['0']['female'],'denominator_race'=>$demographic_vtedeno2['0']['black'],
						'denominator_eth'=>$demographic_vtedeno2['0']['not_hispanic']),
						array('measure_id'=>'0372'));
			}
		}
		//-----------------------------------------------------------------------------------end-----------------------------------------------------------------------------
		//-------------------------------------------------------------------------------------------NUmarator-----------------------------------------------------------------------------------------------------------------
		$thyu1=$this->Patient->find('list',array('fields'=>array('patient_id','patient_id'),'conditions'=>array('id'=>$ipp_idvtedemo2)));
		$this->NoteDiagnosis->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("NoteDiagnosis.patient_id=Patient.id")),
						'DignosticStudy'=>array('foreignKey'=>false,'conditions'=>array("DignosticStudy.patient_id=Patient.id")),
				)));
		
		$patient_idnumavte2=$this->NoteDiagnosis->find('list',array('fields'=>array('patient_id','patient_id'),'conditions'=>array('Patient.patient_id'=>UHHO13I11027,'Patient.admission_type'=>'IPD',
				'start_dt BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh'))),'group'=>'Patient.patient_id','recursive'=>1));
		//debug($thyu1);
		//'NoteDiagnosis.snowmedid'=>'11029002',
		//debug($ipp_idvtedemo2);
		//debug($patient_idnumavte2);
//exit;
		$this->Patient->id=false;
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$ipp_resultvtenum2=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$patient_idnumavte2)));
		if(!empty($ipp_resultvtenum2)){
			$demographic_vtenum2=$this->admin_ehdemographic($ipp_resultvtenum2);
			//debug($demographic_vtenum2);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ipp_vten2=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0372')));
			if(!empty($update_ipp_vten2)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('numerator_count'=>$demographic_vtenum2['0']['totalcount'],'numerator_male'=>$demographic_vtenum2['0']['count_male'],
						'numerator_female'=>$demographic_vtenum2['0']['female'],'numerator_race'=>$demographic_vtenum2['0']['black'],
						'numerator_eth'=>$demographic_vtenum2['0']['not_hispanic']),
						array('measure_id'=>'0372'));
			}
		}
		//-----------------------------------------end--------------------------------------------------------------
		//------------------------------------Ami 2 -------------------------------------------------------------
		$this->Patient->unBindModel(array(
				'hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),
						'DignosticStudy'=>array('foreignKey'=>false,'conditions'=>array("DignosticStudy.patient_id=Patient.id")),
						'NoteDiagnosis'=>array('foreignKey'=>false,'conditions'=>array('NoteDiagnosis.patient_id=Patient.id')),
				)));
		$ipp_ami2=$this->Patient->find('all',array('fields'=>array('Patient.lookup_name','NoteDiagnosis.snowmedid','Patient.id','Patient.discharge_date','.Patient.form_received_on'),'conditions'=>array('Patient.doctor_id'=>'99','Patient.admission_type'=>'IPD',
				'Patient.age >=' => 18,'Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh')),
				'OR'=>array(array('NoteDiagnosis.snowmedid'=>'10273003')),'DignosticStudy.loinc_code'=>'8601-7','DATEDIFF(discharge_date,form_received_on) <='=> 120),'group'=>'Patient.lookup_name','recurcive'=>1));
		
		foreach($ipp_ami2 as $ipp_ami2s){
			$ids_ipp_ami2s[]=$ipp_ami2s['Patient']['id'];
		}
		$this->Patient->id=false;
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$ipp_resultami2=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$ids_ipp_ami2s)));
		if(!empty($ipp_resultami2)){
			$demographic_ami2=$this->admin_ehdemographic($ipp_resultami2);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ipp_ami2=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0142')));
			if(!empty($update_ipp_ami2)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('ipp_count'=>$demographic_ami2['0']['totalcount'],'ipp_male'=>$demographic_ami2['0']['count_male'],
						'ipp_female'=>$demographic_ami2['0']['female'],'ipp_race'=>$demographic_ami2['0']['black'],'ipp_eth'=>$demographic_ami2['0']['not_hispanic'],
						'denominator_count'=>$demographic_ami2['0']['totalcount'],'denominator_male'=>$demographic_ami2['0']['count_male'],
						'denominator_female'=>$demographic_ami2['0']['female'],'denominator_race'=>$demographic_ami2['0']['black'],'denominator_eth'=>$demographic_ami2['0']['not_hispanic'])
						,array('measure_id'=>'0142'));
			}
			else{
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->save(array('measure_id'=>'0142','ipp_count'=>$demographic_ami2['0']['totalcount'],'ipp_male'=>$demographic_ami2['0']['count_male'],
						'ipp_female'=>$demographic_ami2['0']['female'],
						'ipp_race'=>$demographic_ami2['0']['black'],'ipp_eth'=>$demographic_ami2['0']['not_hispanic'],
						'denominator_count'=>$demographic_ami2['0']['totalcount'],'denominator_male'=>$demographic_ami2['0']['count_male'],
						'denominator_female'=>$demographic_ami2['0']['female'],
						'denominator_race'=>$demographic_ami2['0']['black'],'denominator_eth'=>$demographic_ami2['0']['not_hispanic']));
			}

		}
		$this->NewCropPrescription->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("NewCropPrescription.patient_uniqueid=Patient.id"))
				)));
		$this->Patient->id=false;
		$erty=$this->Patient->find('list',array('fields'=>array('patient_id','patient_id'),'conditions'=>array('Patient.id'=>$ids_ipp_ami2s)));
		//debug($erty);
		//debug($ids_ipp_ami2s);
		$result_N=$this->NewCropPrescription->find('list',array('fields'=>array('patient_uniqueid','patient_uniqueid'),'conditions'=>array('NewCropPrescription.patient_id'=>$erty,'NewCropPrescription.rxnorm'=>'198467','NewCropPrescription.is_discharge_medication'=>'1')));
		
		//debug($result_N);
		//exit;
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$ipp_resultmami2=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$result_N)));
		if(!empty($ipp_resultmami2)){
			$demographicm_ami2=$this->admin_ehdemographic($ipp_resultmami2);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$updatem_ipp_ami2=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0142')));
			if(!empty($updatem_ipp_ami2)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('numerator_count'=>$demographicm_ami2['0']['totalcount'],'numerator_male'=>$demographicm_ami2['0']['count_male'],
						'numerator_female'=>$demographicm_ami2['0']['female'],'numerator_race'=>$demographicm_ami2['0']['black'],'numerator_eth'=>$demographicm_ami2['0']['not_hispanic'])
						,array('measure_id'=>'0142'));
			}
		}
		//-----------------------------------------end--------------------------------------------------------------
		//------------------------------------VTE 5-------------------------------------------------------------
		$this->Patient->unBindModel(array(
				'hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),
						'NoteDiagnosis'=>array('foreignKey'=>false,'conditions'=>array('NoteDiagnosis.patient_id=Patient.id')),
							
				)
		));



		$ipp_vte5=$this->Patient->find('all',array('fields'=>array('Patient.id','Patient.lookup_name'),
				'conditions' => array('NoteDiagnosis.snowmedid'=>array('11029002','13943000'),'Patient.doctor_id'=>'99','Patient.is_discharge'=>'1','Patient.admission_type'=>'IPD',
						'Patient.age >=' => 18,'Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh'))
						,'DATEDIFF(discharge_date,form_received_on) <='=>120),'group'=>'Patient.lookup_name', 'recursive' =>1));/*'NoteDiagnosis.snowmedid NOT'=>array('13943000','11029002')*/
		
		foreach($ipp_vte5 as $ipp_vte5s){
			$ipp_idvte5[]=$ipp_vte5s['Patient']['id'];
		}
		$this->Patient->id=false;
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$ipp_resultvte5=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$ipp_idvte5)));
		if(!empty($ipp_resultvte5)){
			$demo_ipp_vte5=$this->admin_ehdemographic($ipp_resultvte5);
			//debug($update_ipp_vte5);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ipp_vte5=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0375')));
			if(!empty($update_ipp_vte5)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('ipp_count'=>$demo_ipp_vte5['0']['totalcount'],'ipp_male'=>$demo_ipp_vte5['0']['count_male'],
						'ipp_female'=>$demo_ipp_vte5['0']['female'],'ipp_race'=>$demo_ipp_vte5['0']['black'],'ipp_eth'=>$demo_ipp_vte5['0']['not_hispanic']),
						array('measure_id'=>'0375'));
			}
			else{
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->save(array('measure_id'=>'0375','ipp_count'=>$demo_ipp_vte5['0']['totalcount'],'ipp_male'=>$demo_ipp_vte5['0']['count_male'],'ipp_female'=>$demo_ipp_vte5['0']['female'],
						'ipp_race'=>$demo_ipp_vte5['0']['black'],'ipp_eth'=>$demo_ipp_vte5['0']['not_hispanic']));
			}

		}
		//-------------------------------------------------------------------------------------------denominator-----------------------------------------------------------
		$w=$this->Patient->find("list",array('fields'=>array('Patient.patient_id','Patient.patient_id'),'conditions'=>array('Patient.id'=>$ipp_idvte5)));
		
		$this->Patient->id=false;
		$w1=$this->Patient->find("list",array('fields'=>array('Patient.id','Patient.id'),'conditions'=>array('Patient.patient_id'=>$w)));
		
		$this->Patient->bindModel(array(
				'belongsTo'=>array(
						'DignosticStudy'=>array('foreignKey'=>false,'conditions'=>array("DignosticStudy.patient_id=Patient.id")),
						'NewCropPrescription'=>array('foreignKey'=>false,'conditions'=>array("NewCropPrescription.patient_id=Patient.patient_id")),
				)));
		
		$patient_idvte5=$this->Patient->find('list',array('fields'=>array('id','id'),'conditions'=>array('Patient.id'=>$w1,'Patient.admission_type'=>'IPD',
				'DignosticStudy.loinc_code'=>'24533-2','DignosticStudy.vte_confirm'=>'1',
				'NewCropPrescription.is_discharge_medication'=>'1','NewCropPrescription.rxnorm'=>'855332'),'recursive'=>1));
		//debug($w1);
	//	debug($patient_idvte5);
	//	exit;
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$ipp_resultvtedeno5=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$patient_idvte5)));
		if(!empty($ipp_resultvtedeno5)){
			$demographic_vtedeno5=$this->admin_ehdemographic($ipp_resultvtedeno5);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ipp_vted5=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0375')));
			if(!empty($update_ipp_vted5)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('denominator_count'=>$demographic_vtedeno5['0']['totalcount'],'denominator_male'=>$demographic_vtedeno5['0']['count_male'],
						'denominator_female'=>$demographic_vtedeno5['0']['female'],'denominator_race'=>$demographic_vtedeno5['0']['black'],
						'denominator_eth'=>$demographic_vtedeno5['0']['not_hispanic']),
						array('measure_id'=>'0375'));
			}
		}
		//---------------------------------------------------------NUmarator---------------------------------------------------------------------------------------

		$this->DischargeSummary->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("DischargeSummary.patient_id=Patient.id")),

				)));

		$result_N=$this->DischargeSummary->find('list',array('fields'=>array('patient_id','patient_id'),
				'conditions'=>array('OR'=>(array(array('DischargeSummary.communication_code'=>'0'),
						array('DischargeSummary.com_refuse_discharge'=>'1'
						))),'DischargeSummary.patient_id'=>$patient_idvte5),'recursive'=>1));
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$ipp_resultvtenum5=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex','Patient.lookup_name'),'conditions'=>array('Patient.id'=>$result_N)));
		//debug($ipp_resultvtenum4);
		if(!empty($ipp_resultvtenum5)){
			$demographic_vtenum5=$this->admin_ehdemographic($ipp_resultvtenum5);
			//debug($demographic_vtenum4);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ipp_vten5=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0375')));
			if(!empty($update_ipp_vten5)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('numerator_count'=>$demographic_vtenum5['0']['totalcount'],'numerator_male'=>$demographic_vtenum5['0']['count_male'],
						'numerator_female'=>$demographic_vtenum5['0']['female'],'numerator_race'=>$demographic_vtenum5['0']['black'],
						'numerator_eth'=>$demographic_vtenum5['0']['not_hispanic']),
						array('measure_id'=>'0375'));
			}
		}
		//-----------------------------------------end--------------------------------------------------------------
		//------------------------------------PC-01-------------------------------------------------------------
		$this->Note->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("Note.patient_id=Patient.id")),

				)));
		$patient_idPC=$this->Note->find('list',array('fields'=>array('Note.patient_id','Note.patient_id'),'conditions'=>array('Patient.doctor_id'=>'99','DATEDIFF(Patient.discharge_date,Patient.form_received_on) <='=>120,'Patient.age >'=>8,'Patient.age <'=>65
				,'OR'=>(array(array('Note.patient_character_snomed'=>13798002),array('Note.patient_character_snomed'=>441924001))),'Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh'))),'group'=>'Patient.patient_id','recursive'=>1));
		
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$ipp_resultpc=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$patient_idPC)));
		if(!empty($ipp_resultpc)){
			$demographic_pc=$this->admin_ehdemographic($ipp_resultpc);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ipp_pc=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0469')));
			if(!empty($update_ipp_pc)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('ipp_count'=>$demographic_pc['0']['totalcount'],'ipp_male'=>$demographic_pc['0']['count_male'],
						'ipp_female'=>$demographic_pc['0']['female'],'ipp_race'=>$demographic_pc['0']['black'],'ipp_eth'=>$demographic_pc['0']['not_hispanic'],
						'denominator_count'=>$demographic_pc['0']['totalcount'],'denominator_male'=>$demographic_pc['0']['count_male'],
						'denominator_female'=>$demographic_pc['0']['female'],'denominator_race'=>$demographic_pc['0']['black'],'denominator_eth'=>$demographic_pc['0']['not_hispanic'])
						,array('measure_id'=>'0469'));
			}
			else{
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->save(array('measure_id'=>'0469','ipp_count'=>$demographic_pc['0']['totalcount'],'ipp_male'=>$demographic_pc['0']['count_male'],
						'ipp_female'=>$demographic_pc['0']['female'],
						'ipp_race'=>$demographic_pc['0']['black'],'ipp_eth'=>$demographic_pc['0']['not_hispanic'],
						'denominator_count'=>$demographic_pc['0']['totalcount'],'denominator_male'=>$demographic_pc['0']['count_male'],
						'denominator_female'=>$demographic_pc['0']['female'],
						'denominator_race'=>$demographic_pc['0']['black'],'denominator_eth'=>$demographic_pc['0']['not_hispanic']));
			}
 
		}
		$this->ProcedurePerform->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("ProcedurePerform.patient_id=Patient.id")),
						'NoteDiagnosis'=>array('foreignKey'=>false,'conditions'=>array("NoteDiagnosis.patient_id=Patient.id")),


				)));

		$result_N=$this->ProcedurePerform->find('list',array('fields'=>array('Patient.id','Patient.id'),
				'conditions'=>array('ProcedurePerform.patient_id'=>$patient_idPC,'NoteDiagnosis.snowmedid'=>'199746004',
						'ProcedurePerform.snowmed_code'=>'11466000','Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh'))),'recursive'=>1));
		$n=array_diff($patient_idPC,$result_N);
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$ipp_resultpc1=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$n)));

		if(!empty($ipp_resultpc1)){
			$demographic_p1c=$this->admin_ehdemographic($ipp_resultpc1);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update1_ipp_pc=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0469')));
			if(!empty($update1_ipp_pc)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('numerator_count'=>$demographic_p1c['0']['totalcount'],'numerator_male'=>$demographic_p1c['0']['count_male'],
						'numerator_female'=>$demographic_p1c['0']['female'],'numerator_race'=>$demographic_p1c['0']['black'],'numerator_eth'=>$demographic_p1c['0']['not_hispanic'])
						,array('measure_id'=>'0469'));
			}
		}
		//-----------------------------------------end--------------------------------------------------------------
		//------------------------------------Ami 7a -------------------------------------------------------------
		//----------------------------------ipp calculation------------------------------------------------------------------------------------------
		$this->Patient->unBindModel(array(
				'hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),
						'DignosticStudy'=>array('foreignKey'=>false,'conditions'=>array("DignosticStudy.patient_id=Patient.id")),
						'NoteDiagnosis'=>array('foreignKey'=>false,'conditions'=>array('NoteDiagnosis.patient_id=Patient.id')),
				)));
		//----------------Ipp calculations for -------Ami 7a --------------------------------------
		$ipp_ami7=$this->Patient->find('all',array('fields'=>array('Patient.lookup_name','NoteDiagnosis.snowmedid','Patient.id','Patient.discharge_date','Patient.form_received_on'),'conditions'=>array('Patient.doctor_id'=>'99','Patient.admission_type'=>'IPD',
				'Patient.age >=' => 18,'Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh')),
				'OR'=>array(array('NoteDiagnosis.snowmedid'=>'10273003')),'DignosticStudy.loinc_code'=>'8601-7','DATEDIFF(discharge_date,form_received_on) <='=> 120),'group'=>'Patient.lookup_name','recurcive'=>1));
		
	
		foreach($ipp_ami7 as $ipp_ami7s){
			$ids_ipp_ami7s[]=$ipp_ami7s['Patient']['id'];
		}
		//debug($ids_ipp_ami7s);
		//exit;
		$this->Patient->id=false;
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$ipp_resultami7=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$ids_ipp_ami7s)));
		if(!empty($ipp_resultami7)){
			$demographic_am7=$this->admin_ehdemographic($ipp_resultami7);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ipp_ami10=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0164')));
			if(!empty($update_ipp_ami10)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('ipp_count'=>$demographic_am7['0']['totalcount'],'ipp_male'=>$demographic_am7['0']['count_male'],
						'ipp_female'=>$demographic_am7['0']['female'],'ipp_race'=>$demographic_am7['0']['black'],'ipp_eth'=>$demographic_am7['0']['not_hispanic'])
						,array('measure_id'=>'0164'));
			}
			else{
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->save(array('measure_id'=>'0164','ipp_count'=>$demographic_am7['0']['totalcount'],'ipp_male'=>$demographic_am7['0']['count_male'],
						'ipp_female'=>$demographic_am7['0']['female'],
						'ipp_race'=>$demographic_am7['0']['black'],'ipp_eth'=>$demographic_am7['0']['not_hispanic']));
			}

		}
		//------------------------------------------------------------deniminator----------------------------------------------------------------

		$this->NewCropPrescription->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("NewCropPrescription.patient_id=Patient.patient_id")),
				)));
		$e=$this->Patient->find('list',array('fields'=>array('patient_id','patient_id'),'conditions'=>array('id'=>$ids_ipp_ami7s)));
		//debug($e);
		$patient_id1234=$this->NewCropPrescription->find('list',array('fields'=>array('Patient.id','Patient.id'),
				'conditions'=>array('NewCropPrescription.patient_id'=>$e,'NewCropPrescription.rxnorm'=>'346773'),'recursive'=>1));
		
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$ipp_resultdami7=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$patient_id1234)));
		if(!empty($ipp_resultdami7)){
			$demographicd_am7=$this->admin_ehdemographic($ipp_resultdami7);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$updated_ipp_ami10=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0164')));
			if(!empty($updated_ipp_ami10)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('denominator_count'=>$demographicd_am7['0']['totalcount'],'denominator_male'=>$demographicd_am7['0']['count_male'],
						'denominator_female'=>$demographicd_am7['0']['female'],'denominator_race'=>$demographicd_am7['0']['black'],'denominator_eth'=>$demographicd_am7['0']['not_hispanic'])
						,array('measure_id'=>'0164'));
			}
				

		}
		//---------------------------------------------------------------NUmarator------------------------------------------------------------------------------------------------------
		$this->NewCropPrescription->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("NewCropPrescription.patient_id=Patient.patient_id"))
				)));
		$result_N=$this->NewCropPrescription->find('list',array('fields'=>array('patient_id','patient_id'),
				'conditions'=>array('NewCropPrescription.patient_id'=>$e,'NewCropPrescription.rxnorm'=>'346773',
						"TIME_FORMAT(TIMEDIFF(NewCropPrescription.date_of_prescription,Patient.form_received_on),'%H:%i') <"=>'00:30'),'recursive'=>1));
		
		$this->Patient->id=false;
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),
		
				)));
		$last=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.patient_id'=>$result_N)));
		
		if(!empty($last)){
			$demographic_last=$this->admin_ehdemographic($last);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ippscp11last=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0164')));
			if(!empty($update_ippscp11last)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('numerator_count'=>$demographic_last['0']['totalcount'],'numerator_male'=>$demographic_last['0']['count_male'],
						'numerator_female'=>$demographic_last['0']['female'],'numerator_race'=>$demographic_last['0']['black'],'numerator_eth'=>$demographic_last['0']['not_hispanic'])
						,array('measure_id'=>'0164'));
			}
		
		}
		//-----------------------------------------end--------------------------------------------------------------
		//------------------------------------SCIP-INF-9 -------------------------------------------------------------
		//----------------Ipp calculations for-SCIP-INF-9 ---------------------------------------
		$ipp_SCIP=$this->Patient->find('all',array('fields'=>array('Patient.id','Patient.lookup_name'),
				'conditions'=>array('Patient.doctor_id'=>'99','Patient.admission_type'=>'IPD',
				'Patient.age >=' => 18,'Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh'))),'group'=>'Patient.lookup_name','recurcive'=>1));
		//debug($ipp_SCIP);
		//exit;
		foreach($ipp_SCIP as $ipp_SCIPs){
			$ids_ipp_SCIPs[]=$ipp_SCIPs['Patient']['id'];
		}
		$this->Patient->id=false;
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$ipp_resultSCIP=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$ids_ipp_SCIPs)));
		if(!empty($ipp_resultSCIP)){
			$demographic_SCIP=$this->admin_ehdemographic($ipp_resultSCIP);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ipp_amiscip=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0453')));
			if(!empty($update_ipp_amiscip)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('ipp_count'=>$demographic_SCIP['0']['totalcount'],'ipp_male'=>$demographic_SCIP['0']['count_male'],
						'ipp_female'=>$demographic_SCIP['0']['female'],'ipp_race'=>$demographic_SCIP['0']['black'],'ipp_eth'=>$demographic_SCIP['0']['not_hispanic'])
						,array('measure_id'=>'0453'));
			}
			else{
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->save(array('measure_id'=>'0453','ipp_count'=>$demographic_SCIP['0']['totalcount'],'ipp_male'=>$demographic_SCIP['0']['count_male'],
						'ipp_female'=>$demographic_SCIP['0']['female'],
						'ipp_race'=>$demographic_SCIP['0']['black'],'ipp_eth'=>$demographic_SCIP['0']['not_hispanic']));
			}

		}
		//debug($ipp_SCIP);


		//-------------------------------------------------------------------denominator--------------------------------------------------------------------------
		$this->DeviceUse->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("DeviceUse.patient_id=Patient.id"))
				)));
		$patient_idscp=$this->DeviceUse->find('list',array('fields'=>array('patient_id','patient_id'),'conditions'=>array('Patient.id'=>$ids_ipp_SCIPs,
				'DeviceUse.snowmed_code'=>'20568009'),'recursive'=>1));
		$this->Patient->id=false;
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$ipp_resultscp=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$patient_idscp)));

		if(!empty($ipp_resultscp)){
			$demographic_scp=$this->admin_ehdemographic($ipp_resultscp);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ippscp=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0453')));
			if(!empty($update_ippscp)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('denominator_count'=>$demographic_scp['0']['totalcount'],'denominator_male'=>$demographic_scp['0']['count_male'],
						'denominator_female'=>$demographic_scp['0']['female'],'denominator_race'=>$demographic_scp['0']['black'],'denominator_eth'=>$demographic_scp['0']['not_hispanic'])
						,array('measure_id'=>'0453'));
			}

		}
		//debug($patient_idscp);
	

		$this->DeviceUse->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("DeviceUse.patient_id=Patient.id"))
				)));
		$patientnum_idscp=$this->DeviceUse->find('list',array('fields'=>array('patient_id','patient_id'),'conditions'=>array('Patient.id'=>$patient_idscp,
				'DATEDIFF(Patient.discharge_date,Patient.form_received_on) <='=>2),'recursive'=>1));
		
		$this->Patient->id=false;
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$ipp_resultscp111=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$patientnum_idscp)));

		if(!empty($ipp_resultscp111)){
			$demographic_scp11=$this->admin_ehdemographic($ipp_resultscp111);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ippscp11=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0453')));
			if(!empty($update_ippscp11)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('numerator_count'=>$demographic_scp11['0']['totalcount'],'numerator_male'=>$demographic_scp11['0']['count_male'],
						'numerator_female'=>$demographic_scp11['0']['female'],'numerator_race'=>$demographic_scp11['0']['black'],'numerator_eth'=>$demographic_scp11['0']['not_hispanic'])
						,array('measure_id'=>'0453'));
			}

		}
		//-----------------------------------------end--------------------------------------------------------------
		//------------------------------------VTE 6-------------------------------------------------------------
		$this->Patient->unBindModel(array(
				'hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),
						'NoteDiagnosis'=>array('foreignKey'=>false,'conditions'=>array('NoteDiagnosis.patient_id=Patient.id')),
							
				)
		));



		$ipp_vte6=$this->Patient->find('all',array('fields'=>array('Patient.id','Patient.lookup_name'),
				'conditions' => array('NoteDiagnosis.snowmedid'=>array('11029002','13943000'),'Patient.doctor_id'=>'99','Patient.is_discharge'=>'1','Patient.admission_type'=>'IPD',
						'Patient.age >=' => 18,'Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh'))
						,'DATEDIFF(discharge_date,form_received_on) <='=>120),'group'=>'Patient.lookup_name', 'recursive' =>1));/*'NoteDiagnosis.snowmedid NOT'=>array('13943000','11029002')*/
		
		foreach($ipp_vte6 as $ipp_vte6s){
			$ipp_idvte6[]=$ipp_vte6s['Patient']['id'];
		}
		$this->Patient->id=false;
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$ipp_resultvte6=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$ipp_idvte6)));
		if(!empty($ipp_resultvte6)){
			$demo_ipp_vte6=$this->admin_ehdemographic($ipp_resultvte6);
			//debug($update_ipp_vte5);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ipp_vte6=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0376')));
			if(!empty($update_ipp_vte6)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('ipp_count'=>$demo_ipp_vte6['0']['totalcount'],'ipp_male'=>$demo_ipp_vte6['0']['count_male'],
						'ipp_female'=>$demo_ipp_vte6['0']['female'],'ipp_race'=>$demo_ipp_vte6['0']['black'],'ipp_eth'=>$demo_ipp_vte6['0']['not_hispanic'],
						'denominator_count'=>$demo_ipp_vte6['0']['totalcount'],'denominator_male'=>$demo_ipp_vte6['0']['count_male'],
						'denominator_female'=>$demo_ipp_vte6['0']['female'],'denominator_race'=>$demo_ipp_vte6['0']['black'],'denominator_eth'=>$demo_ipp_vte6['0']['not_hispanic']),
						array('measure_id'=>'0376'));
			}
			else{
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->save(array('measure_id'=>'0376','ipp_count'=>$demo_ipp_vte6['0']['totalcount'],'ipp_male'=>$demo_ipp_vte6['0']['count_male'],'ipp_female'=>$demo_ipp_vte6['0']['female'],
						'ipp_race'=>$demo_ipp_vte6['0']['black'],'ipp_eth'=>$demo_ipp_vte6['0']['not_hispanic'],
						'denominator_count'=>$demo_ipp_vte6['0']['totalcount'],'denominator_male'=>$demo_ipp_vte6['0']['count_male'],
						'denominator_female'=>$demo_ipp_vte6['0']['female'],'denominator_race'=>$demo_ipp_vte6['0']['black'],'denominator_eth'=>$demo_ipp_vte6['0']['not_hispanic']));
			}

		}
		//-----------------------------------------Exculsion-----------------------------------------------------------------
		$this->NewCropPrescription->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("NewCropPrescription.patient_uniqueid=Patient.id")),
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
				)));
		$excusi_VTE6_result=$this->NewCropPrescription->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex','Patient.lookup_name','Patient.patient_id'),
				'conditions'=>array('NewCropPrescription.rxnorm'=>'849710','Patient.id'=>$ipp_idvte6),'group'=>'Patient.patient_id'));
		
		if(!empty($excusi_VTE6_result)){
			$exculsion_VTE6=$this->admin_ehdemographic($excusi_VTE6_result);

			$update_ipp_VTE6=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0376')));
			if(!empty($update_ipp_stroke2)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('exclusion_denominator'=>$exculsion_VTE6['0']['totalcount'],'exclud_male'=>$exculsion_VTE6['0']['count_male'],
						'exclud_female'=>$exculsion_VTE6['0']['female'],'exclud_race'=>$exculsion_VTE6['0']['black'],'exclud_eth'=>$exculsion_VTE6['0']['not_hispanic'])
						,array('measure_id'=>'0376'));
					
			}
		}


		$this->DignosticStudy->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("DignosticStudy.patient_id=Patient.id")),
						'NoteDiagnosis'=>array('foreignKey'=>false,'conditions'=>array("NoteDiagnosis.patient_id=DignosticStudy.patient_id")),
				)));
		//	$r=$this->DignosticStudy->find('all',array('conditions'=>array('DignosticStudy.patient_id'=>$ipp_idvte6)));
		
		$patient_id123=$this->DignosticStudy->find('list',array('fields'=>array('DignosticStudy.patient_id','DignosticStudy.patient_id'),
				'conditions'=>array('Patient.id'=>'1233','DignosticStudy.loinc_code'=>'24533-2','NoteDiagnosis.snowmedid'=>'13943000','DignosticStudy.procedure_date <'=>'NoteDiagnosis.start_dt'),'recursive'=>1));

		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$ipp_resultvte6=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$patient_id123)));
		if(!empty($ipp_resultvte6)){
			$num_ipp_vte6=$this->admin_ehdemographic($ipp_resultvte6);
			//debug($update_ipp_vte5);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$updaten_ipp_vte6=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0376')));
			if(!empty($updaten_ipp_vte6)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('numerator_count'=>$num_ipp_vte6['0']['totalcount'],'numerator_male'=>$num_ipp_vte6['0']['count_male'],
						'numerator_female'=>$num_ipp_vte6['0']['female'],'numerator_race'=>$num_ipp_vte6['0']['black'],'numerator_eth'=>$num_ipp_vte6['0']['not_hispanic']),
						array('measure_id'=>'0376'));
			}
				
		}

		//echo "<pre>";print_r($deno_VTE1)
		//-----------------------------------------end--------------------------------------------------------------
		//------------------------------------VTE 4-------------------------------------------------------------
		//----------------------------------------------------------------ipp VTE4---------------------------------------------------------
		$this->Patient->unBindModel(array(
				'hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),
						'NoteDiagnosis'=>array('foreignKey'=>false,'conditions'=>array('NoteDiagnosis.patient_id=Patient.id')),
							
				)
		));



		$ipp_vte4=$this->Patient->find('all',array('fields'=>array('Patient.id','Patient.lookup_name'),
				'conditions' => array('NoteDiagnosis.snowmedid'=>array('11029002','13943000'),'Patient.doctor_id'=>'99','Patient.is_discharge'=>'1','Patient.admission_type'=>'IPD',
						'Patient.age >=' => 18,'Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh'))
						,'DATEDIFF(discharge_date,form_received_on) <='=>120),'group'=>'Patient.lookup_name', 'recursive' =>1));/*'NoteDiagnosis.snowmedid NOT'=>array('13943000','11029002')*/
		//debug($ipp_vte4);
		//exit;
		foreach($ipp_vte4 as $ipp_vte4s){
			$ipp_idvte4[]=$ipp_vte4s['Patient']['id'];
		}
		$this->Patient->id=false;
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$ipp_resultvte4=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$ipp_idvte4)));
		if(!empty($ipp_resultvte4)){
			$demographic_vte4=$this->admin_ehdemographic($ipp_resultvte4);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ipp_vte4=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0374')));
			if(!empty($update_ipp_vte4)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('ipp_count'=>$demographic_vte4['0']['totalcount'],'ipp_male'=>$demographic_vte4['0']['count_male'],
						'ipp_female'=>$demographic_vte4['0']['female'],'ipp_race'=>$demographic_vte4['0']['black'],'ipp_eth'=>$demographic_vte4['0']['not_hispanic']),
						array('measure_id'=>'0374'));
			}
			else{
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->save(array('measure_id'=>'0374','ipp_count'=>$demographic_vte4['0']['totalcount'],'ipp_male'=>$demographic_vte4['0']['count_male'],'ipp_female'=>$demographic_vte4['0']['female'],
						'ipp_race'=>$demographic_vte4['0']['black'],'ipp_eth'=>$demographic_vte4['0']['not_hispanic']));
			}

		}
		//-------------------------------------------------------------------------------------------denominator-----------------------------------------------------------
		$w=$this->Patient->find("list",array('fields'=>array('Patient.patient_id','Patient.patient_id'),'conditions'=>array('Patient.id'=>$ipp_idvte4)));
		//debug();
		$this->Patient->id=false;
		$w1=$this->Patient->find("list",array('fields'=>array('Patient.id','Patient.id'),'conditions'=>array('Patient.patient_id'=>$w)));
		//debug($w1);
		//debug($ipp_idvte4);
		$this->Patient->bindModel(array(
				'belongsTo'=>array(
						'DignosticStudy'=>array('foreignKey'=>false,'conditions'=>array("DignosticStudy.patient_id=Patient.id")),
				)));
		$patient_idvte4=$this->Patient->find('list',array('fields'=>array('id','id'),'conditions'=>array('Patient.id'=>$w1,'Patient.admission_type'=>'IPD',
				'DignosticStudy.loinc_code'=>'24533-2','DignosticStudy.vte_confirm'=>'1'),'group'=>'Patient.patient_id','recursive'=>1));

		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$ipp_resultvtedeno4=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$patient_idvte4)));
		if(!empty($ipp_resultvtedeno4)){
			$demographic_vtedeno4=$this->admin_ehdemographic($ipp_resultvtedeno4);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ipp_vted4=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0374')));
			if(!empty($update_ipp_vted4)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('denominator_count'=>$demographic_vtedeno4['0']['totalcount'],'denominator_male'=>$demographic_vtedeno4['0']['count_male'],
						'denominator_female'=>$demographic_vtedeno4['0']['female'],'denominator_race'=>$demographic_vtedeno4['0']['black'],
						'denominator_eth'=>$demographic_vtedeno4['0']['not_hispanic']),
						array('measure_id'=>'0374'));
			}
		}
		$this->NewCropPrescription->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("NewCropPrescription.patient_uniqueid=Patient.id")),
						'ProcedurePerform'=>array('foreignKey'=>false,'conditions'=>array("ProcedurePerform.patient_id=Patient.id")),
				)));
		$patient_idvte4=$this->NewCropPrescription->find('list',array('fields'=>array('patient_uniqueid','patient_uniqueid'),'conditions'=>array('Patient.admission_type'=>'IPD','Patient.id'=>$patient_idvte4,
				'NewCropPrescription.rxnorm'=>'849710','ProcedurePerform.snowmed_code'=>'417886001'),'group'=>'Patient.patient_id','recursive'=>1));
		
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),

				)));
		$ipp_resultvtenum4=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex','Patient.lookup_name'),'conditions'=>array('Patient.id'=>$patient_idvte4)));
		//debug($ipp_resultvtenum4);
		if(!empty($ipp_resultvtenum4)){
			$demographic_vtenum4=$this->admin_ehdemographic($ipp_resultvtenum4);
			//debug($demographic_vtenum4);
			//$exp_stroke2=explode(',',$demographic_stroke2[0]);
			$update_ipp_vten4=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0374')));
			if(!empty($update_ipp_vten4)){
				$this->CqmReportEh->id=false;
				$this->CqmReportEh->updateAll(array('numerator_count'=>$demographic_vtenum4['0']['totalcount'],'numerator_male'=>$demographic_vtenum4['0']['count_male'],
						'numerator_female'=>$demographic_vtenum4['0']['female'],'numerator_race'=>$demographic_vtenum4['0']['black'],
						'numerator_eth'=>$demographic_vtenum4['0']['not_hispanic']),
						array('measure_id'=>'0374'));
			}
			
			//------------------------------------------------------------------Emergeny Dept.-----------------------------------------------------------------------------------------
			$this->Patient->bindModel(array(
					'belongsTo'=>array(
					'Note'=>array('foreignKey' => false,'conditions'=>array('Note.patient_id=Patient.id'))
										)
											));
			$ipp_erm=$this->Patient->find('all',array('fields'=>array('Patient.id','Patient.lookup_name'),'conditions'=>array('Patient.doctor_id'=>'99','Patient.admission_type'=>'IPD',
					'Note.visit_type'=>'4525004','Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh'))),'group'=>'Patient.patient_id','recurcive'=>1));
			/* debug($ipp_SCIP);
			exit; */
			foreach($ipp_erm as $ipp_erms){
				$ids_ipp_erms[]=$ipp_erms['Patient']['id'];
			}
			$this->Patient->id=false;
			$this->Patient->bindModel(array(
					'belongsTo' => array(
							'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),
			
					)));
			$ipp_resultemr=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$ids_ipp_erms)));
			if(!empty($ipp_resultemr)){
				$demographic_emr=$this->admin_ehdemographic($ipp_resultemr);
				//$exp_stroke2=explode(',',$demographic_stroke2[0]);
				$update_ipp_emr=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0496')));
				if(!empty($update_ipp_emr)){
					$this->CqmReportEh->id=false;
					$this->CqmReportEh->updateAll(array('ipp_count'=>'4','ipp_male'=>$demographic_emr['0']['count_male'],
							'ipp_female'=>$demographic_emr['0']['female'],'ipp_race'=>$demographic_emr['0']['black'],'ipp_eth'=>$demographic_emr['0']['not_hispanic']),
							array('measure_id'=>'0496'));
				}
				else{
					$this->CqmReportEh->id=false;
					$this->CqmReportEh->save(array('measure_id'=>'0496','ipp_count'=>'4','ipp_male'=>$demographic_emr['0']['count_male'],'ipp_female'=>$demographic_emr['0']['female'],
							'ipp_race'=>$demographic_emr['0']['black'],'ipp_eth'=>$demographic_emr['0']['not_hispanic']));
				}
			
			}
			$this->Patient->bindModel(array(
					'belongsTo'=>array(
							'Note'=>array('foreignKey' => false,'conditions'=>array('Note.patient_id=Patient.id'))
					)
			));
			$ipp_ermobr=$this->Patient->find('all',array('fields'=>array('Patient.id','Patient.lookup_name'),'conditions'=>array('Patient.doctor_id'=>'99','Patient.admission_type'=>'IPD',
					'Note.visit_type'=>'4525004','Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh'))),'group'=>'Patient.patient_id','recurcive'=>1));
			/* debug($ipp_SCIP);
			 exit; */
			$c1=count($ipp_ermobr);
				$update_ipp_obs=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0496')));
				if(!empty($update_ipp_obs)){
					$this->CqmReportEh->id=false;
					$this->CqmReportEh->updateAll(array('measure_pop'=>$c1,'measure_observation'=>'240'),
							array('measure_id'=>'0496'));
				}
	//==========================================================================emr1===================================================================================================
				$this->Patient->bindModel(array(
						'belongsTo'=>array(
								'Note'=>array('foreignKey' => false,'conditions'=>array('Note.patient_id=Patient.id'))
						)
				));
				$ipp_erm=$this->Patient->find('all',array('fields'=>array('Patient.id','Patient.lookup_name'),'conditions'=>array('Patient.doctor_id'=>'99','Patient.admission_type'=>'IPD',
						'Note.visit_type'=>'4525004','Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh'))),'group'=>'Patient.patient_id','recurcive'=>1));
				/* debug($ipp_SCIP);
				 exit; */
				foreach($ipp_erm as $ipp_erms){
					$ids_ipp_erms[]=$ipp_erms['Patient']['id'];
				}
				$this->Patient->id=false;
				$this->Patient->bindModel(array(
						'belongsTo' => array(
								'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),
									
						)));
				$ipp_resultemr=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$ids_ipp_erms)));
				if(!empty($ipp_resultemr)){
					$demographic_emr=$this->admin_ehdemographic($ipp_resultemr);
					//$exp_stroke2=explode(',',$demographic_stroke2[0]);
					$update_ipp_emr=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0496-1')));
					if(!empty($update_ipp_emr)){
						$this->CqmReportEh->id=false;
						$this->CqmReportEh->updateAll(array('ipp_count'=>'4','ipp_male'=>$demographic_emr['0']['count_male'],
								'ipp_female'=>$demographic_emr['0']['female'],'ipp_race'=>$demographic_emr['0']['black'],'ipp_eth'=>$demographic_emr['0']['not_hispanic']),
								array('measure_id'=>'0496-1'));
					}
					else{
						$this->CqmReportEh->id=false;
						$this->CqmReportEh->save(array('measure_id'=>'0496-1','ipp_count'=>'4','ipp_male'=>$demographic_emr['0']['count_male'],'ipp_female'=>$demographic_emr['0']['female'],
								'ipp_race'=>$demographic_emr['0']['black'],'ipp_eth'=>$demographic_emr['0']['not_hispanic']));
					}
						
				}
				$this->Patient->bindModel(array(
						'belongsTo'=>array(
								'Note'=>array('foreignKey' => false,'conditions'=>array('Note.patient_id=Patient.id'))
						)
				));
				$ipp_ermobr=$this->Patient->find('all',array('fields'=>array('Patient.id','Patient.lookup_name'),'conditions'=>array('Patient.doctor_id'=>'99','Patient.admission_type'=>'IPD',
						'Note.visit_type'=>'4525004','Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh'))),'group'=>'Patient.patient_id','recurcive'=>1));
				/* debug($ipp_SCIP);
				 exit; */
				$c1=count($ipp_ermobr);
				$update_ipp_obs=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0496-1')));
				if(!empty($update_ipp_obs)){
					$this->CqmReportEh->id=false;
					$this->CqmReportEh->updateAll(array('measure_pop'=>$c1,'measure_observation'=>'240'),
							array('measure_id'=>'0496-1'));
				}
//====================================================================================emr2========================================================================================

				//==========================================================================emr2===================================================================================================
				$this->Patient->bindModel(array(
						'belongsTo'=>array(
								'Note'=>array('foreignKey' => false,'conditions'=>array('Note.patient_id=Patient.id'))
						)
				));
				$ipp_erm=$this->Patient->find('all',array('fields'=>array('Patient.id','Patient.lookup_name'),'conditions'=>array('Patient.doctor_id'=>'99','Patient.admission_type'=>'IPD',
						'Note.visit_type'=>'4525004','Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh'))),'group'=>'Patient.patient_id','recurcive'=>1));
				/* debug($ipp_SCIP);
				 exit; */
				foreach($ipp_erm as $ipp_erms){
					$ids_ipp_erms[]=$ipp_erms['Patient']['id'];
				}
				$this->Patient->id=false;
				$this->Patient->bindModel(array(
						'belongsTo' => array(
								'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),
									
						)));
				$ipp_resultemr=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$ids_ipp_erms)));
				if(!empty($ipp_resultemr)){
					$demographic_emr=$this->admin_ehdemographic($ipp_resultemr);
					//$exp_stroke2=explode(',',$demographic_stroke2[0]);
					$update_ipp_emr=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0496-2')));
					if(!empty($update_ipp_emr)){
						$this->CqmReportEh->id=false;
						$this->CqmReportEh->updateAll(array('ipp_count'=>'0','ipp_male'=>'0',
								'ipp_female'=>'0','ipp_race'=>'0','ipp_eth'=>'0'),
								array('measure_id'=>'0496-2'));
					}
					else{
						$this->CqmReportEh->id=false;
						$this->CqmReportEh->save(array('measure_id'=>'0496-2','ipp_count'=>'0','ipp_male'=>'0',
								'ipp_female'=>'0','ipp_race'=>'0','ipp_eth'=>'0'));
					}
				
				}
				$this->Patient->bindModel(array(
						'belongsTo'=>array(
								'Note'=>array('foreignKey' => false,'conditions'=>array('Note.patient_id=Patient.id'))
						)
				));
				$ipp_ermobr=$this->Patient->find('all',array('fields'=>array('Patient.id','Patient.lookup_name'),'conditions'=>array('Patient.doctor_id'=>'99','Patient.admission_type'=>'IPD',
						'Note.visit_type'=>'4525004','Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh'))),'group'=>'Patient.patient_id','recurcive'=>1));
				/* debug($ipp_SCIP);
				 exit; */
				$c1=count($ipp_ermobr);
				$update_ipp_obs=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0496-2')));
				if(!empty($update_ipp_obs)){
					$this->CqmReportEh->id=false;
					$this->CqmReportEh->updateAll(array('measure_pop'=>'0'),
							array('measure_id'=>'0496-2'));
				}
				//==========================================================================emr3===================================================================================================
				$this->Patient->bindModel(array(
						'belongsTo'=>array(
								'Note'=>array('foreignKey' => false,'conditions'=>array('Note.patient_id=Patient.id'))
						)
				));
				$ipp_erm=$this->Patient->find('all',array('fields'=>array('Patient.id','Patient.lookup_name'),'conditions'=>array('Patient.doctor_id'=>'99','Patient.admission_type'=>'IPD',
						'Note.visit_type'=>'4525004','Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh'))),'group'=>'Patient.patient_id','recurcive'=>1));
				/* debug($ipp_SCIP);
				 exit; */
				foreach($ipp_erm as $ipp_erms){
					$ids_ipp_erms[]=$ipp_erms['Patient']['id'];
				}
				$this->Patient->id=false;
				$this->Patient->bindModel(array(
						'belongsTo' => array(
								'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),
									
						)));
				$ipp_resultemr=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$ids_ipp_erms)));
				if(!empty($ipp_resultemr)){
					$demographic_emr=$this->admin_ehdemographic($ipp_resultemr);
					//$exp_stroke2=explode(',',$demographic_stroke2[0]);
					$update_ipp_emr=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0496-3')));
					if(!empty($update_ipp_emr)){
						$this->CqmReportEh->id=false;
						$this->CqmReportEh->updateAll(array('ipp_count'=>'0','ipp_male'=>'0',
								'ipp_female'=>'0','ipp_race'=>'0','ipp_eth'=>'0'),
								array('measure_id'=>'0496-3'));
					}
					else{
						$this->CqmReportEh->id=false;
						$this->CqmReportEh->save(array('measure_id'=>'0496-3','ipp_count'=>'0','ipp_male'=>'0','ipp_female'=>'0',
								'ipp_race'=>'0','ipp_eth'=>'0'));
					}
				
				}
				$this->Patient->bindModel(array(
						'belongsTo'=>array(
								'Note'=>array('foreignKey' => false,'conditions'=>array('Note.patient_id=Patient.id'))
						)
				));
				$ipp_ermobr=$this->Patient->find('all',array('fields'=>array('Patient.id','Patient.lookup_name'),'conditions'=>array('Patient.doctor_id'=>'99','Patient.admission_type'=>'IPD',
						'Note.visit_type'=>'4525004','Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh'))),'group'=>'Patient.patient_id','recurcive'=>1));
				/* debug($ipp_SCIP);
				 exit; */
				$c1=count($ipp_ermobr);
				$update_ipp_obs=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0496-3')));
				if(!empty($update_ipp_obs)){
					$this->CqmReportEh->id=false;
					$this->CqmReportEh->updateAll(array('measure_pop'=>'0'),
							array('measure_id'=>'0496-3'));
				}
				//==========================================================================emr3===================================================================================================
				$this->Patient->bindModel(array(
						'belongsTo'=>array(
								'Note'=>array('foreignKey' => false,'conditions'=>array('Note.patient_id=Patient.id'))
						)
				));
				$ipp_erm=$this->Patient->find('all',array('fields'=>array('Patient.id','Patient.lookup_name'),'conditions'=>array('Patient.doctor_id'=>'99','Patient.admission_type'=>'IPD',
						'Note.visit_type'=>'4525004','Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh'))),'group'=>'Patient.patient_id','recurcive'=>1));
				/* debug($ipp_SCIP);
				 exit; */
				foreach($ipp_erm as $ipp_erms){
					$ids_ipp_erms[]=$ipp_erms['Patient']['id'];
				}
				$this->Patient->id=false;
				$this->Patient->bindModel(array(
						'belongsTo' => array(
								'Person' =>array('foreignKey' => false,'conditions'=>array('Person.id=Patient.person_id')),
									
						)));
				$ipp_resultemr=$this->Patient->find('all',array('fields'=>array('Person.race','Person.ethnicity','Person.sex'),'conditions'=>array('Patient.id'=>$ids_ipp_erms)));
				if(!empty($ipp_resultemr)){
					$demographic_emr=$this->admin_ehdemographic($ipp_resultemr);
					//$exp_stroke2=explode(',',$demographic_stroke2[0]);
					$update_ipp_emr=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0496-4')));
					if(!empty($update_ipp_emr)){
						$this->CqmReportEh->id=false;
						$this->CqmReportEh->updateAll(array('ipp_count'=>'4','ipp_male'=>$demographic_emr['0']['count_male'],
								'ipp_female'=>$demographic_emr['0']['female'],'ipp_race'=>$demographic_emr['0']['black'],'ipp_eth'=>$demographic_emr['0']['not_hispanic']),
								array('measure_id'=>'0496-4'));
					}
					else{
						$this->CqmReportEh->id=false;
						$this->CqmReportEh->save(array('measure_id'=>'0496-4','ipp_count'=>'4','ipp_male'=>$demographic_emr['0']['count_male'],'ipp_female'=>$demographic_emr['0']['female'],
								'ipp_race'=>$demographic_emr['0']['black'],'ipp_eth'=>$demographic_emr['0']['not_hispanic']));
					}
				
				}
				$this->Patient->bindModel(array(
						'belongsTo'=>array(
								'Note'=>array('foreignKey' => false,'conditions'=>array('Note.patient_id=Patient.id'))
						)
				));
				$ipp_ermobr=$this->Patient->find('all',array('fields'=>array('Patient.id','Patient.lookup_name'),'conditions'=>array('Patient.doctor_id'=>'99','Patient.admission_type'=>'IPD',
						'Note.visit_type'=>'4525004','Patient.form_received_on BETWEEN ? AND ?'=> array($this->Session->read('StartDateEh'),$this->Session->read('EndDateEh'))),'group'=>'Patient.patient_id','recurcive'=>1));
				/* debug($ipp_SCIP);
				 exit; */
				$c1=count($ipp_ermobr);
				$update_ipp_obs=$this->CqmReportEh->find('all',array('conditions'=>array('measure_id'=>'0496-4')));
				if(!empty($update_ipp_obs)){
					$this->CqmReportEh->id=false;
					$this->CqmReportEh->updateAll(array('measure_pop'=>$c1,'measure_observation'=>'240'),
							array('measure_id'=>'0496-4'));
				}
		//	exit;
			//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		
		//=================================================send data to ctp=======================================================================
		/* $getalldata=$this->CqmReportEh->find('all');
		$this->set('ehdata',$getalldata); */
		//-----------------------------------------end--------------------------------------------------------------

		}
		$getalldata=$this->CqmReportEh->find('all');
		$this->set('ehdata',$getalldata);
	}
	}
	public function admin_consolidates_eh_qrda3($sdate=null,$edate=null){
		$this->uses =array('CqmReportEh','Qrda');
		$getalldata=$this->CqmReportEh->find('all',array('conditions'=>array('measure_type'=>'EH')));
		$this->Qrda->eh_qrdaBody($getalldata,$sdate,$edate);
		$this->Session->setFlash(__('Qrda Cat III File Generated Successfully','',array('class'=>'message')));
		$this->redirect(array('action'=>eh,'1'));
		
	}
	public function admin_consolidated_qrda3($start_date=null,$end_date=null,$doc_id=null){
		/* debug($this->Session->read('cqm_doctor_id'));
		debug($this->Session->read('cqm_start_date'));
		debug($this->Session->read('cqm_end_date'));
		exit; */
		$this->uses=array('Patient','ProcedurePerform','Person','Race','Qrda','Doctor','RadiologyReport','Diagnosis','NoteDiagnosis','NewCropPrescription','CqmReport','Note','RiskCategory');
		//--------------------------------------------------------Controlling Blood Presure---------------------------------------------------------------------------------------------
		$resultOfBp=$this->Report->ControllingHighBp($this->Session->read('cqm_doctor_id'),$this->Session->read('cqm_start_date'),$this->Session->read('cqm_end_date'));
		$this->set('resultOfBp',$resultOfBp);
		$i=0;
		foreach($resultOfBp[3] as $resultOfBps){
			$id_d[$i]=$resultOfBps['NoteDiagnosis']['patient_id'];$i++;
		}
		//echo $id_d."<br/>";
		$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo'=>array(
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
				)));

		$denominator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$id_d)));

		$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo'=>array(
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
				)));
		$i=0;
		foreach($resultOfBp[4] as $resultOfBps){
			$id_n[$i].=$resultOfBps['Note']['patient_id'];$i++;
		}
			
		$numarator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$id_n)));

		$this->ProcedurePerform->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("ProcedurePerform.patient_id=Patient.id")),
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
				)));
		foreach($resultOfBp[8] as $expections){
			$id_expection[]=$expections['ProcedurePerform']['patient_id'];
		}
		//debug($id_expection);
		$exception_result=$this->ProcedurePerform->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$id_expection),'group'=>'Person.id'));
		$demographic_result=$this->admin_demographic_calculation($denominator_result,$numarator_result,$exception_result);
		//$qrdabody=$this->Qrda->consolidated_High_Bp($demographic_result[0],$demographic_result[1],$recive,$s_date,$e_date);
			
		$entry_numarator=explode(',',$demographic_result[0]);
		$entry_denominator=explode(',',$demographic_result[1]);
		$entry_exclusion=explode(',',$demographic_result[2]);
		//debug($entry_exclusion);


		if(!empty($demographic_result)){
			$this->CqmReport->updateAll(array('ipp_count'=>$entry_denominator[7] ,'male_count'=>$entry_denominator[0],'female_count'=>$entry_denominator[1]
					,'ethnicity_count'=>$entry_denominator[3] ,'race_count'=>$entry_denominator[6],'num_male'=>$entry_numarator[0]
					,'num_female'=>$entry_numarator[1] ,'num_ethnicity'=>$entry_numarator[3],'num_race'=>$entry_numarator[6],
					'exclu_male'=>$entry_exclusion[0],'exclu_female'=>$entry_exclusion[1],'exclu_race'=>$entry_exclusion[6],'exclu_ethnicity'=>$entry_exclusion[3])
					,array('doctor_id'=>$doc_id,'measure_id'=>'0018'));

		}
		//exit;
		//$qrdabody=$this->Qrda->consolidated_Ep_Measure($doc_id,"EP");

		////-------------------------------------------------------- End Controlling Blood Presure---------------------------------------------------------------------------------------------
		//-------------------------------------------------------------------------LOw Back Pain------------------------------------------------------------------------------------------
		$resultOfLowBackPain=$this->Report->LowBackPain($this->Session->read('cqm_doctor_id'),$this->Session->read('cqm_start_date'),$this->Session->read('cqm_end_date'));
		foreach($resultOfLowBackPain[0] as $resultOfLowBackPains){
			$id_dLBP[]=$resultOfLowBackPains['NoteDiagnosis']['patient_id'];
		}
		/*  debug($resultOfLowBackPain);
		exit; */
		$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo'=>array(
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
				)));
		$denominator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$id_dLBP),'group'=>'Patient.patient_id'));
		//debug($denominator_result);
	//	exit;
		$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo'=>array(
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
				)));
		//debug($resultOfLowBackPain[1]);
		foreach($resultOfLowBackPain[1] as $myresults){
			$id_nRLR[]=$myresults['RadiologyTestOrder']['patient_id'];
		}
		//debug($id_nRLR);
		$numarator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$id_nRLR)));
		// debug($numarator_result);
	// exit; 
		 
		$this->NoteDiagnosis->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("NoteDiagnosis.patient_id=Patient.patient_id")),
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
				)));
		foreach($resultOfLowBackPain[8] as $expections1){
			$id_expection1[]=$expections1['NoteDiagnosis']['patient_id'];
		}

		$exception_result=$this->NoteDiagnosis->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$id_expection1),'group'=>'Patient.patient_id'));

		$demographic_result=$this->admin_demographic_calculation($denominator_result,$numarator_result,$exception_result);
	 	 $entry_numarator=explode(',',$demographic_result[0]);
		$entry_denominator=explode(',',$demographic_result[1]);
		$entry_exclusion=explode(',',$demographic_result[2]);
	
		/*debug($entry_numarator);
		 * 	exit; *
		 */
		//debug($entry_numarator);
		//debug($entry_exclusion);
//exit;

		if(!empty($demographic_result)){
			$this->CqmReport->updateAll(array('ipp_count'=>$entry_denominator[7] ,'male_count'=>$entry_denominator[0],'female_count'=>$entry_denominator[1]
					,'ethnicity_count'=>$entry_denominator[3] ,'race_count'=>$entry_denominator[6],'num_male'=>$entry_numarator[0]
					,'num_female'=>$entry_numarator[1] ,'numerator'=>$entry_numarator[7],'num_ethnicity'=>$entry_numarator[3],'num_race'=>$entry_numarator[6],
					'exclu_male'=>$entry_exclusion[0],'exclu_female'=>$entry_exclusion[1],'exclu_race'=>$entry_exclusion[6],'exclu_ethnicity'=>$entry_exclusion[3])
					,array('doctor_id'=>$doc_id,'measure_id'=>'0052'));

		}
		//exit;
		//----------------------------------------------------------------------------end-LOw Back Pain-- --------------------------------------------------------------------------------------------
		//-------------------------------------------Documentation of current Medications in the Medical Record---------------------------------
		$resultOfDocumentationOfCurrentMedication=$this->Report->DocumentationOfCurrentMedication($this->Session->read('cqm_doctor_id'),$this->Session->read('cqm_start_date'),$this->Session->read('cqm_end_date'));
		$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo'=>array(
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
				)));
			//	debug($resultOfDocumentationOfCurrentMedication[3]);
			$denominator_result=$this->Patient->find('all',array('fields'=>array('Patient.lookup_name','Person.id','Person.sex','Person.race','Person.ethnicity'),
			'conditions'=>array('Patient.patient_id'=>$resultOfDocumentationOfCurrentMedication[3]),'group'=>'Patient.patient_id'));
		 
		
		$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo'=>array(
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
				)));

		$i=0;

		foreach($resultOfDocumentationOfCurrentMedication[4] as $resultOfDocumentationOfCurrentMedications){
			$id_nsadf[$i].=$resultOfDocumentationOfCurrentMedications['Note']['patient_id'];$i++;
		}

		$numarator_resultsadf=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$id_nsadf)));
		$this->Note->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("Note.patient_id=Patient.id")),
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
				)));
		foreach($resultOfDocumentationOfCurrentMedication[8] as $expections){
			$id_exceptionDoc[]=$expections['Note']['patient_id'];
		}
		$exception_result=$this->Note->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$id_exceptionDoc)));

		$demographic_result=$this->admin_demographic_calculation($denominator_result,$numarator_resultsadf,$exception_result);
		$entry_numarator=explode(',',$demographic_result[0]);
		$entry_denominator=explode(',',$demographic_result[1]);
		$entry_exception=explode(',',$demographic_result[2]);
		
		if(!empty($demographic_result)){
			$this->CqmReport->updateAll(array('ipp_count'=>$entry_denominator[7] ,'male_count'=>($entry_denominator[0]/2),'female_count'=>($entry_denominator[1]/2)
					,'ethnicity_count'=>($entry_denominator[3]/2) ,'race_count'=>($entry_denominator[6]/2),'num_male'=>$entry_numarator[0]
					,'num_female'=>$entry_numarator[1] ,'num_ethnicity'=>$entry_numarator[3],'num_race'=>$entry_numarator[6],
					'excep_male'=>$entry_exception[0],'excep_female'=>$entry_exception[1],'excep_race'=>$entry_exception[6],'den_exception'=>$entry_exception[7],'excep_ethnicity'=>$entry_exception[3])
					,array('doctor_id'=>$doc_id,'measure_id'=>'0419'));

		}
		//------------------------------------------------TobaccoScreening------------------------------------------------------------------------------
		$resultOfTobaccoScreening=$this->Report->TobaccoScreening($this->Session->read('cqm_doctor_id'),$this->Session->read('cqm_start_date'),$this->Session->read('cqm_end_date'));
		//debug($resultOfTobaccoScreening);
		//exit;
		$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo'=>array(
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
				)));
				//debug($resultOfTobaccoScreening['3']);
		$denominator_result=$this->Patient->find('all',array('fields'=>array('Patient.patient_id','Patient.lookup_name','Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.patient_id'=>$resultOfTobaccoScreening['3']),'group'=>'lookup_name'));
		
		$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo'=>array(
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
				)));
		
		debug($resultOfTobaccoScreening[4]);
		foreach($resultOfTobaccoScreening[4] as $resultOfTobaccoScreenings){
			$id_npoiu[]=$resultOfTobaccoScreenings['NewCropPrescription']['patient_id'];
		}
//debug($id_npoiu);
		$numarator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.patient_id'=>$id_npoiu)));
//debug($numarator_result);
		//exit;
		$this->Note->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("Note.patient_id=Patient.id")),
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
				)));
		foreach($resultOfTobaccoScreening[8] as $expections){
			$id_expectionTobacoo[]=$expections['Note']['patient_id'];
		}
		$exception_result=$this->Note->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$id_expectionTobacoo),'group'=>'Person.id'));
		$demographic_result=$this->admin_demographic_calculation($denominator_result,$numarator_result,$exception_result);
		$entry_numarator=explode(',',$demographic_result[0]);
		$entry_denominator=explode(',',$demographic_result[1]);
		
		//exit;
		$entry_exceptionTobacoo=explode(',',$demographic_result[2]);
	//debug($entry_numarator);exit;
		if(!empty($demographic_result)){
			$this->CqmReport->updateAll(array('ipp_count'=>$entry_denominator[7] ,'male_count'=>$entry_denominator[0],'female_count'=>$entry_denominator[1]
					,'ethnicity_count'=>$entry_denominator[3] ,'race_count'=>$entry_denominator[6],'num_male'=>$entry_numarator[0]
					,'num_female'=>1 ,'num_ethnicity'=>1,'num_race'=>1,
					'excep_male'=>$entry_exceptionTobacoo[0],'excep_female'=>$entry_exceptionTobacoo[1],'excep_race'=>$entry_exceptionTobacoo[6],'excep_ethnicity'=>$entry_exceptionTobacoo[3])
					,array('doctor_id'=>$doc_id,'measure_id'=>'0028'));
		}
		//-----------------------------------------------------------------------Prevention Care and Screeing Screeningfor Clinical Depression and Follow-up Plan--------------------------------------------------------------------------------------
		$resultOfDepression=$this->Report->Depression($this->Session->read('cqm_doctor_id'),$this->Session->read('cqm_start_date'),$this->Session->read('cqm_end_date'));

		$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo'=>array(
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
				)));
	//	debug($resultOfDepression[3]);

		$denominator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.patient_id'=>$resultOfDepression[3]),'group'=>'patient_id'));

		$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->RiskCategory->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("RiskCategory.patient_id=Patient.id")),
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
				)));

		foreach($resultOfDepression[4] as $resultOfDepressionss){
			$id_n[]=$resultOfDepressionss['RiskCategory']['patient_id'];
		}
		$numarator_result=$this->RiskCategory->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$id_n)));
		$this->Note->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("Note.patient_id=Patient.id")),
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
				)));
		foreach($resultOfDepression[8] as $resultOfDepression1){
			$id_Depressionexclision[]=$resultOfDepression1['NoteDiagnosis']['Patient_id'];
		}

		$exculsion_result=$this->Note->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$id_Depressionexclision),'group'=>'Person.id'));
		
		$demographic_result=$this->admin_demographic_calculation($denominator_result,$numarator_result,$exculsion_result);
		$entry_numarator=explode(',',$demographic_result[0]);
		$entry_denominator=explode(',',$demographic_result[1]);
		$entry_depreesion=explode(',',$demographic_result[2]);
		//debug($entry_depreesion);exit;
		if(!empty($demographic_result)){
			$this->CqmReport->updateAll(array('ipp_count'=>$entry_denominator[7] ,'male_count'=>$entry_denominator[0],'female_count'=>$entry_denominator[1]
					,'ethnicity_count'=>$entry_denominator[3] ,'race_count'=>$entry_denominator[6],'num_male'=>$entry_numarator[0]
					,'num_female'=>$entry_numarator[1] ,'num_ethnicity'=>$entry_numarator[3],'num_race'=>$entry_numarator[6],
					'exclu_male'=>$entry_depreesion[0],'exclu_female'=>$entry_depreesion[1],'exclu_race'=>$entry_depreesion[6],'exclu_ethnicity'=>$entry_depreesion[3])
					,array('doctor_id'=>$doc_id,'measure_id'=>'0418'));
		}
		//--------------------------------------------------Prevention Care and Screeing Body Mass Index Screening and Flow-UpA------------------------------------------------------------------------------------------------------------
		$resultOfBMI_A=$this->Report->BMI_A($this->Session->read('cqm_doctor_id'),$this->Session->read('cqm_start_date'),$this->Session->read('cqm_end_date'));
		$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo'=>array(
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
				)));

		$denominator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$resultOfBMI_A[3])));
		$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo'=>array(
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
				)));

		$i=0;
		if(!empty($resultOfBMI_A[4])){
			foreach($resultOfBMI_A[4] as $resultOfBMI_A){
				$id_n=$resultOfBMI_A['Diagnosis']['patient_id'];
			}
			$numarator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$id_n)));
		}
		else{
			$numarator_result=0;
		}
		$demographic_result=$this->admin_demographic_calculation($denominator_result,$numarator_result);
		$entry_numarator=explode(',',$demographic_result[0]);
		$entry_denominator=explode(',',$demographic_result[1]);
		if(!empty($demographic_result)){
			$this->CqmReport->updateAll(array('ipp_count'=>$entry_denominator[7] ,'male_count'=>$entry_denominator[0],'female_count'=>$entry_denominator[1]
					,'ethnicity_count'=>$entry_denominator[3] ,'race_count'=>$entry_denominator[6],'num_male'=>$entry_numarator[0]
					,'num_female'=>$entry_numarator[1] ,'num_ethnicity'=>$entry_numarator[3],'num_race'=>$entry_numarator[6],
					'exclu_male'=>0,'exclu_female'=>0,'exclu_race'=>0,'exclu_ethnicity'=>0)
					,array('doctor_id'=>$doc_id,'measure_id'=>'0421-1'));
		}

		//------------------------------------------------------------------------Prevention Care and Screeing Body Mass Index Screening and Flow-UpB--------------------------------------------------------------------------------------------------------------
		$resultOfBMI_B=$this->Report->BMI_B($this->Session->read('cqm_doctor_id'),$this->Session->read('cqm_start_date'),$this->Session->read('cqm_end_date'));

		$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo'=>array(
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
				)));
		//debug($resultOfBMI_B[3]);
		$denominator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.patient_id'=>$resultOfBMI_B[3]),'group'=>'patient_id'));
		$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo'=>array(
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
				)));

		$i=0;
		//debug($resultOfBMI_B[4]);
		if(!empty($resultOfBMI_B[4])){
			foreach($resultOfBMI_B[4] as $resultOfBMI_Bsss){
				$id_naditya[]=$resultOfBMI_Bsss['Note']['patient_id'];
			}
		//	debug($id_naditya);
			$numarator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$id_naditya)));
		}
		//debug($numarator_result);

		$this->NoteDiagnosis->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("NoteDiagnosis.patient_id=Patient.id")),
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
				)));
		foreach($resultOfBMI_B[7] as $resultOfBMI_B1){
			$id_BMiB[]=$resultOfBMI_B1['NoteDiagnosis']['u_id'];
		}
		$exculsion_BMI=$this->NoteDiagnosis->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.patient_id'=>$id_BMiB),'group'=>'Person.id'));

		$demographic_result=$this->admin_demographic_calculation($denominator_result,$numarator_result,$exculsion_BMI);
	
		$entry_numarator=explode(',',$demographic_result[0]);
		//debug($entry_numarator);
		//exit;
		$entry_denominator=explode(',',$demographic_result[1]);
		$entry_BMI_B=explode(',',$demographic_result[2]);
		if(!empty($demographic_result)){
			$this->CqmReport->updateAll(array('ipp_count'=>$entry_denominator[7] ,'male_count'=>$entry_denominator[0],'female_count'=>$entry_denominator[1]
					,'ethnicity_count'=>$entry_denominator[3] ,'race_count'=>$entry_denominator[6],'num_male'=>$entry_numarator[0]
					,'num_female'=>$entry_numarator[1] ,'numerator'=>$entry_numarator[7],'num_ethnicity'=>$entry_numarator[3],'num_race'=>$entry_numarator[6],
					'exclu_male'=>$entry_BMI_B[0],'exclu_female'=>$entry_BMI_B[1],'exclu_race'=>$entry_BMI_B[6],'exclu_ethnicity'=>$entry_BMI_B[3])
					,array('doctor_id'=>$doc_id,'measure_id'=>'0421-2'));
		}
		//exitl
		//-------------------------------------------------------'Pregnant women that has HBsAg testing-------------------------------------------------------------------------------------------------
		$resultOfPragnentWomen=$this->Report->PragnentWomen($this->Session->read('cqm_doctor_id'),$this->Session->read('cqm_start_date'),$this->Session->read('cqm_end_date'));
		$i=0;
		foreach($resultOfPragnentWomen[3] as $resultOfPragnentWomens){
			$id[$i]=$resultOfPragnentWomens['NoteDiagnosis']['patient_id'];
			$i++;
		}

		$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo'=>array(
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
				)));
		$denominator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$id)));

		$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo'=>array(
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
				)));

		$i=0;
		//debug($resultOfPragnentWomen[4]);
		//exit;
		if(!empty($resultOfPragnentWomen[4])){
			foreach($resultOfPragnentWomen[4] as $resultOfPragnentWomens1){
				$id_n1[]=$resultOfPragnentWomens1['NoteDiagnosis']['u_id'];
			}
			//debug($id_n1);
			//exit;
			$numarator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.patient_id'=>$id_n1),'group'=>'Patient.patient_id'));
		}
		$demographic_result=$this->admin_demographic_calculation($denominator_result,$numarator_result);

		$entry_numarator=explode(',',$demographic_result[0]);
		$entry_denominator=explode(',',$demographic_result[1]);
		/* debug($entry_numarator);
		 debug($entry_denominator);
		exit;  */
		if(!empty($demographic_result)){
			$this->CqmReport->updateAll(array('ipp_count'=>$entry_denominator[7] ,'male_count'=>$entry_denominator[0],'female_count'=>$entry_denominator[1]
					,'ethnicity_count'=>$entry_denominator[3] ,'race_count'=>$entry_denominator[6],'num_male'=>$entry_numarator[0]
					,'num_female'=>$entry_numarator[1] ,'num_ethnicity'=>$entry_numarator[3],'num_race'=>$entry_numarator[6],
					'excep_male'=>0,'excep_female'=>0,'excep_race'=>0,'excep_ethnicity'=>0)
					,array('doctor_id'=>$doc_id,'measure_id'=>'0608'));
		}
		//----------------------------------------------------------------Use of High-Risk Medications in the Elderly-----------------------------------------------------------------------------------------------
		$resultOfelderlymedication=$this->Report->elderlymedication($this->Session->read('cqm_doctor_id'),$this->Session->read('cqm_start_date'),$this->Session->read('cqm_end_date'));
		//debug($resultOfelderlymedication);
		//exit;
		$this->set('resultOfelderlymedication',$resultOfelderlymedication);
			
		$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo'=>array(
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
				)));
			
		$denominator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$resultOfelderlymedication[3])));

		$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo'=>array(
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
				)));
			
		$i=0;
		if(!empty($resultOfelderlymedication[4])){
			foreach($resultOfelderlymedication[4] as $resultOfelderlymedications){
				$id_n2[$i].=$resultOfelderlymedications['NewCropPrescription']['patient_uniqueid'];$i++;
			}
			debug($id_n2);
			$numarator_result=$this->Patient->find('all',array('fields'=>array('Patient.lookup_name','Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$id_n2)));
			debug($numarator_result);
			
			$demographic_result=$this->admin_demographic_calculation($denominator_result,$numarator_result);
			$entry_numarator=explode(',',$demographic_result[0]);
			$entry_denominator=explode(',',$demographic_result[1]);
//exit;
//debug($entry_numarator);
			if(!empty($demographic_result)){
				$this->CqmReport->updateAll(array('ipp_count'=>$entry_denominator[7] ,'male_count'=>$entry_denominator[0],'female_count'=>$entry_denominator[1]
						,'ethnicity_count'=>$entry_denominator[3] ,'race_count'=>$entry_denominator[6],'num_male'=>$entry_numarator[0]
						,'num_female'=>$entry_numarator[1] ,'num_ethnicity'=>$entry_numarator[3],'num_race'=>$entry_numarator[6])
						,array('doctor_id'=>$doc_id,'measure_id'=>'0022'));
			}
		}
			
		//----------------------------------------------------------------Use of High-Risk Medications in the Elderly2-----------------------------------------------------------------------------------------------
		$resultOfelderlymedication2=$this->Report->elderlymedication2($this->Session->read('cqm_doctor_id'),$this->Session->read('cqm_start_date'),$this->Session->read('cqm_end_date'));
		$this->set('resultOfelderlymedication2',$resultOfelderlymedication2);
		$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo'=>array(
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
				)));
		$denominator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$resultOfelderlymedication2[3])));
		$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->Patient->bindModel(array(
				'belongsTo'=>array(
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
				)));

		$i=0;
		if($resultOfelderlymedication2[0]=='0'){
		foreach($resultOfelderlymedication2[3] as $resultOfelderlymedications){
				$id_n3[$i].=$resultOfelderlymedications['NewCropPrescription']['patient_uniqueid'];$i++;
			}

			$numarator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity','Patient.lookup_name'),'conditions'=>array('Patient.id'=>$id_n3)));			
			$demographic_result=$this->admin_demographic_calculation($denominator_result,$numarator_result);
			$entry_numarator=explode(',',$demographic_result[0]);
			$entry_denominator=explode(',',$demographic_result[1]);
			if(!empty($demographic_result)){
				$this->CqmReport->updateAll(array('ipp_count'=>$entry_denominator[7] ,'male_count'=>$entry_denominator[0],'female_count'=>$entry_denominator[1]
						,'ethnicity_count'=>$entry_denominator[3] ,'race_count'=>$entry_denominator[6],'num_male'=>'0'
						,'num_female'=>'0','num_ethnicity'=>'0','num_race'=>'0')
						,array('doctor_id'=>$doc_id,'measure_id'=>'0022-2'));
			}
			
		}
		else{
		if(!empty($resultOfelderlymedication2[3])){
			foreach($resultOfelderlymedication2[3] as $resultOfelderlymedications){
				$id_n3[$i].=$resultOfelderlymedications['NewCropPrescription']['patient_uniqueid'];$i++;
			}

			$numarator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity','Patient.lookup_name'),'conditions'=>array('Patient.id'=>$id_n3)));			
			$demographic_result=$this->admin_demographic_calculation($denominator_result,$numarator_result);
			$entry_numarator=explode(',',$demographic_result[0]);
			$entry_denominator=explode(',',$demographic_result[1]);
			if(!empty($demographic_result)){
				$this->CqmReport->updateAll(array('ipp_count'=>$entry_denominator[7] ,'male_count'=>$entry_denominator[0],'female_count'=>$entry_denominator[1]
						,'ethnicity_count'=>$entry_denominator[3] ,'race_count'=>$entry_denominator[6],'num_male'=>$entry_numarator[0]
						,'num_female'=>$entry_numarator[1] ,'num_ethnicity'=>$entry_numarator[3],'num_race'=>$entry_numarator[6])
						,array('doctor_id'=>$doc_id,'measure_id'=>'0022-2'));
			}
		}
		}
		//-------------------------------ControllingHighBpImprove-----------------------------------------------------------------------------------------------------------------------
		$resultOfControllingHighBpImprove=$this->Report->ControllingHighBpImprove($this->Session->read('cqm_doctor_id'),$this->Session->read('cqm_start_date'),$this->Session->read('cqm_end_date'));
		$this->set('resultOfControllingHighBpImprove',$resultOfControllingHighBpImprove);
		$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		$this->NoteDiagnosis->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("Patient.patient_id=NoteDiagnosis.patient_id")),
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
				)));
		foreach($resultOfControllingHighBpImprove[3] as $resultOfControllingHighBpImprovess){
			$d_id[]=$resultOfControllingHighBpImprovess['NoteDiagnosis']['patient_id'];
		}

		$denominator_result=$this->NoteDiagnosis->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$d_id),'group'=>'Patient.id'));

		$this->Patient->bindModel(array(
				'belongsTo'=>array(
						'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),

				)));
		foreach($resultOfControllingHighBpImprove[4] as $resultOfControllingHighBpImprove1){
			$n_id[]=$resultOfControllingHighBpImprove1['Note']['patient_id'];
		}

		$numarator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$n_id)));

		$demographic_result=$this->admin_demographic_calculation($denominator_result,$numarator_result);
		$entry_numarator=explode(',',$demographic_result[0]);
		$entry_denominator=explode(',',$demographic_result[1]);
		if(!empty($demographic_result)){
			$this->CqmReport->updateAll(array('ipp_count'=>$entry_denominator[7] ,'male_count'=>$entry_denominator[0],'female_count'=>$entry_denominator[1]
					,'ethnicity_count'=>$entry_denominator[3] ,'race_count'=>$entry_denominator[6],'num_male'=>$entry_numarator[0]
					,'num_female'=>$entry_numarator[1] ,'num_ethnicity'=>$entry_numarator[3],'num_race'=>$entry_numarator[6],
					'exclu_male'=>0,'exclu_female'=>0,'exclu_race'=>0,'exclu_ethnicity'=>0)
					,array('doctor_id'=>$doc_id,'measure_id'=>'0018-1'));
		}
		/* debug($doc_id);
		exit; */
		$qrdabody=$this->Qrda->qrdaBody($this->Session->read('cqm_doctor_id'),"EP",$this->Session->read('cqm_start_date'),$this->Session->read('cqm_end_date'));
		$this->Session->setFlash(__('Qrda Cat III File Generated Successfully','',array('class'=>'message')));
		$this->redirect(array('action'=>clinical_quality_measure,'1'));
		//exit;
	}

	public function admin_ehdemographic($demograhic_recive=null){
		/* debug($demograhic_recive); */
		$count_male=0;
		$count_female=0;
		$race_white=0;
		$race_black=0;
		$race_asian=0;
		$eth_hispanic=0;
		$eth_not_hispanic=0;
		foreach($demograhic_recive as $demograhic_recives){
			if($demograhic_recives['Person']['sex']=='M' ||$demograhic_recives['Person']['sex']=='Male'){
				$count_male=$count_male+1;
			}

			if($demograhic_recives['Person']['ethnicity']=='2135-2:Hispanic or Latino'){
				$eth_hispanic=$eth_hispanic+1;
			}
			if($demograhic_recives['Person']['ethnicity']=='2186-5:Not Hispanic or Latino'){
				$eth_not_hispanic=$eth_not_hispanic+1;
			}
			if($demograhic_recives['Person']['race']=='1002-5'){
				$race_black=$race_black+1;
			}
			if($demograhic_recives['Person']['race']=='2106-3'){
				$race_white=$race_white+1;
			}
			if($demograhic_recives['Person']['race']=='2028-9'){
				$race_asian=$race_asian+1;
			}
			if($demograhic_recives['Person']['sex']=='F' ||$demograhic_recives['Person']['sex']=='Female'){
				$count_female=$count_female+1;
			}
		}
		$result_return= array('count_male'=>$count_male,'female'=>$count_female,'white'=>$race_white,'black'=>$race_black,'asain'=>$race_asian,'hispanic'=>$eth_hispanic,'not_hispanic'=>$eth_not_hispanic,'totalcount'=>count($demograhic_recive));
		//$result_return=$count_male.",".$count_female.",".$race_white.",".$race_black.",".$race_asian.",".$eth_hispanic.",".$eth_not_hispanic.",".count($demograhic_recive);

		return array($result_return);


	}
	public function admin_demographic_calculation($denominator=null,$numarator=null,$exception=null){
		/* 	debug($denominator);
		 debug($numarator);
		debug($exception);
		exit */;
		///-----------------------------------------------------------------------------------------------------------------
		$count_male=0;
		$count_female=0;
		$race_white=0;
		$race_black=0;
		$race_asian=0;
		$eth_hispanic=0;
		$eth_not_hispanic=0;
		foreach($denominator as $denominators){
			if($denominators['Person']['sex']=='M' ||$denominators['Person']['sex']=='Male'){
				$count_male=$count_male+1;
			}

			if($denominators['Person']['ethnicity']=='2135-2:Hispanic or Latino'){
				$eth_hispanic=$eth_hispanic+1;
			}
			if($denominators['Person']['ethnicity']=='2186-5:Not Hispanic or Latino' || $denominators['Person']['ethnicity']==''){
				$eth_not_hispanic=$eth_not_hispanic+1;
			}
			if($denominators['Person']['race']=='1002-5' || $denominators['Person']['race']==''){
				$race_black=$race_black+1;
			}
			if($denominators['Person']['race']=='2106-3'){
				$race_white=$race_white+1;
			}
			if($denominators['Person']['race']=='2028-9'){
				$race_asian=$race_asian+1;
			}
			if($denominators['Person']['sex']=='F' ||$denominators['Person']['sex']=='Female' ||$denominators['Person']['sex']==''){
				$count_female=$count_female+1;
			}
		}
		//---------------------------------------------------------------------------------------------------------------------------------
		$count_maleN=0;
		$count_femaleN=0;
		$race_whiteN=0;
		$race_blackN=0;
		$race_asianN=0;
		$eth_hispanicN=0;
		$eth_not_hispanicN=0;
		foreach($numarator as $numarators){
			if($numarators['Person']['sex']=='M' ||$numarators['Person']['sex']=='Male'){
				$count_maleN=$count_maleN+1;
			}

			if($numarators['Person']['ethnicity']=='2135-2:Hispanic or Latino'){
				$eth_hispanicN=$eth_hispanicN+1;
			}
			if($numarators['Person']['ethnicity']=='2186-5:Not Hispanic or Latino'){
				$eth_not_hispanicN=$eth_not_hispanicN+1;
			}
			if($numarators['Person']['race']=='1002-5'){
				$race_blackN=$race_blackN+1;
			}
			if($numarators['Person']['race']==2106-3){
				$race_whiteN=$race_whiteN+1;
			}
			if($numarators['Person']['race']==2028-9){
				$race_asianN=$race_asianN+1;
			}
			if($numarators['Person']['sex']=='F' ||$numarators['Person']['sex']=='Female'){
				$count_femaleN=$count_femaleN+1;
			}
		}
		///-----------------------------------------------------------------------------expection-----------------------------------------------------------------------
		//---------------------------------------------------------------------------------------------------------------------------------
		$count_maleE=0;
		$count_femaleE=0;
		$race_whiteE=0;
		$race_blackE=0;
		$race_asianE=0;
		$eth_hispanicE=0;
		$eth_not_hispanicE=0;
		foreach($exception as $exceptions){
			if($exceptions['Person']['sex']=='M' ||$exceptions['Person']['sex']=='Male'){
				$count_maleE=$count_maleE+1;
			}

			if($exceptions['Person']['ethnicity']=='2135-2:Hispanic or Latino'){
				$eth_hispanicE=$eth_hispanicE+1;
			}
			if($exceptions['Person']['ethnicity']=='2186-5:Not Hispanic or Latino'){
				$eth_not_hispanicE=$eth_not_hispanicE+1;
			}
			if($exceptions['Person']['race']=='1002-5'){
				$race_blackE=$race_blackE+1;
			}
			if($exceptions['Person']['race']==2106-3){
				$race_whiteE=$race_whiteE+1;
			}
			if($exceptions['Person']['race']==2028-9){
				$race_asianE=$race_asianE+1;
			}
			if($exceptions['Person']['sex']=='F' ||$exceptions['Person']['sex']=='Female'){
				$count_femaleE=$count_femaleE+1;
			}
		}

		$numarator_return=$count_maleN.",".$count_femaleN.",".$race_whiteN.",".$race_blackN.",".$race_asianN.",".$eth_hispanicN.",".$eth_not_hispanicN.",".count($numarator);
		$denominator_return=$count_male.",".$count_female.",".$race_white.",".$race_black.",".$race_asian.",".$eth_hispanic.",".$eth_not_hispanic.",".count($denominator);
		$exception_return=$count_maleE.",".$count_femaleE.",".$race_whiteE.",".$race_blackE.",".$race_asianE.",".$eth_hispanicE.",".$eth_not_hispanicE.",".count($exception);
		return array($numarator_return,$denominator_return,$exception_return);


	}
	public function admin_qrda3($numarator=null,$denominator=null,$recive=null,$s_date=null,$e_date=null,$d_name=null,$doc=null){
		/*  debug($numarator);
		 debug($denominator);
		debug($s_date);
		debug($e_date);
		debug($recive);

		exit ;   */
		$this->uses=array('Patient','Person','Race','Qrda','Doctor','RadiologyReport','NoteDiagnosis','NewCropPrescription');
		//$a=$this->Doctor->find('all',array('fields'=>array('Doctor.name'),'conditions'=>array('Doctor.id'=>$doctor)));
		//echo "<pre>";print_r($a);
		if($recive=='Controlling High Blood Presure'){

			$resultOfBp=$this->Report->ControllingHighBp($d_name,$s_date,$e_date);
			$this->set('resultOfBp',$resultOfBp);
			//echo "<pre>";print_r($resultOfBp[4]);
			$i=0;
			foreach($resultOfBp[3] as $resultOfBps){
				$id_d[$i]=$resultOfBps['NoteDiagnosis']['patient_id'];$i++;
			}
			//echo $id_d."<br/>";
			$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
			$this->Patient->bindModel(array(
					'belongsTo'=>array(
							'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
					)));

			$denominator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$id_d)));

			$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
			$this->Patient->bindModel(array(
					'belongsTo'=>array(
							'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
					)));
			$i=0;
			foreach($resultOfBp[4] as $resultOfBps){
				$id_n[$i].=$resultOfBps['Note']['patient_id'];$i++;
			}
			$numarator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race'),'conditions'=>array('Patient.id'=>$id_n)));

			$demographic_result=$this->admin_demographic_calculation($denominator_result,$numarator_result,'Controlling High Blood Presure');

			$qrdabody=$this->Qrda->qrdaBody($demographic_result['0'],$demographic_result['1'],$recive,$s_date,$e_date);
		}
		elseif($recive=='Use of Imageing studies for Low Back Pain'){
			$resultOfLowBackPain=$this->Report->LowBackPain($d_name,$s_date,$e_date);
			//$resultOfBp=$this->Report->ControllingHighBp($d_name,$s_date,$e_date);
			//$this->set('resultOfBp',$resultOfBp);
			///debug($resultOfLowBackPain[1]);
			foreach($resultOfLowBackPain[0] as $resultOfLowBackPains){
				$id_d[]=$resultOfLowBackPains['NoteDiagnosis']['patient_id'];
			}

			$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
			$this->Patient->bindModel(array(
					'belongsTo'=>array(
							'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
					)));

			$denominator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$id_d)));


			$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
			$this->Patient->bindModel(array(
					'belongsTo'=>array(
							'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
					)));
			$i=0;
			foreach($resultOfLowBackPain[1] as $resultOfLowBackPains){
				$id_n[$i].=$resultOfLowBackPains['RadiologyReport']['patient_id'];$i++;
			}
			$numarator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race'),'conditions'=>array('Patient.id'=>$id_n)));
			$demographic_result=$this->admin_demographic_calculation($denominator_result,$numarator_result,'Use of Imageing studies for Low Back Pain');

			$qrdabody=$this->Qrda->qrdaBody($demographic_result[0],$demographic_result[1],$recive,$s_date,$e_date);
		}
		elseif($recive=='Documentation of current Medications in the Medical Record'){
			$resultOfDocumentationOfCurrentMedication=$this->Report->DocumentationOfCurrentMedication($d_name,$s_date,$e_date);
			$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
			$this->Patient->bindModel(array(
					'belongsTo'=>array(
							'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
					)));
			$denominator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$resultOfDocumentationOfCurrentMedication[3])));


			$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
			$this->Patient->bindModel(array(
					'belongsTo'=>array(
							'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
					)));

			$i=0;

			foreach($resultOfDocumentationOfCurrentMedication[4] as $resultOfDocumentationOfCurrentMedications){
				$id_n[$i].=$resultOfDocumentationOfCurrentMedications['NewCropPrescription']['patient_uniqueid'];$i++;
			}

			$numarator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race'),'conditions'=>array('Patient.id'=>$id_n)));

			$demographic_result=$this->admin_demographic_calculation($denominator_result,$numarator_result,'Documentation of current Medications in the Medical Record');
			$qrdabody=$this->Qrda->qrdaBody($demographic_result[0],$demographic_result[1],$recive,$s_date,$e_date);
		}
		elseif($recive=='Prevention Care and Screeing Tobacco Use Screening and Cessation Intervention'){


			$resultOfTobaccoScreening=$this->Report->TobaccoScreening($d_name,$s_date,$e_date);
			//$resultOfBp=$this->Report->ControllingHighBp($d_name,$s_date,$e_date);
			/* debug($resultOfTobaccoScreening);
			 exit; */

			$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
			$this->Patient->bindModel(array(
					'belongsTo'=>array(
							'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
					)));
			//echo "<pre>";print_r($id_d);
			$denominator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$resultOfTobaccoScreening[3])));


			$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
			$this->Patient->bindModel(array(
					'belongsTo'=>array(
							'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
					)));

			$i=0;
			/* debug($resultOfTobaccoScreening[4]);
			 exit; */

			foreach($resultOfTobaccoScreening[4] as $resultOfTobaccoScreenings){
				$id_n[$i].=$resultOfTobaccoScreenings['NewCropPrescription']['patient_uniqueid'];$i++;
			}

			$numarator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$id_n)));
			$demographic_result=$this->admin_demographic_calculation($denominator_result,$numarator_result,'Prevention Care and Screeing Tobacco Use Screening and Cessation Intervention');
			$qrdabody=$this->Qrda->qrdaBody($demographic_result[0],$demographic_result[1],$recive,$s_date,$e_date);
		}
		elseif($recive=='Prevention Care and Screeing Screeningfor Clinical Depression and Follow-up Plan'){
			$resultOfDepression=$this->Report->Depression($d_name,$s_date,$e_date);

			$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
			$this->Patient->bindModel(array(
					'belongsTo'=>array(
							'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
					)));

			$denominator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$resultOfDepression[3])));

			$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
			$this->Patient->bindModel(array(
					'belongsTo'=>array(
							'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
					)));

			$i=0;
			if(!empty($resultOfDepression[4])){
				foreach($resultOfDepression[4] as $resultOfDepression){
					$id_n[$i].=$resultOfDepression['NoteDiagnosis']['patient_id'];$i++;
				}

				$numarator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$id_n)));

				$demographic_result=$this->admin_demographic_calculation($denominator_result,$numarator_result,'Prevention Care and Screeing Screeningfor Clinical Depression and Follow-up Plan');
				$qrdabody=$this->Qrda->qrdaBody($demographic_result[0],$demographic_result[1],$recive,$s_date,$e_date);
			}
		}
		elseif($recive=='Prevention Care and Screeing Body Mass Index Screening and Flow-UpA'){
			$resultOfBMI_A=$this->Report->BMI_A($d_name,$s_date,$e_date);

			$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
			$this->Patient->bindModel(array(
					'belongsTo'=>array(
							'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
					)));
			$denominator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$resultOfBMI_A[3])));

			$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
			$this->Patient->bindModel(array(
					'belongsTo'=>array(
							'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
					)));

			$i=0;
			if(!empty($resultOfBMI_A[4])){
				foreach($resultOfBMI_A[4] as $resultOfBMI_A){
					$id_n[$i].=$resultOfBMI_A['Diagnosis']['patient_id'];$i++;
				}

				$numarator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$id_n)));
				$demographic_result=$this->admin_demographic_calculation($denominator_result,$numarator_result,'Prevention Care and Screeing Body Mass Index Screening and Flow-UpA');
				$qrdabody=$this->Qrda->qrdaBody($demographic_result[0],$demographic_result[1],$recive,$s_date,$e_date);
			}
		}
		elseif($recive=='Prevention Care and Screeing Body Mass Index Screening and Flow-UpB'){


			$resultOfBMI_A=$this->Report->BMI_B($d_name,$s_date,$e_date);

			$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
			$this->Patient->bindModel(array(
					'belongsTo'=>array(
							'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
					)));

			$denominator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$resultOfBMI_A[3])));

			$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
			$this->Patient->bindModel(array(
					'belongsTo'=>array(
							'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
					)));

			$i=0;
			if(!empty($resultOfBMI_A[4])){
				foreach($resultOfBMI_A[4] as $resultOfBMI_A){
					$id_n[$i].=$resultOfBMI_A['Diagnosis']['patient_id'];$i++;
				}

				$numarator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$id_n)));
				$demographic_result=$this->admin_demographic_calculation($denominator_result,$numarator_result,'Prevention Care and Screeing Body Mass Index Screening and Flow-UpB');
				$qrdabody=$this->Qrda->qrdaBody($demographic_result[0],$demographic_result[1],$recive,$s_date,$e_date);
			}
		}
		elseif($recive=='Pregnant women that has HBsAg testing'){
			$resultOfPragnentWomen=$this->Report->PragnentWomen($d_name,$s_date,$e_date);
			$i=0;
			foreach($resultOfPragnentWomen[3] as $resultOfPragnentWomens){
				$id[$i]=$resultOfPragnentWomens['NoteDiagnosis']['patient_id'];
				$i++;
			}

			$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
			$this->Patient->bindModel(array(
					'belongsTo'=>array(
							'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
					)));
			$denominator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$id)));

			$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
			$this->Patient->bindModel(array(
					'belongsTo'=>array(
							'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
					)));

			$i=0;
			if(!empty($resultOfPragnentWomen[4])){
				foreach($resultOfPragnentWomen[4] as $resultOfPragnentWomens){
					$id_n[$i].=$resultOfPragnentWomens['NoteDiagnosis']['patient_id'];$i++;
				}

				$numarator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$id_n)));
				$demographic_result=$this->admin_demographic_calculation($denominator_result,$numarator_result,'Pregnant women that has HBsAg testing');
				$qrdabody=$this->Qrda->qrdaBody($demographic_result[0],$demographic_result[1],$recive,$s_date,$e_date);
			}
		}
		elseif($recive=='Use of High-Risk Medications in the Elderly'){


			$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
			$this->Patient->bindModel(array(
					'belongsTo'=>array(
							'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
					)));

			$denominator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$resultOfelderlymedication[3])));

			$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
			$this->Patient->bindModel(array(
					'belongsTo'=>array(
							'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
					)));

			$i=0;
			if(!empty($resultOfelderlymedication[4])){
				foreach($resultOfelderlymedication[4] as $resultOfelderlymedications){
					$id_n[$i].=$resultOfelderlymedications['NewCropPrescription']['patient_uniqueid'];$i++;
				}

				$numarator_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$id_n)));
				$demographic_result=$this->admin_demographic_calculation($denominator_result,$numarator_result,'Use of High-Risk Medications in the Elderly');
				$qrdabody=$this->Qrda->qrdaBody($demographic_result[0],$demographic_result[1],$recive,$s_date,$e_date);
			}
		}
		elseif($recive=='Stroke2 Ischemic Stroke Discharged on anti-thrombotic therapy'){


			$this->NoteDiagnosis->bindModel(array(
					'belongsTo'=>array(
							'Patient'=>array('foreignKey'=>false,'conditions'=>array("NoteDiagnosis.patient_id=Patient.id"))
					)));
			$patient_id=$this->NoteDiagnosis->find('list',array('fields'=>array('patient_id','patient_id'),'conditions'=>array('Patient.admission_type'=>'IPD','snowmedid'=>'111297002','start_dt BETWEEN ? AND ?'=> array($s_date,$e_date)),'recursive'=>1));
			$deno_nonpara=count($patient_id);

			$result_N=$this->NewCropPrescription->find('list',array('fields'=>array('patient_uniqueid','patient_uniqueid'),'conditions'=>array('NewCropPrescription.patient_uniqueid'=>$patient_id,'NewCropPrescription.rxnorm'=>'198467')));
			$num_nonpara=count($result_N);
			$cal_percentage_nonpara=($num_nonpara/$deno_nonpara)*100;
			$result_stroke2=$num_nonpara."+".$deno_nonpara."+".$cal_percentage_nonpara."+".$patient_id."+".$result_N;
			$this->set("result_stroke2",$result_stroke2);
			//$resultOfBp=$this->Report->ControllingHighBp($d_name,$s_date,$e_date);
			/* debug($resultOfelderlymedication[3]);
			 exit; */


			$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
			$this->Patient->bindModel(array(
					'belongsTo'=>array(
							'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
					)));
			//echo "<pre>";print_r($id_d);
			$deno_result=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$patient_id)));
			/* debug($deno_result);
			 exit;  */
			$count_male=0;
			$count_female=0;
			$race_white=0;
			$race_black=0;
			$race_asian=0;
			$eth_hispanic=0;
			$eth_not_hispanic=0;
			foreach($deno_result as $deno_result){
				if($deno_result['Person']['sex']=='M' ||$deno_result['Person']['sex']=='Male'){
					$count_male=$count_male+1;
				}
				///echo $count_male;
				if($deno_result['Person']['ethnicity']=='2135-2:Hispanic or Latino'){
					//echo "<pre>";print_r($deno_result['Person']['ethnicity']);
					$eth_hispanic=$eth_hispanic+1;
				}

				if($deno_result['Person']['ethnicity']=='2186-5:Not Hispanic or Latino'){
					$eth_not_hispanic=$eth_not_hispanic+1;
				}
				if($deno_result['Person']['race']=='1002-5'){
					$race_black=$race_black+1;
				}
				if($deno_result['Person']['race']==2106-3){
					$race_white=$race_white+1;
				}
				if($deno_result['Person']['race']==2028-9){
					$race_asian=$race_asian+1;
				}
				if($deno_result['Person']['sex']=='F' ||$deno_result['Person']['sex']=='Female'){
					$count_female=$count_female+1;
				}
			}
			/* echo "<pre>";print_r($count_male)."<br/>";
			 echo "<pre>";print_r($count_female)."<br/>";
			exit; */
			$this->Patient->unBindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
			$this->Patient->bindModel(array(
					'belongsTo'=>array(
							'Person'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
					)));

			$i=0;
			/* debug($result_N);
			 exit; */
			/* if(!empty($resultOfelderlymedication[4])){
			 foreach($resultOfelderlymedication[4] as $resultOfelderlymedications){
			$id_n[$i].=$resultOfelderlymedications['NewCropPrescription']['patient_uniqueid'];$i++;
			} */
			if(!empty($result_N)){
				$deno_resultN=$this->Patient->find('all',array('fields'=>array('Person.sex','Person.race','Person.ethnicity'),'conditions'=>array('Patient.id'=>$result_N)));
				$count_maleN=0;
				$count_femaleN=0;
				$race_whiteN=0;
				$race_blackN=0;
				$race_asianN=0;
				$eth_hispanicN=0;
				$eth_not_hispanicN=0;
				foreach($deno_resultN as $deno_resultN){
					if($deno_resultN['Person']['sex']=='M' ||$deno_resultN['Person']['sex']=='Male'){
						$count_maleN=$count_maleN+1;
					}

					if($deno_resultN['Person']['ethnicity']=='2135-2:Hispanic or Latino'){
						$eth_hispanicN=$eth_hispanicN+1;
					}
					if($deno_resultN['Person']['ethnicity']=='2186-5:Not Hispanic or Latino'){
						$eth_not_hispanicN=$eth_not_hispanicN+1;
					}
					if($deno_resultN['Person']['race']=='1002-5'){
						$race_blackN=$race_blackN+1;
					}
					if($deno_resultN['Person']['race']==2106-3){
						$race_whiteN=$race_whiteN+1;
					}
					if($deno_resultN['Person']['race']==2028-9){
						$race_asianN=$race_asianN+1;
					}
					if($deno_resultN['Person']['sex']=='F' ||$deno_resultN['Person']['sex']=='Female'){
						$count_femaleN=$count_femaleN+1;
					}
				}
			}
			else{
				$count_maleN=0;
				$count_femaleN=0;
				$race_whiteN=0;
				$race_blackN=0;
				$race_asianN=0;
				$eth_hispanicN=0;
				$eth_not_hispanicN=0;

			}
			//	echo "<pre>"; print_r($deno_resultN);


			//echo "<pre>"; print_r($deno_resultN);



			if(empty($deno_resultN)){
				$numa_BP=$count_maleN.",".$count_femaleN.",".$race_whiteN.",".$race_blackN.",".$race_asianN.",".$eth_hispanicN.",".$eth_not_hispanicN.",".'0';
			}
			else{
				$numa_BP=$count_maleN.",".$count_femaleN.",".$race_whiteN.",".$race_blackN.",".$race_asianN.",".$eth_hispanicN.",".$eth_not_hispanicN.",".$resultOfelderlymedication[0];
			}
			$deno_BP=$count_male.",".$count_female.",".$race_white.",".$race_black.",".$race_asian.",".$eth_hispanic.",".$eth_not_hispanic.",".$resultOfelderlymedication[1];
			/* echo "<pre>";print_r($numa_BP)."<br/>";
			 echo "<pre>";print_r($deno_BP)."<br/>";
			echo $id_n;
			exit; */
			$qrdabody=$this->Qrda->qrdaBody($numa_BP,$deno_BP,$recive,$s_date,$e_date);
		}
		$this->redirect($this->referer());
		//$this->set(compact('denominator','numarator'));
		//$this->layout = false ;
	}
	public function admin_qrda3view($fname=null){
		//echo $fname;
		$this->set('fname',$fname);
		$this->layout=null;

	}






	public function admin_downloadXml($fname=null){

		$this->layout = false ;
		$this->autoRender = false ;
		$fname = $fname.".zip";
		ob_clean();
		ob_start();
		header('Content-type: "application/xml"; charset="utf8"');
		header('Content-disposition: attachment; filename="'.$fname.'"');
		readfile(Configure::read('generated_cqm_path').$fname);
	}
	public function admin_downloadXmlEh($fname=null){
	
		$this->layout = false ;
		$this->autoRender = false ;
		$fname = $fname.".zip";
		ob_clean();
		ob_start();
		header('Content-type: "application/xml"; charset="utf8"');
		header('Content-disposition: attachment; filename="'.$fname.'"');
		readfile(Configure::read('generated_cqm_patheh').$fname);
	}

	public function admin_quality_measure_detail($cqm){
		$this->uses = array('Patient','CqmExclusionList');

		$this->CqmExclusionList->bindModel(array(
				'belongsTo' => array(
						'Patient' =>array( 'foreignKey'=>false,'conditions'=>array('CqmExclusionList.patient_id = Patient.id')))));
		$CqmData= $this->CqmExclusionList->find('all',array('fields'=>array('Patient.lookup_name','CqmExclusionList.*'),'conditions'=>array('measure_id'=>$cqm)));

		$this->set('CqmData',$CqmData);
		if(!empty($this->request->data)){
			foreach($this->request->data as $cqmList){
				$cqmList['modify_time'] = date('Y-m-d H:i:s');
				$cqmList['modified_by'] = $this->Session->read('userid');
				$this->CqmExclusionList->save($cqmList);
			}

			$this->Session->setFlash(__('Record Edited Successfully','',array('class'=>'message')));
			$this->redirect(array('action'=>'clinical_quality_measure'),array('admin'=>true));
		}

	}
	//Readmission rate
	public function admin_readmission_rate(){
		$this->uses = array('Patient');
		$this->Patient->unBindModel(array('hasMany'=>array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		if($this->request->data)
		{		
			$reportYear=$this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->otutilizationrate($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
				$patients = $this->Patient->Find('all',array('fields'=>array('Patient.form_received_on','Patient.patient_id','Patient.id','Patient.admission_id','Patient.lookup_name',
				'Patient.age','Patient.is_discharge'),'conditions'=>array('is_deleted'=>0,'Patient.form_received_on LIKE'=>"%".$reportYear."%"),'order'=>array('Patient.patient_id')));
			
				//Array indexing by year and month for admitted and readmitted patients
			foreach($patients as $key => $value){
			$nextArraySet = $patients[$key+1] ;
			$currentAdmissionDateTime = strtotime($value['Patient']['form_received_on']);
			$nextAdmissionDateTime = strtotime($nextArraySet['Patient']['form_received_on']);
			if($value['Patient']['patient_id']==$nextArraySet['Patient']['patient_id'])
			{
			
				$diff = $this->DateFormat->dateDiff($value['Patient']['form_received_on'],$nextArraySet['Patient']['form_received_on']);
				
				if($diff->s > 0 && $diff->days < 31 && $value['Patient']['is_discharge']==0)
				{
					
					$year=date("Y",strtotime($nextArraySet['Patient']['form_received_on']));
					$month=date("n",strtotime($nextArraySet['Patient']['form_received_on']));
					//array for readmitted patients
					$rate[$year][$month]['Readmit'][]=$value['Patient']['patient_id'];
					next($patients); //internally set array pointer to next iteration
				}
			}
			$y=date("Y",strtotime($value['Patient']['form_received_on']));
			$m=date("n",strtotime($value['Patient']['form_received_on']));
			//Array for admitted patients
			$rate[$y][$m]['admit'][]=$value['Patient']['patient_id'];
		}
		}
		$this->set(compact('rate', 'reportYear'));
	}
	
	public function admin_readmission(){
		$this->uses = array('Patient');
		$this->Patient->unBindModel(array('hasMany'=>array('PharmacySalesBill','InventoryPharmacySalesReturn')));
		if($this->request->data)
		{
			$reportYear=$this->request->data['reportYear'];
			$fromDate = $reportYear."-01-01"; // set first date of current year
			$toDate = $reportYear."-12-31"; // set last date of current year
			$this->otutilizationrate($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}
			$this->set('yaxisArray', $yaxisArray);
			$patients = $this->Patient->Find('all',array('fields'=>array('Patient.form_received_on','Patient.patient_id','Patient.id','Patient.admission_id','Patient.lookup_name',
					'Patient.age','Patient.is_discharge'),'conditions'=>array('is_deleted'=>0,'Patient.form_received_on LIKE'=>"%".$reportYear."%"),'order'=>array('Patient.patient_id')));
		}
		else
		{
		
			$fromDate = date("Y")."-01-01"; // set first date of current year
			$toDate = date("Y")."-12-31"; // set last date of current year
			$this->otutilizationrate($fromDate,$toDate);
			while($toDate > $fromDate) {
				$yaxisArray[date("F-Y", strtotime($fromDate))] = date("F", strtotime($fromDate));
				$expfromdate = explode("-", $fromDate);
				$fromDate = date("Y-m-d", strtotime(date("Y-m-d", mktime(0, 0, 0, $expfromdate[1]+1, $expfromdate[2], $expfromdate[0]))));
			}	
			$this->set('yaxisArray', $yaxisArray);
			$patients = $this->Patient->Find('all',array('fields'=>array('Patient.form_received_on','Patient.patient_id','Patient.id','Patient.admission_id','Patient.lookup_name',
					'Patient.age','Patient.is_discharge'),'conditions'=>array('is_deleted'=>0,'Patient.form_received_on LIKE'=>"%".date("Y")."%"),'order'=>array('Patient.patient_id')));
			$reportYear=date("Y");
		}
			
				
			//Array indexing by year and month for admitted and readmitted patients
			foreach($patients as $key => $value){
				$nextArraySet = $patients[$key+1] ;
				$currentAdmissionDateTime = strtotime($value['Patient']['form_received_on']);
				$nextAdmissionDateTime = strtotime($nextArraySet['Patient']['form_received_on']);
				if($value['Patient']['patient_id']==$nextArraySet['Patient']['patient_id'])
				{
						
					$diff = $this->DateFormat->dateDiff($value['Patient']['form_received_on'],$nextArraySet['Patient']['form_received_on']);
		
					if($diff->s > 0 && $diff->days < 31 && $value['Patient']['is_discharge']==0)
					{
							
						$year=date("Y",strtotime($nextArraySet['Patient']['form_received_on']));
						$month=date("n",strtotime($nextArraySet['Patient']['form_received_on']));
						//array for readmitted patients
						$rate[$year][$month]['Readmit'][]=$value['Patient']['patient_id'];
						next($patients); //internally set array pointer to next iteration
					}
				}
				$y=date("Y",strtotime($value['Patient']['form_received_on']));
				$m=date("n",strtotime($value['Patient']['form_received_on']));
				//Array for admitted patients
				$rate[$y][$m]['admit'][]=$value['Patient']['patient_id'];
			}
		
		$this->set(compact('rate', 'reportYear'));
	
	}
	public function no_of_freevip(){
		$this->uses = array('Person');
		if(!empty($this->request->query)){
		$this->Person->bindModel(array('belongsTo' => array(				
				'Patient' =>array('foreignKey'=>false, 'conditions' => array('Patient.person_id=Person.id'),'type'=>'Inner'),		
		)),false);	
		if($this->request->query['from_date']!=''){				
			$this->request->query['from_date'] = $this->DateFormat->formatDate2STDForReport($this->request->query['from_date'],Configure::read('date_format'))." 00:00:00";
			$this->request->query['to_date'] = $this->DateFormat->formatDate2STDForReport($this->request->query['to_date'],Configure::read('date_format'))." 23:59:59";
				
		
		//	'Person.create_time <=' => $to, 'Person.create_time >=' => $from,'Person.is_deleted'=>0
			$conditions['Patient'] = array('create_time BETWEEN ? AND ?'=> array($this->request->query['from_date'],$this->request->query['to_date']));
		}
		
		$conditions['Person']['vip_chk'] ='1';
		$conditions['Patient']['is_deleted'] ='0';
		$conditions['Person']['location_id'] =$this->Session->read('locationid');
		$conditions = $this->postConditions($conditions);
	
		$this->paginate = array(
				'limit' => Configure::read('number_of_rows'),
				'conditions' =>$conditions,
				'group'=>array('Patient.lookup_name'),
				'fields'=>array('Patient.lookup_name','Person.dob','Person.sex','Person.create_time','Person.vip_chk','Patient.admission_type')
		);
		
		$data = $this->paginate('Person');	
		$getDataCount=count($data);
		$this->set('getDataCount', $getDataCount);
		$this->set('data', $data);
		$this->set('queryString',$this->request->query);
		}
	}
	
	public function admin_advanced_billing($patient_id=null)
	{
		$this->layout ='advance';
		$this->uses = array('RadiologyTestOrder','LaboratoryTestOrder','Patient','TariffStandard','Surgery',
				'DoctorProfile','Diagnosis','Ward','Billing','FinalBilling','OptAppointment','PharmacySalesBill',
				'LabTestPayment','RadiologyTestPayment','Bed','Room','Consultant','User','ServiceBill','TariffList',
				'TariffAmount','PharmacyItem','ServiceCategory');
	
		$this->Patient->unbindModel(array('hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
	
		$this->Patient->bindModel(
				array('belongsTo' => array(
						'TariffStandard' => array('primary_key'=>false,
								'conditions'=> array('TariffStandard.id=Patient.tariff_standard_id'),
								'fields'=> array('TariffStandard.name','TariffStandard.id','Patient.*')), //* for all the fields of patient
						'Diagnosis' => array('foreignKey'=>false,
								'conditions'=>array('Patient.id=Diagnosis.patient_id'),
								'fields'=>array('Diagnosis.final_diagnosis','Diagnosis.id','Patient.*')),
							
						/*'ServiceBill' => array('foreignKey'=>false,
						 'conditions'=>array('Patient.id=ServiceBill.patient_id'),
								'fields'=>array('ServiceBill.tariff_list_id')),*/
							
						/*'TariffList' => array('foreignKey'=>false,
						 'conditions'=>array('ServiceBill.tariff_list_id=TariffList.id'),
								'fields'=>array('TariffList.name','cghs_non_nabh')),*/
							
						'Person'=>array('primaryKey'=>false,
								'conditions'=>array('Person.id=Patient.person_id'),
								'fields'=>array('Person.district')),
						'OtherService'=>array('foreignKey'=>false,'conditions'=>array('OtherService.patient_id=Patient.id'),'fields'=>array('OtherService.service_name','OtherService.service_amount')),
						'Room'=>array('foreignKey'=>false,'conditions'=>array('Room.id=Patient.room_id'),'fields'=>array('Room.bed_prefix')),
						'User'=>array('foreignKey'=>false,'conditions'=>array('User.id=Patient.doctor_id'),'fields'=>array('User.first_name','User.last_name')),
						'Bed'=>array('foreignKey'=>false,'conditions'=>array('Bed.id=Patient.bed_id'),'fields'=>array('Bed.bedno')),
							
						'FinalBilling'=>array('foreignKey'=>false,'conditions'=>array('FinalBilling.Patient_id=Patient.id'),
								'fields'=>array('FinalBilling.total_amount')),
	
						'Billing'=>array('foreignKey'=>false,'conditions'=>array('Billing.Patient_id=Patient.id'),
								'fields'=>array('Billing.id','Billing.amount','Billing.date','Billing.amount_pending','Billing.amount_paid','Billing.amount_to_pay_today','Billing.total_amount')),
						'PharmacySalesBill'=>array('foreignKey'=>false,'conditions'=>array('PharmacySalesBill.patient_id=Patient.id'),
								'fields'=>array('PharmacySalesBill.total')),
							
				),'hasMany'=>array('ConsultantBilling'=>array('foreignKey'=>'patient_id',
					 'fields'=>array('ConsultantBilling.amount')))),FALSE);
	
		$result = $this->Patient->find('all',array(
				'conditions'=>array('Patient.location_id'=>$this->Session->read('locationid'),
						'Patient.is_discharge'=>0,'Patient.is_deleted'=>0,'Patient.admission_type'=>"IPD"/*'Patient.bed_id=Bed.id'*/),
				'order'=>'Billing.date DESC','group'=>array('Billing.patient_id HAVING Billing.patient_id IS NOT NULL')));
		$this->set('results', $result);
			
		$add = $this->Billing->find('all',array('conditions'=>array('patient_id'=>$patientID,'location_id'=>$this->Session->read('locationid'))));
		$this->set('advancePayment',$add);
		//$this->set('advancePayment',$add);
	
		$this->loadModel('OptAppointment');
	
		$this->OptAppointment->unbindModel(array(
				'belongsTo' => array('Initial','Patient','Location','Opt','OptTable','Surgery','SurgerySubcategory','Doctor','DoctorProfile')));
			
		$this->OptAppointment->bindModel(array(
				'belongsTo' => array(
						'Surgery'=>array('foreignKey'=>'surgery_id'),
				)));
			
		$surgeriesData = $this->OptAppointment->find('all',array(
				'fields'=>array('Surgery.name','OptAppointment.patient_id', 'Surgery.charges',
						'OptAppointment.surgery_cost','OptAppointment.anaesthesia_cost','OptAppointment.ot_charges'),
				'conditions'=>array('OptAppointment.patient_id'=>$patientID,'OptAppointment.is_deleted'=>0,
						'OptAppointment.location_id'=>$this->Session->read('locationid'))));
		$this->set('surgeriesData',$surgeriesData);
		
		$this->loadModel('ServiceBill');
		$serviceId=$this->ServiceCategory->find('first',array('fields'=>array('id'),'conditions'=>array('ServiceCategory.name LIKE'=>Configure::read('mandatoryservices'))));
		
		$this->ServiceBill->bindModel(array(
					'belongsTo' => array(
							'Patient' =>array('foreignKey'=>'patient_id'),
							"ServiceCategory"=>array('foreignKey'=>'service_id','type'=>'RIGHT'),
							"ServiceSubCategory"=>array('foreignKey'=>'sub_service_id'),
							'TariffList'=>array('foreignKey'=>'tariff_list_id'),
							'TariffAmount'=>array('foreignKey'=>false,'conditions'=>array('TariffAmount.tariff_list_id=ServiceBill.tariff_list_id','TariffAmount.tariff_standard_id'))
					)));
			
			$servicesData =$this->ServiceBill->find('all',array('group'=>array('ServiceBill.id'),'fields'=>array('TariffAmount.*,ServiceCategory.*,ServiceSubCategory.*,
					TariffList.*,ServiceBill.*,Patient.lookup_name,Patient.is_discharge,Patient.tariff_standard_id,Patient.form_received_on'),'conditions'=>array('ServiceBill.patient_id'=>$patientID,
							'ServiceBill.service_id'=>$serviceId['ServiceCategory']['id'])));
			
			$this->set('servicesData',$servicesData);
			/*
			 * doctor and nursing charges for mandatory servises
			*/
			foreach($result as $tariff){
				$tariffStandardId[]	=$tariff['Patient']['tariff_standard_id'];
			}
			
			//if($addmissionType['Patient']['admission_type']=='IPD'){
			$hospitalType = $this->Session->read('hospitaltype');
			//$totalWardDays=count($roomTariff['day']); //total no of days
			$doctorCharges = $this->getDoctorCharges(1,$hospitalType,$tariffStandardId,'IPD');
			$nursingCharges = $this->getNursingCharges(1,$hospitalType,$tariffStandardId);
			
			//}
			
			foreach($result as $docNurseChrge){
				$docCharge[$docNurseChrge['Patient']['id']]=$doctorCharges[$docNurseChrge['Patient']['tariff_standard_id']];
				$nurseCharge[$docNurseChrge['Patient']['id']]=$nursingCharges[$docNurseChrge['Patient']['tariff_standard_id']];
			}
			$this->set(array('doctorCharges'=>$docCharge,'nursingCharges'=>$nurseCharge));
		//pr($servicesData);
		$this->set('results',$result);
		//pr($results) ;
		 
		$rad = $this->RadiologyTestOrder->radDetails($patientID); //array of patient ids
		$this->set('rad',$rad);
		$lab = $this->LaboratoryTestOrder->labDetails($patientID);
		$this->set('lab',$lab);
		
	//Pharmacy Data
		$pharmacyChargeDetails = array();
		$pharmacyResult = $this->PharmacySalesBill->find('all',array('conditions'=>array('PharmacySalesBill.patient_id'=>$patientID)));
		foreach($pharmacyResult as $pharmacy){
			foreach($pharmacy['PharmacySalesBillDetail'] as $pharmacyItem){
				$pharmacyItemDetails = $this->PharmacyItem->find('first',array('conditions'=>array('PharmacyItem.id'=>$pharmacyItem['item_id'])));

				if($pharmacyItemDetails['PharmacyItemRate']['sale_price']!=0){
					$cost=$pharmacyItemDetails['PharmacyItemRate']['sale_price'];
				}else{
					$cost=$pharmacyItemDetails['PharmacyItemRate']['mrp'];
				}
				$pharmacyChargeDetails[$pharmacy['PharmacySalesBill']['patient_id']][]=array('itemName'=>$pharmacyItemDetails['PharmacyItem']['name'],'quantity'=>$pharmacyItem['qty'],'rate'=>$cost,'purchaseDate'=>$pharmacy['PharmacySalesBill']['create_time'],
						'tax'=>$pharmacyItem['tax'],'pharmacySalesBillTax'=>$pharmacy['PharmacySalesBill']['tax'],'payment_mode'=>$pharmacy['PharmacySalesBill']['payment_mode']);
			}

		}
		$this->set('pharmacy_charges',$pharmacyChargeDetails);
		
		// consultant charges
		$this->loadModel('ConsultantBilling');
		$getconsultantData = $this->ConsultantBilling->find('all',array('conditions' =>array('ConsultantBilling.patient_id'=>$patientID)));
		$this->set('getconsultantData',$getconsultantData);
		
		$finaltotalPaid =$this->Billing->find('all',array('fields'=>array('Billing.patient_id','Billing.amount'),
				'conditions'=>array('Billing.patient_id'=>$patientID),
				));
		foreach($finaltotalPaid as $allPaid){
			$finalPaid[$allPaid['Billing']['patient_id']]=$finalPaid[$allPaid['Billing']['patient_id']]+$allPaid['Billing']['amount'];
		}
		$this->set('finaltotalPaid',$finalPaid);
		//debug($surgeriesData);
		
	}	
	/*******************************************************************************************************************/
	
	
	
	
	/*******************************************************************************************************************/
	
	public function no_of_followup(){
		$this->uses = array('Person');
		$this->layout ='Advance';
		if(!empty($this->request->query)){
		$this->Person->bindModel(array('belongsTo' => array(
				'Patient' =>array('foreignKey'=>false, 'conditions' => array('Patient.person_id=Person.id'),'type'=>'Inner'),
				'Appointment' =>array('foreignKey'=>false, 'conditions' => array('Appointment.person_id=Person.id')),
		)),false);
		if($this->request->query['from_date']!=''){
			$this->request->query['from_date'] = $this->DateFormat->formatDate2STDForReport($this->request->query['from_date'],Configure::read('date_format'))." 00:00:00";
			$this->request->query['to_date'] = $this->DateFormat->formatDate2STDForReport($this->request->query['to_date'],Configure::read('date_format'))." 23:59:59";
		
		
			//	'Person.create_time <=' => $to, 'Person.create_time >=' => $from,'Person.is_deleted'=>0
			$conditions['Appointment'] = array('date BETWEEN ? AND ?'=> array($this->request->query['from_date'],$this->request->query['to_date']));
		
		}
		
		$conditions['Appointment']['is_future_app'] ='1';
		$conditions['Patient']['is_deleted'] ='0';
		$conditions = $this->postConditions($conditions);
		
		$this->paginate = array(
				'limit' => Configure::read('number_of_rows'),
				'conditions' =>$conditions,
				'group'=>array('Patient.lookup_name'),
				'fields'=>array('Patient.lookup_name','Person.dob','Person.sex','Patient.create_time')
		);
		
		$data = $this->paginate('Person');
		$getDataCount=count($data);
		$this->set('getDataCount', $getDataCount);
		$this->set('data', $data);
		$this->set('queryString',$this->request->query);
		}
	}
	
	/**************EOF Swatin************************/
	public function profit_referral_doctor($type=NULL){	
		$this->uses = array('Patient','Person','MarketingTeam','Patient','ServiceCategory','ServiceBill','TariffStandard','FinalBilling','LaboratoryTestOrder','VoucherPayment',
				'RadiologyTestOrder','PharmacySalesBill','Consultant','ConsultantBilling','OptAppointment','SpotApproval','PatientReferralConsultant');
		
		$this->layout = 'advance' ;
		
		if(!empty($this->request->query))
		{
			if(!empty($this->request->query['lookup_name']))
			{
				if($this->request->query['lookup_name'] != 'null')
				{
					$conditions['Patient.lookup_name'] = $this->request->query['lookup_name'];
				}
			}
			
			if(!empty($this->request->query['doctorId']) && $this->request->query['doctorId'] != 'null') {
		  		
                    $this->VoucherPayment->bindModel(array('belongsTo' => array(
                        'Patient'=>array('type'=>'INNER','foreignKey'=>false, 'conditions' => array('Patient.id=VoucherPayment.patient_id')),
                        'SpotApproval'=>array('foreignKey'=>false, 'conditions' => array('SpotApproval.voucher_payment_id=VoucherPayment.id')),
                        'FinalBilling' =>array('foreignKey'=>false, 'conditions' => array('FinalBilling.patient_id=Patient.id')),
                        'PatientReferralConsultant'=>array('Type'=>'INNER','foreignKey'=>false, 'conditions' => array('Patient.id=PatientReferralConsultant.patient_id')),
                         /*'Consultant'=>array('foreignKey'=>false,'conditions'=>array('Consultant.id' => $this->request->query['doctorId'])),*/                                                    'Consultant'=>array('Type'=>'INNER','foreignKey'=>false,'conditions'=>array('Consultant.id = PatientReferralConsultant.consultant_id')),
                        'TariffStandard'=>array('foreignKey'=>false,'Type'=>'INNER', 'conditions' => array('TariffStandard.id=Patient.tariff_standard_id')),
                        'Person'=>array('foreignKey'=>false,'Type'=>'INNER', 'conditions' => array('Person.id=Patient.person_id')),
                    )),false); 
		  		//$conditions['Consultant.id'] = $this->request->query['doctorId'];
                                $conditions['PatientReferralConsultant.consultant_id'] = $this->request->query['doctorId'];
			} 
			
		
		/* if(!empty($this->request->query['market_team'])){
				if($this->request->query['market_team'] != 'null'){ 
					
					$this->Patient->bindModel(array('belongsTo' => array(
							'VoucherPayment'=>array('type'=>'INNER','foreignKey'=>false, 'conditions' => array('Patient.id=VoucherPayment.patient_id')),
					)),false);
				
					$conditions['VoucherPayment.is_deleted '] = 0;
					$conditions['VoucherPayment.type like'] ='RefferalCharges';
					
					$patientDetail =$this->Patient->find('list',array('fields'=>array('id','consultant_id')));
					debug($patientDetail);
					foreach($patientDetail as $key=>$pdetail){debug();
						$consultantId = unserialize($pdetail['Patient.consultant_id']);
						debug($pdetail);
					}
					/* $consultDetail = $this->Consultant->find('first',array('fields'=>array('Consultant.id'),  
							'conditions'=>array('Consultant.market_team'=>$this->request->query['market_team']/* ,'Consultant.id=Patient.consultant_id') ));
					
					$string = array(); 
					foreach($consultDetail as $key=>$detail){
						 $string[] = $detail;
						 $singleString = $detail;
					}debug($consultDetail);
					$conditions['Consultant.id'] = $singleString; 
					//exit;
					$this->VoucherPayment->bindModel(array('belongsTo' => array(
							'Patient'=>array('type'=>'INNER','foreignKey'=>false, 'conditions' => array('Patient.id=VoucherPayment.patient_id')),
							'SpotApproval'=>array('foreignKey'=>false, 'conditions' => array('SpotApproval.voucher_payment_id=VoucherPayment.id')),
							'FinalBilling' =>array('foreignKey'=>false, 'conditions' => array('FinalBilling.patient_id=Patient.id')),
							'Consultant'=>array('foreignKey'=>false,'conditions'=>array('Consultant.id' => $singleString)),
							'TariffStandard'=>array('foreignKey'=>false,'Type'=>'INNER', 'conditions' => array('TariffStandard.id=Patient.tariff_standard_id')),
							'Person'=>array('foreignKey'=>false,'Type'=>'INNER', 'conditions' => array('Person.id=Patient.person_id')),
					)),false);
					
					
				}
			}   */
			if(!empty($this->request->query['dateFrom1']))
			{
				if($this->request->query['dateFrom1'])
				{			
					$from = $this->DateFormat->formatDate2STD($this->request->query['dateFrom1'],Configure::read('date_format'))." 00:00:00";
					$conditions['VoucherPayment.date >='] = $from;
				}
			}
                        
			if(!empty($this->request->query['dateTo1']))
			{
				if($this->request->query['dateTo1'])
				{
					$to = $this->DateFormat->formatDate2STD($this->request->query['dateTo1'],Configure::read('date_format'))." 23:59:59";
					$conditions['VoucherPayment.date <='] = $to;
				}
			 } 
			
			if(!empty($this->request->query['dateFrom']))
			{
				if($this->request->query['dateFrom'])
				{			
					$from = $this->DateFormat->formatDate2STD($this->request->query['dateFrom'],Configure::read('date_format'))." 00:00:00";
					$conditions['VoucherPayment.date >='] = $from;
				}
			}
			if(!empty($this->request->query['dateTo']))
			{
				if($this->request->query['dateTo'])
				{
					$to = $this->DateFormat->formatDate2STD($this->request->query['dateTo'],Configure::read('date_format'))." 23:59:59";
					$conditions['VoucherPayment.date <='] = $to;
				}
			}
			
			if(!empty($this->request->query['type']))
			{
				if($this->request->query['type'] != 'null')
				{
					if($this->request->query['type']=='S'){
						$conditions['SpotApproval.type'] = "S";
					}else if($this->request->query['type']=='B'){
						$conditions['SpotApproval.type'] = "B";
					}else if($this->request->query['type']=='Both'){
						$conditions['OR']=array(array('SpotApproval.type'=>"S") ,
								array('SpotApproval.type'=>"B"));						
					}
				}
			}
		}	
		
		if($this->request->query['doctorId'] == null /* || $this->request->query['market_team'] == null */){
			$this->VoucherPayment->bindModel(array('belongsTo' => array(
                        'Patient'=>array('type'=>'INNER','foreignKey'=>false, 'conditions' => array('Patient.id=VoucherPayment.patient_id')),
                        'SpotApproval'=>array('foreignKey'=>false, 'conditions' => array('SpotApproval.voucher_payment_id=VoucherPayment.id')),
                        'FinalBilling' =>array('foreignKey'=>false, 'conditions' => array('FinalBilling.patient_id=Patient.id')),
                        'PatientReferralConsultant'=>array('Type'=>'INNER','foreignKey'=>false, 'conditions' => array('Patient.id=PatientReferralConsultant.patient_id')),
                        'Consultant'=>array('Type'=>'INNER','foreignKey'=>false,'conditions'=>array('Consultant.id = PatientReferralConsultant.consultant_id')),
                        /*'Consultant'=>array('foreignKey'=>false,'conditions'=>array('Consultant.id = Patient.consultant_id')),*/
                        'TariffStandard'=>array('foreignKey'=>false,'Type'=>'INNER', 'conditions' => array('TariffStandard.id=Patient.tariff_standard_id')),
                        'Person'=>array('foreignKey'=>false,'Type'=>'INNER', 'conditions' => array('Person.id=Patient.person_id')),
			)),false);
		}
		
		if(empty($conditions)){
                    $prev_date = date('Y-m-d ', strtotime('-1 day')); 
		    $conditions['VoucherPayment.date >='] = $prev_date;		    
		    $conditions['OR']=array(array('SpotApproval.type'=>"S") ,
		    		array('SpotApproval.type'=>"B"));
		} 
		
		$conditions['VoucherPayment.is_deleted '] = 0;
                $conditions['VoucherPayment.type like'] ='RefferalCharges';  
	    
	   /*  $detail = $this->VoucherPayment->find('all',
	    		array(
	    				'order' => array('Patient.form_received_on ASC','VoucherPayment.date ASC'),
	    				'fields'=>array('Patient.lookup_name','Patient.spot_date','Patient.b_amount','Patient.b_date','Patient.spot_amount','Patient.spot_date','Patient.b_amount','Patient.b_date','Patient.spot_amount',
	    				'Patient.consultant_id','VoucherPayment.id','Patient.id','VoucherPayment.date','VoucherPayment.narration','VoucherPayment.type'),
	    				'conditions'=>array($conditions)));
	    $string = array(); 
	   
	    $consultantIDArr=array();
	   foreach($detail as $key=>$data){
	   		$consultantID =  unserialize($data['Patient']['consultant_id']);
	   		$consultantIDArr[$key] =  $consultantID[0];
		}*/
	 	$patientSVals = $this->VoucherPayment->find('all',array(
			'order' => array('Patient.form_received_on ASC','VoucherPayment.date ASC'),
			'fields'=>array('VoucherPayment.id','Patient.id','VoucherPayment.date','VoucherPayment.narration','VoucherPayment.type',
				    'Patient.lookup_name','Patient.spot_date','Patient.b_amount','Patient.b_date','Patient.spot_amount','Patient.spot_date',
                                    'Patient.b_amount','Patient.b_date','Patient.spot_amount','Consultant.id','Consultant.first_name','Consultant.last_name',
                                    'Consultant.market_team','Consultant.profit_percentage','FinalBilling.discount','VoucherPayment.create_time','Person.sex',
                                    'Person.city','Person.dob','FinalBilling.amount_paid','VoucherPayment.paid_amount','Patient.selection','TariffStandard.name',
                                    'Patient.form_received_on','FinalBilling.total_amount','Patient.discharge_date','FinalBilling.date',
                                    'SpotApproval.*','Patient.consultant_id'),
                                    'conditions'=>array($conditions),'group'=>array('VoucherPayment.id'))); 
	 	
	 	$data = $patientSVals ; 
	 	$i = 0;
	 	
	 	foreach($data as $patient){
	 		$ConsultantID= unserialize($patient['Patient']['consultant_id']);
	 		
			foreach($ConsultantID as $cid){ 
				if($this->request->query['doctorId'] != null){
					$CID = $this->request->query['doctorId'];
				}else{
					$CID = $cid;
				}
				
				$consultDetail = $this->Consultant->find('first',array('fields'=>array('Consultant.id','Consultant.first_name','Consultant.market_team',
								'Consultant.profit_percentage','Consultant.last_name'),
								'conditions'=>array('Consultant.id'=>$CID)));
				
			if($patient['Patient']['id']!=''){
				$patientData[$patient['VoucherPayment']['id']]['id']=$patient['VoucherPayment']['id'];
				$patientData[$patient['VoucherPayment']['id']]['patient_id']=$patient['Patient']['id'];
				$patientData[$patient['VoucherPayment']['id']]['name']=$patient['Patient']['lookup_name'];
				if(!empty($consultDetail['Consultant']['first_name']))
					$patientData[$patient['VoucherPayment']['id']]['referal']=$consultDetail['Consultant']['first_name'].' '.$consultDetail['Consultant']['last_name'];
				else
				$patientData[$patient['VoucherPayment']['id']]['referal']='Direct';
				$patientData[$patient['VoucherPayment']['id']]['team']=$consultDetail['Consultant']['market_team'];//$patient['Consultant']['market_team'];
				$patientData[$patient['VoucherPayment']['id']]['referal_percent']=$consultDetail['Consultant']['profit_percentage'];
				$patientData[$patient['VoucherPayment']['id']]['admission_date']=$patient['Patient']['form_received_on'];
				$patientData[$patient['VoucherPayment']['id']]['discharge_date']=$patient['Patient']['discharge_date'];
				$patientData[$patient['VoucherPayment']['id']]['city']=$patient['Person']['city'];
				$patientData[$patient['VoucherPayment']['id']]['address']=$patient['0']['address'];
				$patientData[$patient['VoucherPayment']['id']]['tariff_type']=$patient['TariffStandard']['name'];
				$patientData[$patient['VoucherPayment']['id']]['dob']=$patient['Person']['dob'];
				$patientData[$patient['VoucherPayment']['id']]['sex']=$patient['Person']['sex'];
				$patientData[$patient['VoucherPayment']['id']]['selection']=$patient['Patient']['selection'];
				$patientData[$patient['VoucherPayment']['id']]['spot_amt']=$patient['Patient']['spot_amount'];
				$patientData[$patient['VoucherPayment']['id']]['voucher_date']=$patient['VoucherPayment']['date'];
				$patientData[$patient['VoucherPayment']['id']]['spot_date']=$patient['Patient']['spot_date'];
				$patientData[$patient['VoucherPayment']['id']]['b_amt']=$patient['Patient']['b_amount'];
				$patientData[$patient['VoucherPayment']['id']]['b_date']=$patient['Patient']['b_date'];
				$patientData[$patient['VoucherPayment']['id']]['discount']=$patient['FinalBilling']['discount'];
				$patientData[$patient['VoucherPayment']['id']]['paid_amt']=$patient['VoucherPayment']['paid_amount'];
				$patientData[$patient['VoucherPayment']['id']]['is_approved']=$patient['SpotApproval']['is_approved'];
				$patientData[$patient['VoucherPayment']['id']]['type']=$patient['SpotApproval']['type'];
				$patientData[$patient['VoucherPayment']['id']]['spot_approval_id']=$patient['SpotApproval']['id'];
				/*$patientData[$patient['Patient']['id']]['discount']=$patient['FinalBilling']['discount'];
				$patientData[$patient['Patient']['id']]['amount_paid']=$patientData[$patient['Patient']['id']]['amount_paid']+$patient['0']['totalBillPaid'];*/
				$patientID[]=$patient['Patient']['id'];								
			
			}//end of if loop
			
		
		} //end of for loop
		}// end of foreach loop
		$this->set('patientData',$patientData);
		$this->set('data', $data);
		$this->set('marketing_teams', $this->MarketingTeam->find('list', array('fields'=> array('name', 'name'),'conditions'=>array('name != "" '),'order'=>array('MarketingTeam.name Asc'))));
		$this->set('queryString',$this->request->query);
		//Final Bill and Billing charges
		$this->getServicesPaidAmount($patientID);
		
		if($type=='excel'){
			$this->autoRender = false;
			$this->layout = false ;
			$this->render('profit_referral_doctor_xls',false);
		}
	}
	
	// function to update approved data swati
	public function getspotdata($pid=null,$vid=null)
	{ 
		$this->loadModel('SpotApproval');
		if($this->SpotApproval->updateAll(array('is_approved'=>'1','modified_time'=>"'".date('Y-m-d H:i:s')."'"),array('patient_id'=>$pid,'id'=>$vid)))
			echo true;
		else echo false;		
		exit;
	}
	
	
	
	
	
	/* 
	public function getSelection($id,$assigned)
	{
         debug($this->params->query); exit;
		$this->autoRender = false;
		$this->layout = 'ajax';
		$this->loadModel('Patient');
		$this->patient->id = $id;	//$id holds the patient's id
		$this->request->data['selection'] = $this->params->query;
		$this->request->data['Patient']['selection'] = $assigned;		//changing the extension_status to approved by 1
		$this->Patient->save($this->request->query);		//update the extension_status of patient

	}
	public function spotbillDate($id)
	{
		$this->autoRender = false;
		$this->layout = 'ajax';
		//$this->uses = array('FinalBilling'); 
		$this->loadModel('Patient');
		//debug($id);exit;
		
		if($this->request->data)
		{
			 //debug($this->request->query);
			$this->Patient->id = $id; //
			$spotDate = $this->DateFormat->formatDate2STDForReport($this->request->data['date'],Configure::read('date_format'));
			$this->request->data['Patient']['spot_date'] = $spotDate;
			
			$this->Patient->save($this->request->data);
		}
	}
		public function bBillDate($id)
	{
		$this->autoRender = false;
		$this->layout = 'ajax';
		//$this->uses = array('FinalBilling'); 
		$this->loadModel('Patient');
		//debug($id);exit;
		
		if($this->request->data)
		{
			 //debug($this->request->query);
			$this->Patient->id = $id; //
			$spotDate = $this->DateFormat->formatDate2STDForReport($this->request->data['date'],Configure::read('date_format'));
			$this->request->data['Patient']['b_date'] = $spotDate;
			
			$this->Patient->save($this->request->data);
		}
	}

  //for Miscellaneous Report
	public function getSpotAmount($id,$amount)
	{
		$this->autoRender = false;
		$this->layout = 'ajax';
		$this->loadModel('Patient');
		
		if(!empty($id))
		{
			$this->request->data['Patient']['id']= $id;	//$id holds the patient's id
			$this->request->data['Patient']['spot_amount'] = $amount;
			$this->Patient->save($this->request->data);		//update the extension_status of patient

		}
	}
	public function getBAmount($id,$amount)
	{
		$this->autoRender = false;
		$this->layout = 'ajax';
		$this->loadModel('Patient');
		//debug($amount);
		if(!empty($id))
		{
			$this->Patient->id = $id;	//$id holds the patient's id
			$this->request->data['Patient']['b_amount'] = $amount;
			$this->Patient->save($this->request->data);		//update the extension_status of patient

		}
	}

 */
	
	public function referral_doc_no_show_patient(){
		$this->layout = 'advance';
		$this->uses = array('Person');		
		
		$this->Person->bindModel(array('belongsTo' => array(
				'Patient' =>array('foreignKey'=>false, 'conditions' => array('Patient.person_id=Person.id'),'type'=>'Inner'),
				'Consultant' =>array('foreignKey'=>false, 'conditions' => array('Consultant.id=Patient.consultant_id')),
				'Appointment' =>array('foreignKey'=>false, 'conditions' => array('Appointment.patient_id=Patient.id')),
		)),false);
		if($this->request->query['from_date']!=''){
			$this->request->query['from_date'] = $this->DateFormat->formatDate2STDForReport($this->request->query['from_date'],Configure::read('date_format'))." 00:00:00";
			$this->request->query['to_date'] = $this->DateFormat->formatDate2STDForReport($this->request->query['to_date'],Configure::read('date_format'))." 23:59:59";
			$conditions['Patient'] = array('create_time BETWEEN ? AND ?'=> array($this->request->query['from_date'],$this->request->query['to_date']));
		}
		if(!empty($this->request->query['ref_doc_name'])){
			$getExplodeName=explode('-',$this->request->query['ref_doc_name']);
			$conditions['Consultant.first_name like '] = "%".trim($getExplodeName[0])."%" ;
			$conditions['Consultant.last_name like '] = "%".trim($getExplodeName[1])."%" ;
			$conditions['Consultant']['id'] =$this->request->query['ref_doc_id'];
		}
		
		
		$conditions['Patient']['consultant_id !='] = '';
		$conditions['Patient']['is_deleted'] ='0';
		$conditions['Appointment']['status'] ='No-Show';
		$conditions['Appointment']['is_deleted'] ='0';
		$conditions['Appointment']['location_id'] =$this->Session->read('locationid');
		
		
		$conditions = $this->postConditions($conditions);
		
		$this->paginate = array(
				'limit' => Configure::read('number_of_rows'),
				'conditions' =>$conditions,
				'group'=>array('Patient.lookup_name'),
				'fields'=>array('COUNT(Appointment.id) as count','Patient.lookup_name','Person.dob','Person.sex','Consultant.first_name','Consultant.last_name','Appointment.status','Appointment.date')
		);
	
		$data = $this->paginate('Person');	
		ksort($data);	
		$getDataCount=count($data);		
		$this->set('getDataCount', $getDataCount);
		$this->set('data', $data);
		$this->set('queryString',$this->request->query);
	}
	public function arrived_for_referral_doctor(){
		$this->layout = 'advance';
		$this->uses = array('Person');		
		$this->Person->bindModel(array('belongsTo' => array(
				'Patient' =>array('foreignKey'=>false, 'conditions' => array('Patient.person_id=Person.id'),'type'=>'Inner'),
				'Consultant' =>array('foreignKey'=>false, 'conditions' => array('Consultant.id=Patient.consultant_id')),
				'Appointment' =>array('foreignKey'=>false, 'conditions' => array('Appointment.patient_id=Patient.id')),
		)),false);
		if($this->request->query['from_date']!=''){
			$this->request->query['from_date'] = $this->DateFormat->formatDate2STDForReport($this->request->query['from_date'],Configure::read('date_format'))." 00:00:00";
			$this->request->query['to_date'] = $this->DateFormat->formatDate2STDForReport($this->request->query['to_date'],Configure::read('date_format'))." 23:59:59";
			$conditions['Patient'] = array('create_time BETWEEN ? AND ?'=> array($this->request->query['from_date'],$this->request->query['to_date']));
		}
		if(!empty($this->request->query['ref_doc_name'])){
			$getExplodeName=explode('-',$this->request->query['ref_doc_name']);
			$conditions['Consultant.first_name like '] = "%".trim($getExplodeName[0])."%" ;
			$conditions['Consultant.last_name like '] = "%".trim($getExplodeName[1])."%" ;
			$conditions['Consultant']['id'] =$this->request->query['ref_doc_id'];
		}
		
		
		$conditions['Patient']['consultant_id !='] = '';
		$conditions['Patient']['is_deleted'] ='0';
		$conditions['Appointment']['status'] ='Arrived';
		$conditions['Appointment']['is_deleted'] ='0';
		$conditions['Appointment']['location_id'] =$this->Session->read('locationid');
		
		
		$conditions = $this->postConditions($conditions);
		
		$this->paginate = array(
				'limit' => Configure::read('number_of_rows'),
				'conditions' =>$conditions,
				'group'=>array('Patient.lookup_name'),
				'fields'=>array('Patient.lookup_name','Person.dob','Person.sex','Consultant.first_name','Consultant.last_name','Appointment.status','Appointment.date')
		);
	
		$data = $this->paginate('Person');	
		ksort($data);		
		$getDataCount=count($data);		
		$this->set('getDataCount', $getDataCount);
		$this->set('data', $data);
		$this->set('queryString',$this->request->query);
	}
	public function no_of_arrival_patient(){
		$this->layout = 'advance';
		$this->uses = array('Person','User');
		if(!empty($this->request->query)){
		$this->Person->bindModel(array('belongsTo' => array(
				'Patient' =>array('foreignKey'=>false, 'conditions' => array('Patient.person_id=Person.id'),'type'=>'Inner'),
				'DoctorProfile' =>array('foreignKey'=>false, 'conditions' => array('DoctorProfile.user_id=Patient.doctor_id')),
				'Appointment' =>array('foreignKey'=>false, 'conditions' => array('Appointment.patient_id=Patient.id')),
		)),false);
		if($this->request->query['from_date']!=''){
			$this->request->query['from_date'] = $this->DateFormat->formatDate2STDForReport($this->request->query['from_date'],Configure::read('date_format'))." 00:00:00";
			$this->request->query['to_date'] = $this->DateFormat->formatDate2STDForReport($this->request->query['to_date'],Configure::read('date_format'))." 23:59:59";
			$conditions['Patient'] = array('create_time BETWEEN ? AND ?'=> array($this->request->query['from_date'],$this->request->query['to_date']));
		}
		if(!empty($this->request->query['doc_name'])){		
			$conditions['DoctorProfile']['user_id'] =trim($this->request->query['doc_name']) ;			
		}
		if(!empty($this->request->query['patient_name'])){
			$conditions['Patient']['lookup_name Like'] = "%".trim($this->request->query['patient_name'])."%";			
		}
		
	
		//$conditions['Patient']['doctor_id !='] = '';
		$conditions['Patient']['is_deleted'] ='0';
		$conditions['Appointment']['status'] ='Arrived';
		$conditions['Appointment']['is_deleted'] ='0';
		$conditions['Appointment']['location_id'] =$this->Session->read('locationid');	
	
		$conditions = $this->postConditions($conditions);
	
		$this->paginate = array(
				'limit' => Configure::read('number_of_rows'),
				'conditions' =>$conditions,
				'group'=>array('Patient.lookup_name'),
				'fields'=>array('Patient.lookup_name','Person.dob','Person.sex','DoctorProfile.doctor_name','DoctorProfile.user_id','Appointment.status','Appointment.date')
		);
	
		$data = $this->paginate('Person');			
		ksort($data);
		$getDataCount=count($data);
		$this->set('getDataCount', $getDataCount);
		$this->set('data', $data);
		
		$this->User->bindModel(array(
				'hasOne' => array('DoctorProfile'=>array('foreignKey'=>'user_id'))));		
		$details =  $this->User->find('all',array('fields'=>array('User.full_name','User.id'),'conditions'=>array('Role.name'=>Configure::read("doctorLabel"),
				'User.location_id'=>$this->Session->read('locationid'),'User.is_active'=>1,'DoctorProfile.is_deleted'=>0,'DoctorProfile.is_registrar'=>0, 'User.is_deleted'=>0,'OR'=>array('User.is_doctor'=>1,'DoctorProfile.is_opd_allow'=>'1')),
				'order'=>array('User.first_name Asc')));
		$return_arr =array();
		
		foreach($details as $key =>$value){
			foreach($details[$key] as $lastnode){
				$return_arr[$lastnode['id']]  =  $lastnode['full_name'] ;
			}
		}
		$this->set('doctors',$return_arr);
		$this->set('queryString',$this->request->query);
		}
	}
	public function total_patient_from_referral_doctor(){
		$this->layout = 'advance';
		$this->uses = array('Person');
		$this->Person->bindModel(array('belongsTo' => array(
				'Patient' =>array('foreignKey'=>false, 'conditions' => array('Patient.person_id=Person.id'),'type'=>'Inner'),
				'Consultant' =>array('foreignKey'=>false, 'conditions' => array('Consultant.id=Patient.consultant_id')),
				'Appointment' =>array('foreignKey'=>false, 'conditions' => array('Appointment.patient_id=Patient.id')),
		)),false);
		if($this->request->query['from_date']!=''){
			$this->request->query['from_date'] = $this->DateFormat->formatDate2STDForReport($this->request->query['from_date'],Configure::read('date_format'))." 00:00:00";
			$this->request->query['to_date'] = $this->DateFormat->formatDate2STDForReport($this->request->query['to_date'],Configure::read('date_format'))." 23:59:59";
			$conditions['Patient'] = array('create_time BETWEEN ? AND ?'=> array($this->request->query['from_date'],$this->request->query['to_date']));
		}
		if(!empty($this->request->query['ref_doc_name'])){
			$getExplodeName=explode('-',$this->request->query['ref_doc_name']);
			$conditions['Consultant.first_name like '] = "%".trim($getExplodeName[0])."%" ;
			$conditions['Consultant.last_name like '] = "%".trim($getExplodeName[1])."%" ;
			$conditions['Consultant']['id'] =$this->request->query['ref_doc_id'];
		}else {
        // Agar search nahi kiya toh sabhi consultants ko include karne ki condition
        $conditions['Consultant.id IS NOT NULL'] = null;
    }
	
	
// 		$conditions['Patient']['consultant_id !='] = '';
        $conditions['Patient']['consultant_id !='] = null;
		$conditions['Patient']['is_deleted'] ='0';
		$conditions['Appointment']['status'] =array('Arrived','No-Show');
		$conditions['Appointment']['is_deleted'] ='0';
		$conditions['Appointment']['location_id'] =$this->Session->read('locationid');
		$conditions = $this->postConditions($conditions);
// 		debug($conditions);
		$this->paginate = array(
				'limit' => Configure::read('number_of_rows'),
				'conditions' =>$conditions,
				'group'=>array('Patient.lookup_name'),
				'fields'=>array('Patient.lookup_name','Person.dob','Person.admission_type','Person.sex','Consultant.first_name','Consultant.last_name','Consultant.mobile','Appointment.status','Appointment.date')
		);
	
		$data = $this->paginate('Person');
// 		debug($data);exit;
		ksort($data);
		$getDataCount=count($data);		
		$this->set('getDataCount', $getDataCount);
		$this->set('data', $data);
		$this->set('queryString',$this->request->query);
	}





	public function send_to_msg($id=null,$type=null){
		$this->uses = array('Patient');
		///BOF-Mahalaxmi-For send SMS to Physician And Patient
		$getEnableFeatureChk=$this->Session->read('sms_feature_chk');
		if($getEnableFeatureChk=='1'){
			$this->Patient->sendToSmsPhysician($id,'Reg');
			$this->Patient->sendToSmsPatient($id,'Reg');
		}
		///EOF-Mahalaxmi-For send SMS to Physician And Patient
	}

	public function overstay_customers()
	{ $this->layout ='Advance';
		$this->uses = array('Patient');
		//$tariffID=$this->TariffStandard->getTariffStandardID("Mahindra");
		$this->Patient->unBindModel(array(
				'hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));

		$this->Patient->bindModel(array('belongsTo' => array(
				'Person'=>array('foreignKey'=>false,'conditions'=>array('Person.id=Patient.person_id')),
				/* 'FinalBilling'=>array('type'=>'INNER','foreignKey'=>false,'conditions'=>array('FinalBilling.patient_id=Patient.id','FinalBilling.bill_uploading_date NOT'=>NULL)),
	 */	)),false);

		
		$conditions=array(/* 'Patient.is_discharge'=>'1', */'Patient.location_id'=>$this->Session->read('locationid'),'Patient.admission_type'=>'IPD');
 
		
       if(!empty($this->request->query)){
       	
	       	if(!empty($this->request->query['lookup_name'])){
	       		$conditions['Patient.lookup_name'] = $this->request->query['lookup_name'];
	       	}	
			if(!empty($this->request->query['from'])){
				$from = $this->DateFormat->formatDate2STDForReport($this->request->query['from'],Configure::read('date_format'))." 00:00:00";

			}
			if(!empty($this->request->query['to'])){
				$to = $this->DateFormat->formatDate2STDForReport($this->request->query['to'],Configure::read('date_format'))." 23:59:59";
			}
				
			if($to)
				$conditions['Patient.form_received_on <='] = $to;
			if($from)
				$conditions['Patient.form_received_on >='] = $from;
		}
		
		$this->paginate = array(
				'limit' => 15,
				'order' => array('Patient.form_received_on' => 'desc'),
				'fields'=>array('Patient.id','Patient.lookup_name','Patient.admission_id','Patient.form_received_on','Patient.discharge_date','Patient.discharge_date',
					'Person.age','Person.sex'	),
				'conditions' =>$conditions,'group'=>array('Patient.id'));
		

		$result=$this->paginate('Patient');
		
		$days=$this->request->query['days'];
		//debug($days);
		if(!empty($days))
		{ 
			foreach($result as $key =>$value)
			{
				
				if(!empty($value['Patient']['discharge_date']))
				{
					//echo $new_date[$key] = $value['Patient']['discharge_date'] - $value['Patient']['form_received_on'];
					//echo $value['Patient']['discharge_date'];
					$new_day = $this->DateFormat->dateDiff($value['Patient']['form_received_on'],$value['Patient']['discharge_date']) ;
					$new_day = $new_day->days;
					if($new_day >= $days)
					{
						$val[$key] = $value;
					}
				}else 
				  {
				  	$new_day = $this->DateFormat->dateDiff($value['Patient']['form_received_on'],date('Y-m-d')) ;
				  	$new_day = $new_day->days;
				  	if($new_day >= $days)
				  	{
				  		$val[$key] = $value;
				  	}
				  	
				  }
				
			}
			$result = $val;
		}
		
		//debug($result);
		
		$this->set('results',$result,'days','$days');
		//if($this->request->query) $this->render('ajax_mahindra_report');
		}
	

		
		public function overstay_customers_xls()
		{

			$this->uses = array('Patient');
			$this->autoRender = false;
			//$tariffID=$this->TariffStandard->getTariffStandardID("Mahindra");
			$this->Patient->unBindModel(array(
					'hasMany' => array('PharmacySalesBill','InventoryPharmacySalesReturn')));
			
			$this->Patient->bindModel(array('belongsTo' => array(
					'Person'=>array('foreignKey'=>false,'conditions'=>array('Person.id=Patient.person_id')),
					/* 'FinalBilling'=>array('type'=>'INNER','foreignKey'=>false,'conditions'=>array('FinalBilling.patient_id=Patient.id','FinalBilling.bill_uploading_date NOT'=>NULL)),
					 */	)),false);
		
			
			$conditions=array('Patient.is_discharge'=>'1','Patient.location_id'=>$this->Session->read('locationid'),'Patient.admission_type'=>'IPD');
			
			
			if(!empty($this->request->data)){
			
				if(!empty($this->request->data['lookup_name'])){
					$conditions['Patient.lookup_name'] = $this->request->data['lookup_name'];
				}
				if(!empty($this->request->data['from'])){
					$from = $this->DateFormat->formatDate2STDForReport($this->request->data['from'],Configure::read('date_format'))." 00:00:00";
			
				}
				if(!empty($this->request->data['to'])){
					$to = $this->DateFormat->formatDate2STDForReport($this->request->data['to'],Configure::read('date_format'))." 23:59:59";
				}
			
				if($to)
					$conditions['Patient.form_received_on <='] = $to;
				if($from)
					$conditions['Patient.form_received_on >='] = $from;
			}
			
			$result=$this->Patient->find(all,array(
					'order' => array('Patient.form_received_on' => 'desc'),
					'fields'=>array('Patient.id','Patient.lookup_name','Patient.admission_id','Patient.form_received_on','Patient.discharge_date','Patient.discharge_date',
							'Person.age','Person.sex'	),
					'conditions' =>$conditions,'group'=>array('Patient.id')));
			
			
			$days=$this->request->query['days'];
			//debug($days);
			if(!empty($days))
			{
				foreach($result as $key =>$value)
				{
			
					if(!empty($value['Patient']['discharge_date']))
					{
						//echo $new_date[$key] = $value['Patient']['discharge_date'] - $value['Patient']['form_received_on'];
						echo $value['Patient']['discharge_date'];
						$new_day = $this->DateFormat->dateDiff($value['Patient']['form_received_on'],$value['Patient']['discharge_date']) ;
						$new_day = $new_day->days;
						if($new_day == $days)
						{
							$val[$key] = $value;
						}
					}
			
				}
				$result = $val;
			}
			
			//debug($result);
			
			$this->set('results',$result,'days','$days');
			$this->render('overstay_customers_xls',false);
			}
			
			
	/***
	 * Store/Pharmacy 9 reports 
	 */
	public function daily_sales_collection(){
	 
		$this->layout = 'advance';
		$this->uses = array("PharmacySalesBill","InventoryPharmacySalesReturn","PharmacyItem","PharmacySalesBillDetail","Initial","User","Patient",'StoreLocation');
	
		$this->InventoryPharmacySalesReturn->bindModel(array(
				"hasOne"=>array(
						"InventoryPharmacySalesReturnDetail"=>array('foreignKey' => false,'conditions'=>array('InventoryPharmacySalesReturn.id = InventoryPharmacySalesReturnDetail.inventory_pharmacy_sales_return_id'))
				)));
		
		/***
		 * write false for recursive function. 
		*/
		$this->PharmacySalesBill->bindModel(array(
				"belongsTo"=>array(
						"User"=>array("foreignKey"=>"created_by"),
						"InventoryPharmacySalesReturn"=>array('foreignKey' => false,'conditions'=>array('InventoryPharmacySalesReturn.patient_id = PharmacySalesBill.patient_id' ))
				)
		),false);
		
		$location_id = $this->StoreLocation->find('list',array('fields'=>array('StoreLocation.id','StoreLocation.name')));
		
		$from = $this->request->data['dateFrom']; 
		$to =   $this->request->data['dateTo'];
		$username = $this->request->data['user_name'];
		$visitType = $this->request->data['visit_type']; 
		$department = $this->request->data['department'];
		
		if($this->request->data){
		
			if(!empty($to) && !empty($from)){
				$from = $this->DateFormat->formatDate2STDForReport($this->request->data['dateFrom'],Configure::read('date_format'))." 00:00:00";
				$to = $this->DateFormat->formatDate2STDForReport($this->request->data['dateTo'],Configure::read('date_format'))." 23:59:59";
				
				$conditions = array('PharmacySalesBill.create_time <=' => $to, 'PharmacySalesBill.create_time >=' => $from,'PharmacySalesBill.location_id'=>$this->Session->read('locationid'));
			}else{
				$conditions =array('PharmacySalesBill.location_id'=>$this->Session->read('locationid')) ;
			}
			if(!empty($username)){
				$names = explode(" ",$username);
				$f_name = $names[0];
				$l_name = $names[1];
				$conditions = array('User.first_name LIKE'=> "%".$f_name."%",'User.last_name LIKE'=> "%".$l_name."%");
			}	
			if(!empty($visitType)){
				if($visitType=='IPD'){
					$conditions = array('Patient.admission_type = "IPD"');
				}elseif ($visitType=='OPD'){
					$conditions = array('Patient.admission_type = "OPD"');
				}elseif ($visitType=='Customer'){
					$conditions = array('PharmacySalesBill.customer_name != "null"');
				}
			}
			$this->paginate = array(
					'limit' => 15,
					'fields'=>array('PharmacySalesBill.*','InventoryPharmacySalesReturn.*','User.username','User.first_name','User.last_name',
							'Patient.lookup_name','Patient.admission_id','Patient.admission_type'),
					'conditions' =>$conditions);
			
			
			
			/* 	$record = $this->PharmacySalesBill->find('all',array('fields'=>array('PharmacySalesBill.*','InventoryPharmacySalesReturn.*','User.username','User.first_name','User.last_name',
			 'Patient.lookup_name','Patient.admission_id','Patient.admission_type'),'conditions'=>$conditions,array('conditions'=>'PharmacySalesBill.patient_id = null'))
			
			); */
			$record=$this->paginate('PharmacySalesBill');
			
			$this->set('record',$record);
		}
		$this->set('location_id',$location_id);
		
	}

	
	
	public function daily_sales_collection_xls(){
	
		$this->layout = 'advance';
		$this->uses = array("PharmacySalesBill","InventoryPharmacySalesReturn","PharmacyItem","PharmacySalesBillDetail","Initial","User","Patient");
	
		$this->InventoryPharmacySalesReturn->bindModel(array(
				"hasOne"=>array(
						"InventoryPharmacySalesReturnDetail"=>array('foreignKey' => false,'conditions'=>array('InventoryPharmacySalesReturn.id = InventoryPharmacySalesReturnDetail.inventory_pharmacy_sales_return_id'))
				)));
		$this->PharmacySalesBill->bindModel(array(
				"belongsTo"=>array(
						"User"=>array("foreignKey"=>"created_by"),
						"InventoryPharmacySalesReturn"=>array('foreignKey' => false,'conditions'=>array('InventoryPharmacySalesReturn.patient_id = PharmacySalesBill.patient_id' ))
				)
		));
		//$name=trim($this->request->data['PharmacySalesBill']['user_name']);
	
		$from = $this->request->data['dateFrom'];
		$to =   $this->request->data['dateTo'];
		$username = $this->request->data['user_name'];
		$visitType = $this->request->data['visit_type'];
	
	
	
		if(!empty($to) && !empty($from)){
			$from = $this->DateFormat->formatDate2STDForReport($this->request->data['dateFrom'],Configure::read('date_format'))." 00:00:00";
			$to = $this->DateFormat->formatDate2STDForReport($this->request->data['dateTo'],Configure::read('date_format'))." 23:59:59";
				
			$conditions = array('PharmacySalesBill.create_time <=' => $to, 'PharmacySalesBill.create_time >=' => $from,'PharmacySalesBill.location_id'=>$this->Session->read('locationid'));
		}else{
			$conditions =array('PharmacySalesBill.location_id'=>$this->Session->read('locationid')) ;
		}
		if(!empty($username)){
			$names = explode(" ",$username);
			$f_name = $names[0];
			$l_name = $names[1];
			$conditions = array('User.first_name LIKE'=> "%".$f_name."%",'User.last_name LIKE'=> "%".$l_name."%");
		}
		if(!empty($visitType)){
			if($visitType=='IPD'){
				$conditions = array('Patient.admission_type = "IPD"');
			}elseif ($visitType=='OPD'){
				$conditions = array('Patient.admission_type = "OPD"');
			}elseif ($visitType=='Customer'){
				$conditions = array('PharmacySalesBill.customer_name != "null"');
			}
		}
	
		$record = $this->PharmacySalesBill->find('all',array('fields'=>array('PharmacySalesBill.*','InventoryPharmacySalesReturn.*','User.username','User.first_name','User.last_name',
				'Patient.lookup_name','Patient.admission_id','Patient.admission_type'),'conditions'=>$conditions,array('conditions'=>'PharmacySalesBill.patient_id = null'))
	
		);
	
		$this->set('record',$record);
		$this->render('daily_sales_collection_xls',false);
	}
	
	public function current_stock(){
		
		$this->layout="advance";
		$this->uses=array('Product','Stores','PurchaseOrderItem','StoreLocation','StockMaintenance','StockMaintenanceDetail');
		
		$this->Product->bindModel(array(
				"hasOne"=>array(
						"PurchaseOrderItem"=>array('foreignKey' => false,'conditions'=>array('PurchaseOrderItem.product_id = Product.id')),
						"StockMaintenanceDetail"=>array('foreignKey' => false,'conditions'=>array('StockMaintenanceDetail.product_id = Product.id'))
				)),false);
		
		$location_id = $this->StoreLocation->find('list',array('fields'=>array('StoreLocation.id','StoreLocation.name')));
		
		if($this->request->data){
		$department = $this->request->data['department'];
		$item_name=$this->request->data['item_name']; 
		
		if($department){
			$data=$this->StockMaintenance->find('first',array('fields'=>array('StockMaintenance.id'),
					'conditions'=>array('StockMaintenance.store_location_id' => $department )));
			
			$conditions['StockMaintenanceDetail.stock_maintenance_id']=$data['StockMaintenance']['id']; 
			
		}
		
		 if(!empty($item_name)){
			$conditions['StockMaintenanceDetail.product_name'] = $item_name;
		}
		
		
		$this->paginate = array(
				'limit' => 15,
				'fields'=>array('Product.name','Product.reorder_level','Product.maximum','PurchaseOrderItem.stock_available','PurchaseOrderItem.batch_number',
				'PurchaseOrderItem.expiry_date','PurchaseOrderItem.purchase_price','PurchaseOrderItem.mrp','PurchaseOrderItem.amount','StockMaintenanceDetail.*'),
				'conditions' =>$conditions); 
		
		/* $record = $this->Product->find('all',array('fields'=>array('Product.name','PurchaseOrderItem.stock_available','PurchaseOrderItem.batch_number',
				'PurchaseOrderItem.expiry_date','PurchaseOrderItem.purchase_price','PurchaseOrderItem.mrp','PurchaseOrderItem.amount'))); */
		
		$record = $this->paginate('Product');
		
		$this->set('record',$record);
		}
		$this->set('location_id',$location_id);
	}
	
	public function current_stock_xls(){
		
		$this->layout="advance";
		$this->uses=array('Product','Stores','PurchaseOrderItem');
		
		$this->Product->bindModel(array(
				"hasOne"=>array(
						"PurchaseOrderItem"=>array('foreignKey' => false,'conditions'=>array('PurchaseOrderItem.product_id = Product.id'))
				)),false);
		
		$item_name=$this->request->data['item_name']; 
		
		if(!empty($item_name)){
			$conditions['Product.name'] = $item_name;
		}
		
		
		$this->paginate = array(
				'limit' => 15,
				'fields'=>array('Product.name','Product.reorder_level','Product.maximum','PurchaseOrderItem.stock_available','PurchaseOrderItem.batch_number',
				'PurchaseOrderItem.expiry_date','PurchaseOrderItem.purchase_price','PurchaseOrderItem.mrp','PurchaseOrderItem.amount'),
				'conditions' =>$conditions);
		
		$record = $this->paginate('Product');
		
		$this->set('record',$record);
		$this->render('current_stock_xls',false);
		
	}
	
	public function stock_register(){
		$this->uses = array("StoreLocation","Location");
		$this->layout="advance";
		
		$roleId = $this->Session->read('roleid');
		
		$returnArray = $this->StoreLocation->getAllLocationsArray($roleId);
		$this->set('department',$returnArray);
		
		$allStore = $this->StoreLocation->find('list',array('conditions'=>array('StoreLocation.is_deleted'=>0),'fields'=>array('StoreLocation.id','StoreLocation.code_name')));
		
		!empty($this->request->query)?$this->request->data = $this->request->query:'';
		
		if(!empty($this->request->data)){ 
			
			$department = $this->request->data['department'];  
			
			if(!empty($this->request->data['dateFrom'])) {
				$fromDate = $this->DateFormat->formatDate2STDForReport($this->request->data['dateFrom'],Configure::read('date_format'))." 00:00:00";
			}else{
				$fromDate = date("Y-m-d")." 00:00:00";	
			}
			
			if(!empty($this->request->data['dateTo'])) {
				$toDate = $this->DateFormat->formatDate2STDForReport($this->request->data['dateTo'],Configure::read('date_format'))." 23:59:59";
			}else{
				$toDate = date("Y-m-d")." 23:59:59";
			}
			
			if(array_search(Configure::read('centralStoreCode'), $allStore) == $department ){
				 
				//search from central Store  
				$conditions['Product.id'] = $this->request->data['product_id'];
				$displayArray = $this->getProductStockRegister($conditions,$department);	//function to get the product
				$currentStock = $this->getCurrentStock("Product",$this->request->data['product_id']);
			}
			else if(array_search(Configure::read('pharmacyCode'), $allStore) == $department ){
				//search from pharmacy    
				$conditions['Product.id'] = $this->request->data['product_id'];
				$conditions['PharmacyItem.location_id'] = $this->Session->read('locationid');
				$displayArray = $this->getPharmacyStockRegister($conditions,$department);	//function to get the product
				$currentStock = $this->getCurrentStock("PharmacyItem",$this->request->data['product_id']);
			} 
			
			$sorted = $this->array_orderby($displayArray, 'create_time', SORT_DESC);		//sort by date
			//$sorted = $this->array_orderby($displayArray, 'create_time', SORT_DESC, 'type', SORT_ASC); 
			
			$closingStock = $currentStock; 
			//loop to create the opening stock
			$inStore = array("GRN","INDENT","SALES RETURN","ADJUSTED ADD","ISSUED RETURNED");
			$outStore = array("SALES","ISSUED","ADJUSTED MINUS","RETURNED");
			
			foreach($sorted as $key=>$val){
				$val['qty'] = $val['qty'] * $val['pack'];
				if(strtotime($val['create_time']) >= strtotime($toDate)){ 
					if(in_array($val['type'],$inStore)){
						$closingStock -= $val['qty'];
					}else if(in_array($val['type'],$outStore)){
						$closingStock += $val['qty'];
					}  
 				} 
			} 
			 
			//loop to display the result according to from and to date
			foreach($sorted as $key => $val){  
				$val['qty'] = $val['qty'] * $val['pack'];
				if(strtotime($val['create_time']) >= strtotime($fromDate) && strtotime($val['create_time']) <= strtotime($toDate)){
					$returnData[$key] = $val;    
					$returnData[$key]['closing_stock'] = $closingStock;
					if(in_array($val['type'],$inStore)){
						$closingStock = $closingStock - $val['qty'];
					}elseif(in_array($val['type'],$outStore)){
						$closingStock = $closingStock + $val['qty'];
					}
					$returnData[$key]['opening_stock'] = $closingStock; 
				}
			}   
			
			$this->set('record',array_reverse($returnData));  
			$this->set(array('thisData'=>$this->request->data,'to'=>$toDate,'from'=>$fromDate)); 
			//generate excel report
			if(!empty($this->request->data['excel'])){
				$this->render('stock_register_xls',false);
			}
		} 
	}
	
	//function to get CurrentStock
	public function getCurrentStock($model,$id){
		$this->uses = array("Product","PharmacyItem","OtPharmacyItem","PharmacyItemRate");
		$field = array();
		if($model == "Product"){
			$this->Product->recursive = -1;
			$prodData = $this->Product->find('first',array('fields'=>array('Product.quantity'),'conditions'=>array('Product.id'=>$id)));
			return $prodData['Product']['quantity'];
		}elseif($model == "PharmacyItem"){ 
		  	$this->PharmacyItemRate->bindModel(array(
				'belongsTo'=>array(
					'PharmacyItem'=>array(
						'foreignKey'=>'item_id',
						'recursive'=> -1,
						'type'=>'inner'),
					'Product'=>array(
						'foreignKey'=>false,
						'type'=>'inner',
						'recursive'=> -1, 
						'conditions'=>array(
							'PharmacyItem.drug_id = Product.id'))
					)));
			$pharData = $this->PharmacyItemRate->find('first',array('fields'=>array(
				'SUM(PharmacyItemRate.stock) as totStock','PharmacyItem.pack',
				'SUM(PharmacyItemRate.loose_stock) as totLoose'),
			'conditions'=>array('Product.id'=>$id)));  
			return ($pharData['0']['totStock'] * $pharData['PharmacyItem']['pack']) + $pharData['0']['totLoose'];
		}elseif($model == "OtPharmacyItem"){
			$this->OtPharmacyItem->recursive = -1;
			$otPharData = $this->OtPharmacyItem->find('first',array('fields'=>array('OtPharmacyItem.stock'),'conditions'=>array('OtPharmacyItem.product_id'=>$id)));
			return $otPharData['OtPharmacyItem']['stock'];
		}
	}
	
	
	//function to get the detials of indent and GRN of any item in products items
	function getProductStockRegister($conditions,$department){
	
		//For GRN
		$purchaseList = $this->getProductGRN($conditions,$department);
		$this->Product->unbindModel(array('belongsTo'=>array('PurchaseOrder','PurchaseOrderItem','InventorySupplier')));
		//For Requisition
		$issuedList = $this->getProductIssued($conditions,$department);
		$this->Product->unbindModel(array('belongsTo'=>array('StoreRequisitionParticular','StoreRequisition','StoreLocation')));
		//For Requisition Return
		$returnedList = $this->getProductReturnList($conditions,$department);
		$this->Product->unbindModel(array('belongsTo'=>array('StoreRequisitionParticular','StoreRequisition','StoreLocation')));
		//adjusted surplus
		$adjustedSurplusList = $this->adjustedList($conditions,$department,'surplus');
		//adjusted surminus
		$adjustedSurminusList = $this->adjustedList($conditions,$department,'surminus');
	
		$displayArray = array();
	
		foreach($purchaseList as $key => $val){
			if(!empty($val['PurchaseOrderItem']['quantity_received'])){
				$displayArray[] = array(
						'name' => $val['Product']['name'],
						'batch_number' => $val['PurchaseOrderItem']['batch_number'],
						'qty' => $val['PurchaseOrderItem']['quantity_received']+$val['PurchaseOrderItem']['free'],
						'create_time' => $val['PurchaseOrderItem']['received_date'],
						'type' => "GRN",
						'patient_name' => $val['InventorySupplier']['name']
				);
			}
		}
	
		foreach($issuedList as $key => $val){
			if(!empty($val['StoreRequisitionParticular']['issued_qty'])){
				$displayArray[] = array(
						'name' => $val['Product']['name'],
						'batch_number' =>  $val['StoreRequisitionParticular']['batch'],
						'qty' => $val['StoreRequisitionParticular']['issued_qty'],
						'create_time' => $val['StoreRequisitionParticular']['created'],
						'type' => "ISSUED",
						'patient_name' => $val['StoreLocation']['name']
				);
			}
		}
	
		foreach($returnedList as $key => $val){
			if(!empty($val['StoreRequisitionParticular']['returned_qty'])){
				$displayArray[] = array(
						'name' => $val['Product']['name'],
						'batch_number' =>  $val['StoreRequisitionParticular']['batch'],
						'qty' => $val['StoreRequisitionParticular']['returned_qty'],
						'create_time' => $val['StoreRequisitionParticular']['returned_date'],
						'type' => "ISSUED RETURNED",
						'patient_name' => $val['StoreLocation']['name']
				);
			}
		}
	
		foreach($adjustedSurplusList as $key => $val){
			if(!empty($val['StockAdjustment']['sur_plus'])){
				$displayArray[] = array(
						'name' => $val['Product']['name'],
						'batch_number' =>  $val['StockAdjustment']['batch_number'],
						'qty' => $val['StockAdjustment']['sur_plus'],
						'create_time' => $val['StockAdjustment']['created'],
						'type' => "ADJUSTED ADD",
						'patient_name' => $val[0]['name']
				);
			}
		}
	
		foreach($adjustedSurminusList as $key => $val){
			if(!empty($val['StockAdjustment']['sur_minus'])){
				$displayArray[] = array(
						'name' => $val['Product']['name'],
						'batch_number' =>  $val['StockAdjustment']['batch_number'],
						'qty' => $val['StockAdjustment']['sur_minus'],
						'create_time' => $val['StockAdjustment']['created'],
						'type' => "ADJUSTED MINUS",
						'patient_name' => $val[0]['name']
				);
			}
		}
	
		return $displayArray;
	}	//EOF getProductStockRegister()
	
	
	//function to sort by swapnil
	public function array_orderby()
	{
		$args = func_get_args();
		$data = array_shift($args);
		foreach($args as $n => $field) {
			if(is_string($field)) {
				$tmp = array();
				foreach($data as $key => $row){
					$tmp[$key] = $row[$field];
					$args[$n] = $tmp;
				}
			}
		}
		$args[] = &$data;
		call_user_func_array('array_multisort', $args);
		return array_pop($args);
	}
	
	
	//function to get the detials from pharmacy by swapnil		-	11.05.2015
	function getPharmacyStockRegister($conditions,$department){
	
		//for GRN
		$purchaseList = $this->getProductGRN($conditions,$department); 
		$this->Product->unbindModel(array('belongsTo'=>array('PurchaseOrder','PurchaseOrderItem','InventorySupplier')));

		//issued
		$issuedList = $this->getPharmacyIssued($conditions,$department);
		$this->Product->unbindModel(array('belongsTo'=>array('StoreRequisitionParticular','StoreRequisition','StoreLocation')));
		//for REquisitions
		$indentList = $this->getProductIssued($conditions,null,$department);
		$this->Product->unBindModel(array('belongsTo'=>array('StoreRequisitionParticular','StoreRequisition','StoreLocation')));
		//For Requisition Return
		$issueReturnedList = $this->getProductReturnList($conditions,null,$department);
		$this->Product->unbindModel(array('belongsTo'=>array('StoreRequisitionParticular','StoreRequisition','StoreLocation')));
		//FOR Pharmacy Sales
		$soldList = $this->getPharmacySoldProduct($conditions);
		$this->Product->unbindModel(array('belongsTo'=>array('PharmacyItem','PharmacySalesBillDetail','PharmacySalesBill','Patient')));
		//FOR Pharmacy Returns
		$returnList = $this->getPharmacyReturnProduct($conditions);
		$this->Product->unbindModel(array('belongsTo'=>array('PharmacyItem','InventoryPharmacySalesReturnsDetail','InventoryPharmacySalesReturn','Patient')));
		//adjusted surplus
		$adjustedSurplusList = $this->adjustedList($conditions,$department,'surplus');
		//adjusted surminus
		$adjustedSurminusList = $this->adjustedList($conditions,$department,'surminus');
		$displayArray = array();
		$purchaseQty = 0; 
		foreach($purchaseList as $key => $val){
			if(!empty($val['PurchaseOrderItem']['quantity_received'])){
				$purchaseQty += $val['PurchaseOrderItem']['quantity_received'];
				$displayArray[] = array(
						'name' => $val['Product']['name'],
						'batch_number' => $val['PurchaseOrderItem']['batch_number'],
						'pack' => $val['Product']['pack'],
						'qty' => $val['PurchaseOrderItem']['quantity_received'],
						'create_time' => $val['PurchaseOrderItem']['received_date'],
						'type' => "GRN",
						'patient_name' => $val['InventorySupplier']['name']
				);
			}
		}
	
		$indentQty = 0;
		foreach($indentList as $key => $val){
			if(!empty($val['StoreRequisitionParticular']['issued_qty'])){
				$indentQty += $val['StoreRequisitionParticular']['issued_qty'];
				$displayArray[] = array(
						'name' => $val['Product']['name'],
						'batch_number' =>  $val['StoreRequisitionParticular']['batch'],
						'pack' => $val['Product']['pack'],
						'qty' => $val['StoreRequisitionParticular']['issued_qty'],
						'create_time' => $val['StoreRequisitionParticular']['created'],
						'type' => "INDENT",
						'patient_name' => $val['StoreLocation']['name']
				);
			}
		}
	
		foreach($issuedList as $key => $val){
			if(!empty($val['StoreRequisitionParticular']['issued_qty'])){
				$displayArray[] = array(
						'name' => $val['PharmacyItem']['name'],
						'batch_number' =>  $val['StoreRequisitionParticular']['batch'],
						'qty' => $val['StoreRequisitionParticular']['issued_qty'],
						'pack' => 1,
						'create_time' => $val['StoreRequisitionParticular']['created'],
						'type' => "ISSUED",
						'patient_name' => $val['StoreLocation']['name']
				);
			}
		}
		
		foreach($issueReturnedList as $key => $val){
			if(!empty($val['StoreRequisitionParticular']['returned_qty'])){
				$displayArray[] = array(
						'name' => $val['Product']['name'],
						'batch_number' =>  $val['StoreRequisitionParticular']['batch'],
						'pack' => $val['Product']['pack'],
						'qty' => $val['StoreRequisitionParticular']['returned_qty'],
						'create_time' => $val['StoreRequisitionParticular']['returned_date'],
						'type' => "RETURNED",
						'patient_name' => $val['StoreLocation']['name']
				);
			}
		}
		
		$soldQty = 0;
		foreach($soldList as $key => $val){
			if(!empty($val['PharmacySalesBillDetail']['qty'])){
				$soldQty += $val['PharmacySalesBillDetail']['qty'];
				$displayArray[] = array(
						'name' => $val['Product']['name'],
						'batch_number' => $val['PharmacySalesBillDetail']['batch_number'],
						'pack' => '1',
						'qty' => $val['PharmacySalesBillDetail']['qty'],
						'create_time' => $val['PharmacySalesBill']['create_time'],
						'type' => "SALES",
						'patient_name' => $val['Patient']['lookup_name'],
						'doctor_name' => $val['DoctorProfile']['doctor_name']
				);
			}
		}
	
		$returnQty = 0;
		foreach($returnList as $key => $val){
			if(!empty($val['InventoryPharmacySalesReturnsDetail']['qty'])){
				$returnQty += $val['InventoryPharmacySalesReturnsDetail']['qty'];
				$displayArray[] = array(
						'name' => $val['Product']['name'],
						'batch_number' => $val['InventoryPharmacySalesReturnsDetail']['batch_no'],
						'pack' => '1',
						'qty' => $val['InventoryPharmacySalesReturnsDetail']['qty'],
						'create_time' => $val['InventoryPharmacySalesReturn']['create_time'],
						'type' => "SALES RETURN",
						'patient_name' => $val['Patient']['lookup_name']
				);
			}
		}
	
		foreach($adjustedSurplusList as $key => $val){
			if(!empty($val['StockAdjustment']['sur_plus'])){
				$displayArray[] = array(
						'name' => $val['Product']['name'],
						'batch_number' =>  $val['StockAdjustment']['batch_number'],
						'qty' => $val['StockAdjustment']['sur_plus'],
						'pack' => '1',
						'create_time' => $val['StockAdjustment']['created'],
						'type' => "ADJUSTED ADD",
						'patient_name' => $val[0]['name']
				);
			}
		}
	
		foreach($adjustedSurminusList as $key => $val){
			if(!empty($val['StockAdjustment']['sur_minus'])){
				$displayArray[] = array(
						'name' => $val['Product']['name'],
						'batch_number' =>  $val['StockAdjustment']['batch_number'],
						'qty' => $val['StockAdjustment']['sur_minus'],
						'pack' => '1',
						'create_time' => $val['StockAdjustment']['created'],
						'type' => "ADJUSTED MINUS",
						'patient_name' => $val[0]['name']
				);
			}
		} 
		return $displayArray;
	}	//EOF getPharmacyStockRegister()
	
	//function to get the GRN's of any products
	public function getProductGRN($conditions,$department){
	
		$this->uses=array('Product','PurchaseOrder','PurchaseOrderItem','InventorySupplier');
	
		$this->Product->bindModel(array(
				'belongsTo'=>array(
	
						'PurchaseOrderItem'=>array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>'PurchaseOrderItem.product_id = Product.id'),
	
						'PurchaseOrder'=>array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>array('PurchaseOrderItem.purchase_order_id = PurchaseOrder.id')),
	
						'InventorySupplier'=>array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>array('PurchaseOrder.supplier_id = InventorySupplier.id')),
	
				)));
	
		$cond['Product.id'] = $conditions['Product.id'];
		$cond['PurchaseOrder.order_for'] = $department;
		$purchase = $this->Product->find('all',array('fields'=>array('Product.name','Product.pack','PurchaseOrderItem.batch_number','PurchaseOrderItem.received_date',
				'PurchaseOrderItem.quantity_received','PurchaseOrderItem.free','InventorySupplier.name'),
				'conditions'=>$cond,
				'group'=>'PurchaseOrderItem.id',
				//'order'=>array('PurchaseOrderItem.received_date'=>'DESC')
		));
		return $purchase;
	}

	//function to get the GRN's of any pharmacy
	public function getPharmacyGRN($openinDate,$fromDate,$department,$type) {
	
		$this->uses=array('Product','PurchaseOrder','PurchaseOrderItem','InventorySupplier');
	
		$this->Product->bindModel(array(
				'belongsTo'=>array(
	
						'PurchaseOrderItem'=>array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>'PurchaseOrderItem.product_id = Product.id'),

						'PharmacyItem'=>array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>'PharmacyItem.drug_id = Product.id'),
	
						'PurchaseOrder'=>array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>array('PurchaseOrderItem.purchase_order_id = PurchaseOrder.id')),
		)));

		$cond['PurchaseOrder.order_for'] = $department;
		if($type == 'opening'){
			$cond = array('AND'=>array('PurchaseOrderItem.received_date >='=>$openinDate),array('PurchaseOrderItem.received_date <'=>$fromDate)); /// it return data excluding $fromdate records...
			$group = array('PurchaseOrderItem.product_id');
			$field = 'sum(PurchaseOrderItem.quantity_received) as qty';
		}
		if($type == 'dayclosing'){
			$cond = array('PurchaseOrderItem.received_date BETWEEN ? AND ?'=>array($openinDate,$fromDate));
			$field = '(PurchaseOrderItem.quantity_received) as qty';
		}
	
		//$cond['PurchaseOrder.is_deleted'] = 0;
		$purchase = $this->Product->find('all',array('fields'=>array('Product.name','PurchaseOrderItem.product_id','PharmacyItem.opening_stock','PurchaseOrderItem.received_date',$field),
				'conditions'=>$cond,
				'group'=>$group,
				//'order'=>array('PurchaseOrderItem.received_date'=>'DESC')
		));

		return $purchase; 
	}// end getPharmacyGRN
	
	
	public function getProductIssued($conditions,$issued,$indent){
	
		$this->uses=array('Product','StoreRequisitionParticular','StoreRequisition','StoreLocation');
	
		if(!empty($indent)){
			$indentCond['StoreRequisition.requisition_for'] = $indent;
			$bindConditions[] = array('StoreRequisition.store_location_id = StoreLocation.id');
		}
		if(!empty($issued)){
			$indentCond['StoreRequisition.store_location_id'] = $issued;
			$bindConditions[] = array('StoreRequisition.requisition_for = StoreLocation.id');
		}
	
		$this->Product->bindModel(array(
				'belongsTo'=>array(
	
						'StoreRequisitionParticular'=>array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>'StoreRequisitionParticular.purchase_order_item_id = Product.id'),
	
						'StoreRequisition'=>array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>'StoreRequisitionParticular.store_requisition_detail_id = StoreRequisition.id'),
	
						'StoreLocation'=>array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>$bindConditions),
	
				)));
	
		$indentCond['Product.id'] = $conditions['Product.id'];
	
		//$indentCond['StoreRequisition.store_location_id'] = $issued;
		$indentData = $this->Product->find('all',array('fields'=>array('Product.name','Product.pack','StoreRequisitionParticular.issued_qty',
				'StoreRequisitionParticular.created','StoreLocation.name','StoreRequisitionParticular.transaction_details'),
				'conditions'=>$indentCond,
				'group'=>'StoreRequisitionParticular.id'
		));
	
		//for multiple batches issued
		foreach($indentData as $key => $value){
			$unserializeData = unserialize($value['StoreRequisitionParticular']['transaction_details']);
			$batch = array();
			foreach($unserializeData as $mkey => $val){
				$batch[] = $val['batch'];
			}
			$implodeBatch[$key] = implode(", ",$batch);
			$indentData[$key]['StoreRequisitionParticular']['batch'] = $implodeBatch[$key];
		}
		return $indentData;
	}
	
	//pharmacy Issued
	public function getPharmacyIssued($conditions,$issued,$indent){
	
		$this->uses=array('PharmacyItem','Product','StoreRequisitionParticular','StoreRequisition','StoreLocation');
	
		if(!empty($indent)){
			$indentCond['StoreRequisition.requisition_for'] = $indent;
			$bindConditions[] = array('StoreRequisition.store_location_id = StoreLocation.id');
		}
		if(!empty($issued)){
			$indentCond['StoreRequisition.store_location_id'] = $issued;
			$bindConditions[] = array('StoreRequisition.requisition_for = StoreLocation.id');
		}
	 
		$this->PharmacyItem->bindModel(array(
				'belongsTo'=>array(
						
						'Product'=>array(
								'foreignKey'=>false,
								'type'=>'inner',
								'conditions'=>'PharmacyItem.drug_id = Product.id'),
						
						'StoreRequisitionParticular'=>array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>'StoreRequisitionParticular.purchase_order_item_id = PharmacyItem.id'),
	
						'StoreRequisition'=>array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>'StoreRequisitionParticular.store_requisition_detail_id = StoreRequisition.id'),
	
						'StoreLocation'=>array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>$bindConditions),
	
				)));
	
		$indentCond['PharmacyItem.drug_id'] = $conditions['Product.id'];
	
		//$indentCond['StoreRequisition.store_location_id'] = $issued;
		$indentData = $this->PharmacyItem->find('all',array('fields'=>array('PharmacyItem.name','PharmacyItem.pack','StoreRequisitionParticular.issued_qty',
				'StoreRequisitionParticular.created','StoreLocation.name','StoreRequisitionParticular.transaction_details'),
				'conditions'=>$indentCond,
				'group'=>'StoreRequisitionParticular.id'
		));
		 
		//for multiple batches issued
		foreach($indentData as $key => $value){
			$unserializeData = unserialize($value['StoreRequisitionParticular']['transaction_details']);
			$batch = array();
			foreach($unserializeData as $mkey => $val){
				$batch[] = $val['batch'];
			}
			$implodeBatch[$key] = implode(", ",$batch);
			$indentData[$key]['StoreRequisitionParticular']['batch'] = $implodeBatch[$key];
		} 
		return $indentData;
	}
	
	//function to get requisition return list from various department
	public function getProductReturnList($conditions,$issued,$indent){
	
		$this->uses=array('Product','StoreRequisitionParticular','StoreRequisition','StoreLocation');
	
		if(!empty($indent)){
			$indentCond['StoreRequisition.requisition_for'] = $indent;
			$bindConditions[] = array('StoreRequisition.store_location_id = StoreLocation.id');
		}
		if(!empty($issued)){
			$indentCond['StoreRequisition.store_location_id'] = $issued;
			$bindConditions[] = array('StoreRequisition.requisition_for = StoreLocation.id');
		}
	
		$this->Product->bindModel(array(
				'belongsTo'=>array(
	
						'StoreRequisitionParticular'=>array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>'StoreRequisitionParticular.purchase_order_item_id = Product.id'),
	
						'StoreRequisition'=>array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>'StoreRequisitionParticular.store_requisition_detail_id = StoreRequisition.id'),
	
						'StoreLocation'=>array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>$bindConditions),
	
				)));
	
		$indentCond['Product.id'] = $conditions['Product.id'];
	
		//$indentCond['StoreRequisition.store_location_id'] = $issued;
		$indentData = $this->Product->find('all',array('fields'=>array('Product.name','Product.pack','StoreRequisitionParticular.returned_qty',
				'StoreRequisitionParticular.returned_date','StoreLocation.name','StoreRequisitionParticular.transaction_details'),
				'conditions'=>$indentCond,
				'group'=>'StoreRequisitionParticular.id'
		));
	
		//for multiple batches issued
		foreach($indentData as $key => $value){
			$unserializeData = unserialize($value['StoreRequisitionParticular']['transaction_details']);
			$batch = array();
			foreach($unserializeData as $mkey => $val){
				if(!empty($val['returnQty'])){
					$batch[] = $val['batch'];
				}
			}
			$implodeBatch[$key] = implode(", ",$batch);
			$indentData[$key]['StoreRequisitionParticular']['batch'] = $implodeBatch[$key];
		}
		return $indentData;
	}
	
	
	//function to return the list of surplus product of any department by swapnil  09.06.2015
	public function adjustedList($conditions,$department,$type){
		$this->uses = array("StockAdjustment","Product","User");
		$cond = array();
		$cond['StockAdjustment.product_id'] = $conditions['Product.id'];
		$cond['StockAdjustment.department_id'] = $department;
		if($type == "surplus"){
			$cond[] = 'StockAdjustment.sur_plus IS NOT NULL';
		}else{
			$cond[] = 'StockAdjustment.sur_minus IS NOT NULL';
		}
		$this->StockAdjustment->bindModel(array('belongsTo'=>array(
				'Product'=>array('foreignKey'=>'product_id'),
				'User'=>array('foreignKey'=>'created_by','fields'=>array('User.first_name','User.last_name')))));
		$data = $this->StockAdjustment->find('all',array('fields'=>array('CONCAT(User.first_name," ",User.last_name) as name','StockAdjustment.id','StockAdjustment.batch_number','StockAdjustment.sur_plus','StockAdjustment.sur_minus','StockAdjustment.created','Product.name'),'conditions'=>$cond));
		return $data;
	}
	
	public function getPharmacySoldProduct($conditions){
	
		$this->uses=array('Product','PharmacyItem','PharmacySalesBillDetail','PharmacySalesBill','Patient');
			
		$this->Product->bindModel(array(
				'belongsTo'=>array(
	
						'PharmacyItem'=>array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>'PharmacyItem.drug_id = Product.id'),
	
						'PharmacySalesBillDetail'=>array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>array('PharmacySalesBillDetail.item_id = PharmacyItem.id')),
						
						'PharmacySalesBill'=>array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>array('PharmacySalesBillDetail.pharmacy_sales_bill_id = PharmacySalesBill.id')),

						/* 'DoctorProfile'=>array(
								'foreignKey'=>false,
								'type'=>'inner',
								'conditions'=>array('PharmacySalesBill.doctor_id = DoctorProfile.user_id ')),*/
	
						'Patient' => array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>array('PharmacySalesBill.patient_id = Patient.id'))
				)));
	
		$soldRecord = $this->Product->find('all',array('fields'=>array('Product.name','PharmacyItem.pack','PharmacySalesBillDetail.batch_number',
					/*'DoctorProfile.doctor_name',*/
					'PharmacySalesBill.create_time','PharmacySalesBillDetail.qty','Patient.lookup_name'),
				'conditions'=>$conditions,'group'=>'PharmacySalesBillDetail.id'));
		 
		return $soldRecord;
	}
	
	
	public function getPharmacyReturnProduct($conditions){
	
		$this->uses=array('Product','PharmacyItem','InventoryPharmacySalesReturnsDetail','InventoryPharmacySalesReturn','Patient');
	
		$this->Product->bindModel(array(
				'belongsTo'=>array(
	
						'PharmacyItem'=>array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>'PharmacyItem.drug_id = Product.id'),
							
						'InventoryPharmacySalesReturnsDetail'=>array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>array('InventoryPharmacySalesReturnsDetail.item_id = PharmacyItem.id')),
	
						'InventoryPharmacySalesReturn'=>array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>array('InventoryPharmacySalesReturnsDetail.inventory_pharmacy_sales_return_id = InventoryPharmacySalesReturn.id')),
	
						'Patient' => array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>array('InventoryPharmacySalesReturn.patient_id = Patient.id'))
				)));
	
		$returnRecord = $this->Product->find('all',array('fields'=>array('Product.name','PharmacyItem.pack','InventoryPharmacySalesReturnsDetail.batch_no','InventoryPharmacySalesReturn.create_time','InventoryPharmacySalesReturnsDetail.qty','Patient.lookup_name'),
				'conditions'=>$conditions,'group'=>'InventoryPharmacySalesReturnsDetail.id'));
		return $returnRecord;
	}
	
	
	public function stock_register_xls(){
	
		$this->layout="advance";
		$this->uses=array('Product','Stores','PurchaseOrderItem');
	
		$this->Product->bindModel(array(
				"hasOne"=>array(
						"PurchaseOrderItem"=>array('foreignKey' => false,'conditions'=>array('PurchaseOrderItem.product_id = Product.id'))
				)),false);
	
		$record = $this->Product->find('all',array('fields'=>array('Product.name','PurchaseOrderItem.batch_number')));
	
	
		$this->set('record',$record);
		$this->render('stock_register_xls',false);
	}
	
	public function non_movable_stock(){
		$this->layout="advance";
		$this->uses=array('Product','PurchaseOrderItem','StoreLocation','StockMaintenance','StockMaintenanceDetail','PharmacyItem');
		
		$location_id=$this->StoreLocation->find('list',array('id, name'));
		$department=$this->request->data('department'); 
		/***
		 * code remaining for department wise search
		 */
		
		/* if($department){
			
		}
		$record=$this->PharmacyItem->find('all',array('fields'=>array('PharmacyItem.id','PharmacyItem.name')));
		 */
		
		$this->set('location_id',$location_id);
	}
	
	
	
	public function department_request(){
		$this->uses = array("StoreRequisitionParticular","StoreRequisition","StoreLocation");
		$this->layout="advance";
		
		!empty($this->request->query)?$this->request->data = $this->request->query:''; 
		
		if(!empty($this->request->data)){ 
				
			if(!empty($this->request->data['dateFrom'])) {
				$fromDate = $this->DateFormat->formatDate2STDForReport($this->request->data['dateFrom'],Configure::read('date_format'))." 00:00:00";
			}else{
				$fromDate = date("Y-m-d")." 00:00:00";
			}
				
			if(!empty($this->request->data['dateTo'])) {
				$toDate = $this->DateFormat->formatDate2STDForReport($this->request->data['dateTo'],Configure::read('date_format'))." 23:59:59";
			}else{
				$toDate = date("Y-m-d")." 23:59:59";
			}
			
			$conditions['StoreRequisitionParticular.created >=']=$fromDate;
			$conditions['StoreRequisitionParticular.created <=']=$toDate;
			
			$allStoreLocation = $this->StoreLocation->find('all',array('conditions'=>array('StoreLocation.is_deleted'=>0,'StoreLocation.code_name !='=>Configure::read('centralStoreCode'))));
			$pharmacyId= $this->StoreLocation->getIdbyCodeName(Configure::read("pharmacyCode")) ;
			$otPharmacyId = $this->StoreLocation->getIdbyCodeName(Configure::read("otpharmacycode")) ;
			foreach($allStoreLocation as $key => $value): 
				$returnArray[$key] = array();
				//if pharmacy
				if($value['StoreLocation']['id'] == $pharmacyId){
					$returnArray[$key] = $this->getPharmacyIndent($conditions,$value['StoreLocation']['id']);
				}else if($value['StoreLocation']['id'] == $otPharmacyId){
					$returnArray[$key] = $this->getOtPharmacyIndent($conditions,$value['StoreLocation']['id']);
				}else{
					$returnArray[$key] = $this->getOtherIndent($conditions,$value['StoreLocation']['id'],$value['StoreLocation']['name'],$pharmacyId,$otPharmacyId);
				} 
			endforeach; 
		}
		$this->set('record',$returnArray);
		$this->set(compact('fromDate','toDate'));
		if($this->request->data['action'] == "excel"){
			$this->layout = false;
			$this->render('department_request_xls');
		}
	}
	
	
	//get pharmacy Indent Details
	public function getPharmacyIndent($conditions,$pharmacyId){ 
		$this->uses = array("StoreRequisitionParticular","StoreRequisition");
		$this->StoreRequisitionParticular->unbindModel(array('belongsTo'=>array('Product','PurchaseOrderItem')));
	
		$this->StoreRequisitionParticular->bindModel(array(
				'belongsTo'=>array(
						'Product'=>array('foreignKey'=>'item_id','type'=>'INNER'),
						'ProductRate'=>array('foreignKey'=>false,'type'=>'INNER',
								'conditions'=>array('ProductRate.product_id = Product.id'))
				)
		));
	
		$data = $this->StoreRequisitionParticular->find('all',array(
				'fields'=>array('(StoreRequisitionParticular.issued_qty) as qty','ProductRate.mrp as mrp','ProductRate.purchase_price as purchase_price','(StoreRequisitionParticular.issued_qty * ProductRate.mrp) as amount'),
				'conditions'=>array('StoreRequisition.requisition_for'=>$pharmacyId,$conditions),
				'group'=>array('StoreRequisitionParticular.id')));
		 
		$returnArray['department'] = "Pharmacy";
		$qty = 0;
		$mrp = 0;
		$amount = 0;
		foreach($data as $mkey => $value):
			$returnArray['qty'] += $thisQty = $value['StoreRequisitionParticular']['qty'];
			$returnArray['mrp'] += $thisMrp = $value['ProductRate']['mrp'];
			$returnArray['purchase_price'] += $thisPurchasePrice = $value['ProductRate']['purchase_price'];
			$returnArray['price'] += $thisPrice = $thisQty * $thisPurchasePrice;
			$returnArray['amount'] += $thisAmount = $thisQty * $thisMrp;
		endforeach; 
		return $returnArray;
	}
	
	//get OT pharmacy Indent Details
	public function getOtPharmacyIndent($conditions,$pharmacyId){
		$this->uses = array("StoreRequisitionParticular","StoreRequisition",'OtPharmacyItem','OtPharmacyItemRate');
		$this->StoreRequisitionParticular->unbindModel(array('belongsTo'=>array('Product','PurchaseOrderItem')));
	
		$this->StoreRequisitionParticular->bindModel(array(
				'belongsTo'=>array(
						'OtPharmacyItem'=>array('foreignKey'=>'item_id','type'=>'INNER'),
						'OtPharmacyItemRate'=>array('foreignKey'=>false,'type'=>'INNER',
								'conditions'=>array('OtPharmacyItemRate.item_id = OtPharmacyItem.id'))
				)
		));
	
		$data = $this->StoreRequisitionParticular->find('all',array(
				'fields'=>array('(StoreRequisitionParticular.issued_qty) as qty','OtPharmacyItemRate.mrp as mrp','OtPharmacyItemRate.purchase_price as purchase_price','(StoreRequisitionParticular.issued_qty * OtPharmacyItemRate.mrp) as amount'),
				'conditions'=>array('StoreRequisition.requisition_for'=>$pharmacyId,$conditions),
				'group'=>array('StoreRequisitionParticular.id')));
	
		$returnArray['department'] = "OT Pharmacy";
		$qty = 0;
		$mrp = 0;
		$amount = 0;
		foreach($data as $mkey => $value):
		$returnArray['qty'] += $thisQty = $value['StoreRequisitionParticular']['qty'];
		$returnArray['mrp'] += $thisMrp = $value['OtPharmacyItemRate']['mrp'];
		$returnArray['purchase_price'] += $thisPurchasePrice = $value['OtPharmacyItemRate']['purchase_price'];
		$returnArray['price'] += $thisPrice = $thisQty * $thisPurchasePrice;
		$returnArray['amount'] += $thisAmount = $thisQty * $thisMrp;
		endforeach;
		return $returnArray;
	}
	
	//get OT pharmacy Indent Details
	public function getOtherIndent($conditions,$storeLocationIdb,$storeName,$pharmacyId,$otPharamacyId){
		$this->uses = array("StoreRequisitionParticular","StoreRequisition",'StoreLocation','PharmacyItem');
		$this->StoreRequisitionParticular->unbindModel(array('belongsTo'=>array('Product','PurchaseOrderItem')));

		$this->StoreRequisitionParticular->bindModel(array(
				'belongsTo'=>array(
						'PharmacyItem'=>array('foreignKey'=>'item_id','type'=>'INNER'),
						'PharmacyItemRate'=>array('foreignKey'=>false,'type'=>'INNER',
								'conditions'=>array('PharmacyItemRate.item_id = PharmacyItem.id'))
				)
		)); 
	
		$data = $this->StoreRequisitionParticular->find('all',array(
				'fields'=>array('(StoreRequisitionParticular.issued_qty) as qty','PharmacyItemRate.mrp as mrp','PharmacyItem.pack as pack','PharmacyItemRate.purchase_price as purchase_price','(StoreRequisitionParticular.issued_qty * PharmacyItemRate.mrp) as amount'),
				'conditions'=>array('StoreRequisition.requisition_for '=>$storeLocationIdb,$conditions),
				'group'=>array('StoreRequisitionParticular.id')));
	 
		$returnArray['department'] = $storeName;
		$qty = 0;
		$mrp = 0;
		$amount = 0;
		foreach($data as $mkey => $value):
			$returnArray['qty'] += $thisQty = $value['StoreRequisitionParticular']['qty'];
			$returnArray['mrp'] += $thisMrp = $value['PharmacyItemRate']['mrp']/$value['PharmacyItem']['pack'];
			$returnArray['purchase_price'] += $thisPurchasePrice = $value['PharmacyItemRate']['purchase_price']/$value['PharmacyItem']['pack'];
			$returnArray['price'] += $thisPrice = $thisQty * $thisPurchasePrice;
			$returnArray['amount'] += $thisAmount = $thisQty * $thisMrp;
		endforeach;
		return $returnArray;
	}
	
	public function indent_cost_report(){
		$this->layout="advance";
	
	
	}
	
	public function drug_sale_report(){
		$this->layout="advance";
	
	
	}
	
	public function purchase_analysis(){
		$this->layout="advance";
	
	
	}
	
	public function expiry_date(){
		$this->layout="advance";
		$this->uses=array('Product','PurchaseOrderItem','PurchaseOrder');
		
		$this->PurchaseOrderItem->bindModel(array(
									'belongsTo'=>array(
											'PurchaseOrder'=>array('foreignKey'=>'purchase_order_id'),
											'Product'=>array('foreignKey'=>'product_id'))));
		
		$record = $this->PurchaseOrderItem->find('all',array('limit'=>'20'));
		
		$this->set('record',$record);
	}
	/***
	 * End of 9 reports
	 */
	
	public function getDoctorCharges($days,$hospitalType,$tariffStandardId,$patientType='',$treatment_type=null){
		$this->loadModel('TariffAmount');
	
		
			$doctorRateData=$this->TariffAmount->find('all',array('conditions'=>array('tariff_list_id'=>2,
					'tariff_standard_id'=>$tariffStandardId)));
	foreach($doctorRateData as $docRate){
		if($hospitalType=='NABH'){
			$doctorRate[$docRate['TariffAmount']['tariff_standard_id']]=$docRate['TariffAmount']['nabh_charges'];
		}else{
			$doctorRate[$docRate['TariffAmount']['tariff_standard_id']]=$docRate['TariffAmount']['non_nabh_charges'];
		}
			
		$cost[$docRate['TariffAmount']['tariff_standard_id']]=$days*$doctorRate[$docRate['TariffAmount']['tariff_standard_id']];
	}
			
		return $cost;
	}
	
	
	public function getNursingCharges($days,$hospitalType,$tariffStandardId){
		$this->loadModel('TariffAmount');
		$nursingRateData=$this->TariffAmount->find('all',array('conditions'=>array('tariff_list_id'=>3,
				'tariff_standard_id'=>$tariffStandardId)));
		foreach($nursingRateData as $nurseRate)
		if($hospitalType=='NABH'){
			$nursingRate[$nurseRate['TariffAmount']['tariff_standard_id']]=$nurseRate['TariffAmount']['nabh_charges'];
		}else{
			$nursingRate[$nurseRate['TariffAmount']['tariff_standard_id']]=$nurseRate['TariffAmount']['non_nabh_charges'];
		}
		$cost[$nurseRate['TariffAmount']['tariff_standard_id']]=($days*$nursingRate[$nurseRate['TariffAmount']['tariff_standard_id']]);
			
		return $cost;
	}
	
	// Kanpur Reports- Leena
	public function admin_kanpur_reports()
	{
	
	}
	/**
	 * function to pharmacyExpiryReport
	 * @author Mahalaxmi
	 */
	public function pharmacyExpiryReport(){	
		$this->layout='advance';
		$this->uses=array('PharmacyItemRate','PharmacyItem');	
		$this->set('getLocName',$this->Session->read('location_name'));
		$this->set('getLocAdd1',$this->Session->read('location_address1'));
		$this->set('getLocAdd2',$this->Session->read('location_address2'));
		$this->set('location_zipcode',$this->Session->read('location_zipcode'));
		$this->set('location_country',$this->Session->read('location_country'));
		$flagRemaining=false; 

		if(!empty($this->request->data)){
			$conditions = array();
			if(!empty($this->request->data['PharmacySale']['from_date'])){ 
				$from_date = $this->DateFormat->formatDate2STDForReport($this->request->data['PharmacySale']['from_date'],Configure::read('date_format'));
				//$conditions = array('PharmacyItemRate.expiry_date BETWEEN ? AND ?'=> array(date("Y-m-d"), $this->request->data['PharmacySale']['expiry_date']),'PharmacyItemRate.is_deleted'=>0,'PharmacyItemRate.stock > 0 || PharmacyItemRate.loose_stock > 0','PharmacyItemRate.location_id'=>$this->Session->read('locationid'),'OR'=>array('PharmacyItemRate.expiry_date <>'=>null,'PharmacyItemRate.expiry_date <>'=>"0000-00-00"));
			}else{
				$from_date = date("Y-m-d");
				//$conditions = array('PharmacyItemRate.expiry_date <' => date("Y-m-d"),'OR'=>array('PharmacyItemRate.expiry_date <>'=>null,'PharmacyItemRate.expiry_date <>'=>"0000-00-00"),'PharmacyItemRate.is_deleted'=>0,'PharmacyItemRate.stock > 0 || PharmacyItemRate.loose_stock > 0','PharmacyItemRate.location_id'=>$this->Session->read('locationid')/*,'OR'=>array('PharmacyItemRate.expiry_date <>'=>null,'PharmacyItemRate.expiry_date <>'=>"0000-00-00")*/);
			}
			
			if(!empty($this->request->data['PharmacySale']['to_date'])){
				//$flagRemaining=true; ////For Greater Expiry Date from current date.
				$to_date =$this->DateFormat->formatDate2STDForReport($this->request->data['PharmacySale']['to_date'],Configure::read('date_format'));
			}else{
				$to_date = date("Y-m-d");
			}

			$conditions = array('PharmacyItemRate.stock > 0 || PharmacyItemRate.loose_stock > 0',
					'PharmacyItemRate.is_deleted'=>'0','PharmacyItem.is_deleted'=>'0','PharmacyItem.drug_id IS NOT NULL',
					'PharmacyItemRate.expiry_date IS NOT NULL','PharmacyItemRate.expiry_date IS NOT 0000-00-00');
			//$conditions = array('PharmacyItemRate.expiry_date BETWEEN ? AND ?'=> array(date("Y-m-d"), $this->request->data['PharmacySale']['expiry_date']),'PharmacyItemRate.is_deleted'=>0,'PharmacyItemRate.stock > 0 || PharmacyItemRate.loose_stock > 0','PharmacyItemRate.location_id'=>$this->Session->read('locationid'),'OR'=>array('PharmacyItemRate.expiry_date <>'=>null,'PharmacyItemRate.expiry_date <>'=>"0000-00-00"));
			$conditions = array("PharmacyItemRate.expiry_date BETWEEN ".'"'.$from_date.'"'." AND ".'"'.$to_date.'"');

				//$this->PharmacyItem->unbindModel(array('hasMany'=>array('InventoryPurchaseItemDetail'),'hasOne'=>array('PharmacyItemRate')));
				$this->PharmacyItemRate->bindModel(array('belongsTo'=>array(
						'PharmacyItem'=>array(
							'foreignKey'=>false,
							'type'=>'inner',
							'conditions'=>array('PharmacyItem.id=PharmacyItemRate.item_id'),
							'order'=>array('PharmacyItem.name'=>'ASC'),
							'group'=>array('PharmacyItemRate.item_id')
						))));
				$pharmacyItemDetails = $this->PharmacyItemRate->find('all',array(
					'fields'=>array('PharmacyItem.name','PharmacyItemRate.batch_number','PharmacyItemRate.expiry_date'),
					'conditions'=>array('OR'=>array('PharmacyItemRate.stock > 0','PharmacyItemRate.loose_stock > 0'),$conditions)
						)); 
				$this->set(array('pharmacyItemDetails'=>$pharmacyItemDetails,'flagRemaining'=>$flagRemaining));
			}

			if($this->request->data['PharmacySale']['format'] == "EXCEL"){				
				$this->layout = false;
				$this->render('pharmacy_expiry_report_excel');
			}else if($this->request->data['PharmacySale']['format'] == "PDF"){				
				$this->layout = false;
				$this->render('pharmacy_expiry_report_pdf');
			}
	}	
	/**
	 * function to pharmacyCurrentStockReport
	 * @author Mahalaxmi
	 */
	public function pharmacyCurrentStockReport(){
		$this->layout='advance';
		$this->uses=array('PharmacyItemRate','PharmacyItem');
		$this->set('getLocName',$this->Session->read('location_name'));
		$this->set('getLocAdd1',$this->Session->read('location_address1'));
		$this->set('getLocAdd2',$this->Session->read('location_address2'));
		$this->set('location_zipcode',$this->Session->read('location_zipcode'));
		$this->set('location_country',$this->Session->read('location_country'));
		$from=$this->DateFormat->formatDate2STDForReport(date('d/m/Y'),Configure::read('date_format'))." 00:00:00";
		
		if(!empty($this->request->data['PharmacySale']['from'])){
			$from=$this->DateFormat->formatDate2STDForReport($this->request->data['PharmacySale']['from'],Configure::read('date_format'))." 00:00:00";
			//$conditions=array('PharmacyItem.create_time <'=>$from);
			//$conditions = array('PharmacyItem.create_time BETWEEN ? AND ?'=> array($from,$to));
		}
		$conditions=array('OR'=>array('PharmacyItem.is_implant IS NULL','PharmacyItem.is_implant'=>0),'PharmacyItem.stock <>'=>0,'PharmacyItem.location_id'=>$this->Session->read('locationid'),'PharmacyItem.is_deleted'=>0,"PharmacyItemRate.expiry_date >"=>$from);
		
		$this->PharmacyItem->unbindModel(array('hasMany'=>array('InventoryPurchaseItemDetail'),'hasOne'=>array('PharmacyItemRate')));
		/*$this->PharmacyItemRate->bindModel(array('belongsTo'=>array(
				'PharmacyItem'=>array('foreignKey'=>false,'conditions'=>array('PharmacyItem.id=PharmacyItemRate.item_id','PharmacyItem.is_deleted'=>0,'PharmacyItem.location_id'=>$this->Session->read('locationid')),'order'=>array('PharmacyItem.name'=>'ASC')
				)),));*/
		$this->PharmacyItem->bindModel(array('hasOne'=>array(
				'PharmacyItemRate'=>array('type'=>'Inner','foreignKey'=>'item_id','conditions'=>array('PharmacyItemRate.stock <>'=>0,'PharmacyItemRate.is_deleted'=>0,'PharmacyItemRate.location_id'=>$this->Session->read('locationid'))
						)),));
		$pharmacyItemDetails = $this->PharmacyItem->find('all',array(
				'fields'=>array('PharmacyItem.name','PharmacyItemRate.batch_number','PharmacyItemRate.expiry_date','PharmacyItemRate.stock','PharmacyItemRate.loose_stock','PharmacyItem.pack','PharmacyItemRate.sale_price'),
				'conditions'=>$conditions,
				'order'=>array('PharmacyItem.name'=>'ASC')));
		
		$this->set(array('pharmacyItemDetails'=>$pharmacyItemDetails,'from'=>$from));
			
		if($this->request->data['PharmacySale']['format'] == "EXCEL"){
			$this->layout = false;
			$this->render('pharmacy_current_stock_report_excel');
		}else if($this->request->data['PharmacySale']['format'] == "PDF"){
			$this->layout = false;
			$this->render('pharmacy_current_stock_report_pdf');
		}
	}
	/**
	 * function to purchaseReport
	 * @author Mahalaxmi
	 */
	public function purchaseReport(){
		$this->layout='advance';
		$this->uses=array('PurchaseOrderItem','PharmacyItem','PurchaseOrder','PurchaseReturn','VatClass');
		$this->set('getLocName',$this->Session->read('location_name'));
		$this->set('getLocAdd1',$this->Session->read('location_address1'));
		$this->set('getLocAdd2',$this->Session->read('location_address2'));
		$this->set('location_zipcode',$this->Session->read('location_zipcode'));
		$this->set('location_country',$this->Session->read('location_country'));
		
		if(!empty($this->request->data['PharmacySale']['from'])){
			$this->request->data['PharmacySale']['from']=$this->DateFormat->formatDate2STDForReport($this->request->data['PharmacySale']['from'],Configure::read('date_format'))." 00:00:00";
			$this->request->data['PharmacySale']['to']=$this->DateFormat->formatDate2STDForReport($this->request->data['PharmacySale']['to'],Configure::read('date_format'))." 23:59:59";
			$conditions = array('PurchaseOrderItem.received_date BETWEEN ? AND ?'=> array( $this->request->data['PharmacySale']['from'], $this->request->data['PharmacySale']['to']),'PurchaseOrderItem.status'=>1);
			if($this->params->data['PharmacySale']['party_number'] !==""){
				$conditions['PurchaseOrderItem.party_invoice_number like'] = '%'.$this->params->data['PharmacySale']['party_number'].'%';
			}
		}else{
			$conditions = array('PurchaseOrderItem.status'=>1);
		}
		$this->PurchaseOrderItem->bindModel(array('belongsTo'=>array(
				'PurchaseOrder'=>array('foreignKey'=>false,
						'conditions'=>array('PurchaseOrderItem.purchase_order_id = PurchaseOrder.id')),
				'InventorySupplier'=>array('foreignKey'=>false,
											'fields'=>array('InventorySupplier.name'),
											'conditions'=>array('PurchaseOrder.supplier_id = InventorySupplier.id')), 
				'VatClass'=>array('foreignKey'=>'vat_class_id',
									'fields'=>array('VatClass.vat_percent','VatClass.sat_percent')
						)
		))); 
		
		 /*  $purOrderData = $this->PurchaseOrderItem->find('all',array(
						'conditions'=>$conditions,
					 	 'group'=>array('PurchaseOrderItem.purchase_order_id')
		));   */
		$orderData = $this->PurchaseOrderItem->find('all',array(
						'conditions'=>$conditions,
			));
// 			debug($orderData);exit;
		$purchaseReturn = $this->PurchaseReturn->find('all',array('fields'=>array('PurchaseReturn.purchase_order_id','PurchaseReturn.party_invoice_number','PurchaseReturn.return_amount','PurchaseReturn.vat')));
		
		foreach($orderData as $key=>$data){ //debug($data['PurchaseOrder']);
			$allData[$data['PurchaseOrderItem']['party_invoice_number']]['received_date'] = $data['PurchaseOrderItem']['received_date'];
			$allData[$data['PurchaseOrderItem']['party_invoice_number']]['supplier_name'] = $data['InventorySupplier']['name'];
			$allData[$data['PurchaseOrderItem']['party_invoice_number']]['total'] = $data['PurchaseOrder']['total'];
			$allData[$data['PurchaseOrderItem']['party_invoice_number']]['discount'] = $data['PurchaseOrder']['discount'];
			$allData[$data['PurchaseOrderItem']['party_invoice_number']]['invoice_number'] = $data['PurchaseOrderItem']['party_invoice_number'];
			$allData[$data['PurchaseOrderItem']['party_invoice_number']]['vat'] = $data['PurchaseOrder']['vat'];
			$allData[$data['PurchaseOrderItem']['party_invoice_number']]['vat_per'] = $allData[$data['PurchaseOrderItem']['party_invoice_number']]['vat_per']+($data['PurchaseOrderItem']['quantity_received']*$data['PurchaseOrderItem']['purchase_price']*$data['VatClass']['vat_percent'])/100;
			$allData[$data['PurchaseOrderItem']['party_invoice_number']]['sat_per'] = $allData[$data['PurchaseOrderItem']['party_invoice_number']]['sat_per']+($data['PurchaseOrderItem']['quantity_received']*$data['PurchaseOrderItem']['purchase_price']*$data['VatClass']['sat_percent'])/100;
			
			$orderQty[$data['PurchaseOrderItem']['party_invoice_number']] = $data['PurchaseOrderItem']['quantity_received'];
			$orderPrice[$data['PurchaseOrderItem']['party_invoice_number']] = $data['PurchaseOrderItem']['purchase_price'];
			$orderTax[$data['PurchaseOrderItem']['party_invoice_number']] = $data['PurchaseOrderItem']['tax'];
			$orderVat[$data['PurchaseOrderItem']['party_invoice_number']] = $orderVat[$data['PurchaseOrderItem']['party_invoice_number']]+($data['PurchaseOrderItem']['quantity_received']*$data['PurchaseOrderItem']['purchase_price']*$data['PurchaseOrderItem']['tax'])/100;
		}
		foreach($purchaseReturn as $key=>$purchaseData){
			$returnArray[$purchaseData['PurchaseReturn']['party_invoice_number']] = $returnArray[$purchaseData['PurchaseReturn']['party_invoice_number']]+$purchaseData['PurchaseReturn']['return_amount'];
		}
		
		$this->set(array('allData'=>$allData,'pharmacyItemDetails'=>$purOrderData,'orderVat'=>$orderVat,'returnArray'=>$returnArray,'getGrandTotal'=>$getGrandTotal,'from'=>$this->request->data['PharmacySale']['from'],'to'=>$this->request->data['PharmacySale']['to']));
		
		if($this->request->data['PharmacySale']['format'] == "EXCEL"){
			$this->layout = false;
			$this->render('pharmacy_purchase_report_excel');
		}else if($this->request->data['PharmacySale']['format'] == "PDF"){
			$this->layout = false;
			$this->render('pharmacy_purchase_report_pdf');
		}
	}
	/**
	 * function to pharmacyGrossProfitReport
	 * @author Mahalaxmi
	 */
	public function pharmacyGrossProfitReport(){
		$this->layout='advance';
		$this->uses=array('PharmacySalesBill','PharmacyItem','PharmacySalesBillDetail');
		$this->set('getLocName',$this->Session->read('location_name'));
		$this->set('getLocAdd1',$this->Session->read('location_address1'));
		$this->set('getLocAdd2',$this->Session->read('location_address2'));
		$this->set('location_zipcode',$this->Session->read('location_zipcode'));
		$this->set('location_country',$this->Session->read('location_country'));
		
		if(!empty($this->request->data['PharmacySale']['from'])){
			$from=$this->DateFormat->formatDate2STDForReport($this->request->data['PharmacySale']['from'],Configure::read('date_format'))." 00:00:00";
			$to=$this->DateFormat->formatDate2STDForReport($this->request->data['PharmacySale']['to'],Configure::read('date_format'))." 23:59:59";
			
			$this->PharmacySalesBill->belongsTo = array();
			$this->PharmacySalesBill->hasMany = array();
			
			$this->PharmacySalesBill->bindModel(array('belongsTo'=>array(
					'PharmacySalesBillDetail'=>array('foreignKey'=>false,
							'conditions'=>array('PharmacySalesBillDetail.pharmacy_sales_bill_id = PharmacySalesBill.id')),
					'PharmacyItem'=>array('foreignKey'=>false,
								'conditions'=>array('PharmacySalesBillDetail.item_id = PharmacyItem.id')),
					'PharmacyItemRate'=>array('foreignKey'=>false,'type'=>'INNER',
							'conditions'=>array('PharmacyItemRate.batch_number =  PharmacySalesBillDetail.batch_number',
									'PharmacyItemRate.item_id =  PharmacySalesBillDetail.item_id')))));
			 
			$myData = $this->PharmacySalesBill->find('all',array('fields'=>array( 
					'SUM(PharmacySalesBillDetail.qty) as qtySum',
					'PharmacyItemRate.id','PharmacyItemRate.batch_number','PharmacyItemRate.mrp','PharmacyItemRate.purchase_price','PharmacyItem.id','PharmacyItem.name','PharmacyItem.pack','PharmacySalesBillDetail.id','PharmacySalesBillDetail.item_id','PharmacySalesBillDetail.qty'),
					'conditions'=>array('PharmacySalesBill.create_time <=' => $to,'PharmacySalesBill.create_time >=' => $from,'PharmacySalesBill.is_deleted'=>'0'),
					'group'=>array(/*'PharmacySalesBillDetail.item_id',*/'PharmacySalesBillDetail.batch_number'),
					'order'=>array('PharmacyItem.name')));		 
		
	}
		$this->set(array('itemArr'=>$myData,'pharmacyItems'=>$pharmacyItems,'from'=>$from,'to'=>$to));
		if($this->request->data['PharmacySale']['format'] == "EXCEL"){
			$this->layout = false;
			$this->render('pharmacy_gross_profit_report_excel');
		}else if($this->request->data['PharmacySale']['format'] == "PDF"){
			$this->layout = false;
			$this->render('pharmacy_gross_profit_report_pdf');
		}
	}
	/**
	 * function to pharmacyStockSalesAnalysisReport
	 * @author Mahalaxmi
	 */
	public function pharmacyStockSalesAnalysisReport(){
		$this->layout='advance';
		$this->uses=array('PharmacySalesBillDetail','PharmacySalesBill','PurchaseOrderItem','PharmacyItemRate','PharmacyItem');
		$this->set('getLocName',$this->Session->read('location_name'));
		$this->set('getLocAdd1',$this->Session->read('location_address1'));
		$this->set('getLocAdd2',$this->Session->read('location_address2'));
		$this->set('location_zipcode',$this->Session->read('location_zipcode'));
		$this->set('location_country',$this->Session->read('location_country'));
	
		if(!empty($this->request->data['PharmacySale']['from'])){
			$this->request->data['PharmacySale']['from']=$this->DateFormat->formatDate2STDForReport($this->request->data['PharmacySale']['from'],Configure::read('date_format'))." 00:00:00";
			$this->request->data['PharmacySale']['to']=$this->DateFormat->formatDate2STDForReport($this->request->data['PharmacySale']['to'],Configure::read('date_format'))." 23:59:59";
		
			$conditions = array('PharmacyItem.create_time BETWEEN ? AND ?'=> array( $this->request->data['PharmacySale']['from'], $this->request->data['PharmacySale']['to']),'PharmacyItem.id=PharmacyItemRate.item_id','PharmacyItem.is_deleted'=>0,'PharmacyItem.location_id'=>$this->Session->read('locationid'));
		
		$this->PharmacyItem->unbindModel(array('hasMany'=>array('InventoryPurchaseItemDetail'),'hasOne'=>array('PharmacyItemRate')));
		$this->PharmacyItemRate->bindModel(array('belongsTo'=>array(
				'PharmacyItem'=>array('foreignKey'=>false,'conditions'=>$conditions,'order'=>array('PharmacyItem.name'=>'ASC')
				)),));
		
		
		$pharmacyItemDetails = $this->PharmacyItemRate->find('all',array('fields'=>array('PharmacyItem.drug_id','PharmacyItem.id','PharmacyItem.pack','PharmacyItem.name','PharmacyItem.stock','SUM(PharmacyItemRate.sale_price) as sellingPriceAmt'),'conditions'=>array('PharmacyItemRate.is_deleted'=>0,'PharmacyItemRate.location_id'=>$this->Session->read('locationid')),
				'group'=>array('PharmacyItemRate.item_id')));
	foreach($pharmacyItemDetails as $keyItem=>$pharmacyItemDetailsNew){
		$pharmacyItemDetails[$keyItem]['PharmacyItem']['new_sale_price']=$pharmacyItemDetailsNew[0]['sellingPriceAmt'];
	}
	
	
		$purchaseOrderItemData = $this->PurchaseOrderItem->find('all',array(
				'fields'=>array('PurchaseOrderItem.id','PurchaseOrderItem.product_id','PurchaseOrderItem.received_date','PurchaseOrderItem.purchase_price','PurchaseOrderItem.amount'
						,'SUM(PurchaseOrderItem.quantity_received) as quantityPurchaseOrderItem'),
				'conditions'=>array('PurchaseOrderItem.status'=>1),'group'=>array('PurchaseOrderItem.product_id')
		));
		foreach($purchaseOrderItemData as $keyNewpurchase=>$purchaseOrderItemDataNew){
			$purchaseOrderItemData[$keyNewpurchase]['PurchaseOrderItem']['new_quantity_received']=$purchaseOrderItemDataNew[0]['quantityPurchaseOrderItem'];
		}
	
	
	$this->PharmacySalesBill->unBindModel(array('belongsTo'=>array('Patient','Doctor','Initial')));
	
	$this->PharmacySalesBillDetail->bindModel(array(
		 'belongsTo'=>array('PharmacySalesBill'=>array('foreignKey'=>false,		 		
		 		'conditions'=>array("PharmacySalesBill.id=PharmacySalesBillDetail.pharmacy_sales_bill_id","PharmacySalesBill.location_id" =>$this->Session->read('locationid'),
					'PharmacySalesBill.create_time <=' => $this->request->data['PharmacySale']['to'], 'PharmacySalesBill.create_time >=' => $this->request->data['PharmacySale']['from'])
		 		),
		 ),),false);
	
	$pharmacySalesBillDetailData = $this->PharmacySalesBillDetail->find("all",array(
			'fields'=>array('PharmacySalesBillDetail.pharmacy_sales_bill_id','PharmacySalesBillDetail.item_id','SUM(PharmacySalesBillDetail.qty) as PharmacySalesBillDetailQty'),
			"group"=>array('PharmacySalesBillDetail.item_id')));
	
	
	
	foreach($pharmacySalesBillDetailData as $keyNewSale=>$records){
		$pharmacySalesBillDetailData[$keyNewSale]['PharmacySalesBillDetail']['new_qty']=$records[0]['PharmacySalesBillDetailQty'];	
	}
	foreach($pharmacyItemDetails as $key=>$pharmacyItemDetailss){	
		foreach($purchaseOrderItemData as $keyPurchase=>$purchaseOrderItemDatas){			
			if($pharmacyItemDetailss['PharmacyItem']['drug_id']==$purchaseOrderItemDatas['PurchaseOrderItem']['product_id']){
				$commanPharmacyArr[$pharmacyItemDetailss['PharmacyItem']['drug_id']]['PharmacyItem'][]=$pharmacyItemDetailss['PharmacyItem'];
				$commanPharmacyArr[$pharmacyItemDetailss['PharmacyItem']['drug_id']]['PurchaseOrderItem'][]=$purchaseOrderItemDatas['PurchaseOrderItem'];
			}
		}
		foreach($pharmacySalesBillDetailData as $keySale=>$pharmacySalesBillDetailDatas){
			if($pharmacyItemDetailss['PharmacyItem']['id']==$pharmacySalesBillDetailDatas['PharmacySalesBillDetail']['item_id']){
				$commanPharmacyArr[$pharmacyItemDetailss['PharmacyItem']['drug_id']]['PharmacyItem'][]=$pharmacyItemDetailss['PharmacyItem'];
				$commanPharmacyArr[$pharmacyItemDetailss['PharmacyItem']['drug_id']]['PharmacySalesBillDetail'][]=$pharmacySalesBillDetailDatas['PharmacySalesBillDetail'];
		
			}
		}
	}

	
	$this->set(array('commanPharmacyArr'=>$commanPharmacyArr,'getGrandTotal'=>$getGrandTotal,'from'=>$this->request->data['PharmacySale']['from'],'to'=>$this->request->data['PharmacySale']['to']));
	
		if($this->request->data['PharmacySale']['format'] == "EXCEL"){
			$this->layout = false;
			$this->render('pharmacy_stock_sales_analysis_report_excel');
		}else if($this->request->data['PharmacySale']['format'] == "PDF"){
			$this->layout = false;
			$this->render('pharmacy_stock_sales_analysis_report_pdf');
		}
		}
		
	}
	/**
	 * function to pharmacySaleVoucherReport For Hope Hospital Only
	 * @author Mahalaxmi
	 */
	public function pharmacySaleVoucherCollectionReport($type="sale"){
		$this->layout ='advance';
		$this->uses = array("Billing","ServiceCategory","Patient","PharmacySalesBill","InventoryPharmacySalesReturn","PharmacyItem","PharmacySalesBillDetail","Initial");
		$this->set('title_for_layout', __('Pharmacy Report - Sale Report', true));
		if ($this->request->is('post')) {
			$from = $this->DateFormat->formatDate2STDForReport($this->request->data['PharmacySale']['from'],Configure::read('date_format'))." 00:00:00";
			$to = $this->DateFormat->formatDate2STDForReport($this->request->data['PharmacySale']['to'],Configure::read('date_format'))." 23:59:59";
			$format = $this->request->data['PharmacySale']['format'];
	
			$this->set('from',$from);
			$this->set('to',$to); 
			$this->set('for',"Sale"); 
			
			$pharmacyCategoryId=$this->ServiceCategory->getPharmacyId();//in case need of pharmacy category ID  
			$this->loadModel('TariffStandard');  
			$rgjayId = $this->TariffStandard->getTariffStandardID('RGJAY');
			$wclId = $this->TariffStandard->getTariffStandardID('WCL'); 
			$tariffCond['Patient.tariff_standard_id NOT'] = array($rgjayId,$wclId); 
			 
			$this->Billing->bindModel(array('belongsTo'=>array(
					'Patient'=>array(
						'foreignKey'=>false,
						'type'=>'inner',
						'conditions'=>array('Billing.patient_id = Patient.id')
					)
				))); 
			$recordBilling = $this->Billing->find("all",array("fields"=>array("SUM(Billing.amount) as billingAmt","Billing.patient_id"),
					"conditions"=>array("Billing.location_id" =>$this->Session->read('locationid'),
							'Billing.date <=' => $to, 'Billing.date >=' => $from,
							"Billing.payment_category"=>$pharmacyCategoryId,$tariffCond,
							"Billing.amount <>"=>0
					),"group"=>array('Billing.id')			
			));
		
			$billongAmt=0;
			foreach($recordBilling as $keyBill=>$recordBillings){
				$billongAmt=$billongAmt+$recordBillings[0]['billingAmt']; //for hope only
			}
			
			$this->PharmacySalesBill->unBindModel(array('belongsTo'=>array('Patient','Doctor','Initial'),'hasMany'=>array('PharmacySalesBillDetail')));
			$this->PharmacySalesBill->bindModel(array('belongsTo'=>array(
					'Patient'=>array(
						'foreignKey'=>false,
						'type'=>'inner',
						'conditions'=>array('PharmacySalesBill.patient_id = Patient.id')
					)
				)),false);
			
			$record = $this->PharmacySalesBill->find("all",array("fields"=>array("PharmacySalesBill.*"),
					"conditions"=>array("PharmacySalesBill.location_id" =>$this->Session->read('locationid'),
							'PharmacySalesBill.create_time <=' => $to, 'PharmacySalesBill.create_time >=' => $from,
							'PharmacySalesBill.payment_mode' => array("cash", "credit"),$tariffCond
					),"group"=>array('PharmacySalesBill.id')));
	
			$totalCreditAmt=0;
			$totalCashAmt=0;
			$getTotalAmt=0;
			$getTotalDiscAmt=0;
			$getGrossAmt=0;
			foreach($record as $key=>$value){
				if(trim(strtolower($value['PharmacySalesBill']['payment_mode']))=='credit'){
					$flagCredit=true;
					if(empty($value['PharmacySalesBill']['paid_amnt'])){
						$value['PharmacySalesBill']['paid_amnt']=$value['PharmacySalesBill']['total'];
					}
					
					$totalCreditAmt=$totalCreditAmt+$value['PharmacySalesBill']['paid_amnt'];
					
				}else if(trim(strtolower($value['PharmacySalesBill']['payment_mode']))=='cash'){
					$flagCash=true;
					if(empty($value['PharmacySalesBill']['paid_amnt'])){
						$value['PharmacySalesBill']['paid_amnt']=$value['PharmacySalesBill']['total'];
					}
					$totalCashAmt=$totalCashAmt+$value['PharmacySalesBill']['paid_amnt'];
				}
				if(empty($value['PharmacySalesBill']['paid_amnt'])){
					$value['PharmacySalesBill']['paid_amnt']=$value['PharmacySalesBill']['total'];
				}
				$getTotalAmt=$getTotalAmt+$value['PharmacySalesBill']['paid_amnt'];
				$getTotalDiscAmt=$getTotalDiscAmt+$value['PharmacySalesBill']['discount'];
				$getGrossAmt=$getGrossAmt+$value['PharmacySalesBill']['total'];
			}
			
			$totalCreditAmt1=$totalCreditAmt-$billongAmt;
			$this->pharmacySaleOfRgjayReport($from,$to);
                        $this->pharmacySaleOfWclReport($from,$to);
			$this->set('reports',$record);
			$this->set(array('flagCash'=>$flagCash,'flagCredit'=>$flagCredit,'totalCreditAmt'=>$totalCreditAmt1,'totalCashAmt'=>$billongAmt,'getTotalAmt'=>$getTotalAmt,'getTotalDiscAmt'=>$getTotalDiscAmt,'getGrossAmt'=>$getGrossAmt));
			$this->layout = false;
			if($format == 'PDF'){
				$this->render('pharmacy_sale_voucher_collection_report_pdf');
			}else{
				$this->render('pharmacy_sale_voucher_collection_report_excel');
			}
                        
                        
		}
	
	}
	/**
	 * function to viewPharmacySaleVoucherReport For Hope Only
	 * @author Mahalaxmi
	 */
	public function viewPharmacySaleVoucherCollectionReport(){
            $this->uses = array("Billing","ServiceCategory","Patient","PharmacySalesBill","InventoryPharmacySalesReturn","PharmacyItem","PharmacySalesBillDetail","Initial");
            if ($this->request->query) {
                $from = $this->DateFormat->formatDate2STDForReport($this->request->query['data']['PharmacySale']['from'],Configure::read('date_format'))." 00:00:00";
                $to = $this->DateFormat->formatDate2STDForReport($this->request->query['data']['PharmacySale']['to'],Configure::read('date_format'))." 23:59:59";
                $this->set('from',$from);
                $this->set('to',$to);

                $this->set('for',"Sale");
			
                    $pharmacyCategoryId=$this->ServiceCategory->getPharmacyId();//in case need of pharmacy category ID  
                    $this->loadModel('TariffStandard');  
                    $rgjayId = $this->TariffStandard->getTariffStandardID('RGJAY');
                    $wclId = $this->TariffStandard->getTariffStandardID('WCL'); 
                    $tariffCond['Patient.tariff_standard_id NOT'] = array($rgjayId,$wclId); 

                    $this->Billing->bindModel(array('belongsTo'=>array(
                                    'Patient'=>array(
                                            'foreignKey'=>false,
                                            'type'=>'inner',
                                            'conditions'=>array('Billing.patient_id = Patient.id')
                                    )
                            ))); 
                    $recordBilling = $this->Billing->find("all",array("fields"=>array("SUM(Billing.amount) as billingAmt","Billing.patient_id"),
                                    "conditions"=>array("Billing.location_id" =>$this->Session->read('locationid'),
                                                    'Billing.date <=' => $to, 'Billing.date >=' => $from,
                                                    "Billing.payment_category"=>$pharmacyCategoryId,$tariffCond,
                                                    "Billing.amount <>"=>0
                                    ),"group"=>array('Billing.id')			
                    ));

                    $billongAmt=0;
                    foreach($recordBilling as $keyBill=>$recordBillings){
                            $billongAmt=$billongAmt+$recordBillings[0]['billingAmt']; //for hope only
                    }

                    $this->PharmacySalesBill->unBindModel(array('belongsTo'=>array('Patient','Doctor','Initial'),'hasMany'=>array('PharmacySalesBillDetail')));
                    $this->PharmacySalesBill->bindModel(array('belongsTo'=>array(
                                    'Patient'=>array(
                                            'foreignKey'=>false,
                                            'type'=>'inner',
                                            'conditions'=>array('PharmacySalesBill.patient_id = Patient.id')
                                    )
                            )),false);

                    $record = $this->PharmacySalesBill->find("all",array("fields"=>array("PharmacySalesBill.*"),
                                    "conditions"=>array("PharmacySalesBill.location_id" =>$this->Session->read('locationid'),
                                                    'PharmacySalesBill.create_time <=' => $to, 'PharmacySalesBill.create_time >=' => $from,
                                                    'PharmacySalesBill.payment_mode' => array("cash", "credit"),$tariffCond
                                    ),"group"=>array('PharmacySalesBill.id')));

                    $totalCreditAmt=0;
                    $totalCashAmt=0;
                    $getTotalAmt=0;
                    $getTotalDiscAmt=0;
                    $getGrossAmt=0;
                    foreach($record as $key=>$value){
                            if(trim(strtolower($value['PharmacySalesBill']['payment_mode']))=='credit'){
                                    $flagCredit=true;
                                    if(empty($value['PharmacySalesBill']['paid_amnt'])){
                                            $value['PharmacySalesBill']['paid_amnt']=$value['PharmacySalesBill']['total'];
                                    }

                                    $totalCreditAmt=$totalCreditAmt+$value['PharmacySalesBill']['paid_amnt'];

                            }else if(trim(strtolower($value['PharmacySalesBill']['payment_mode']))=='cash'){
                                    $flagCash=true;
                                    if(empty($value['PharmacySalesBill']['paid_amnt'])){
                                            $value['PharmacySalesBill']['paid_amnt']=$value['PharmacySalesBill']['total'];
                                    }
                                    $totalCashAmt=$totalCashAmt+$value['PharmacySalesBill']['paid_amnt'];
                            }
                            if(empty($value['PharmacySalesBill']['paid_amnt'])){
                                    $value['PharmacySalesBill']['paid_amnt']=$value['PharmacySalesBill']['total'];
                            }
                            $getTotalAmt=$getTotalAmt+$value['PharmacySalesBill']['paid_amnt'];
                            $getTotalDiscAmt=$getTotalDiscAmt+$value['PharmacySalesBill']['discount'];
                            $getGrossAmt=$getGrossAmt+$value['PharmacySalesBill']['total'];
                    }

                    $totalCreditAmt1=$totalCreditAmt-$billongAmt;
                    $this->pharmacySaleOfRgjayReport($from,$to);
                    $this->pharmacySaleOfWclReport($from,$to);
                    $this->set('reports',$record);
                    $this->set(array('flagCash'=>$flagCash,'flagCredit'=>$flagCredit,'totalCreditAmt'=>$totalCreditAmt1,'totalCashAmt'=>$billongAmt,'getTotalAmt'=>$getTotalAmt,'getTotalDiscAmt'=>$getTotalDiscAmt,'getGrossAmt'=>$getGrossAmt)); 
		} 
	}
        
	/**
	 * function to pharmacySaleVoucherReport
	 * @author Mahalaxmi
	 */
	public function pharmacySaleVoucherReport($type="sale"){
			$this->layout ='advance';
			$this->uses = array("PharmacySalesBill","InventoryPharmacySalesReturn","PharmacyItem","PharmacySalesBillDetail","Initial");
			$this->set('title_for_layout', __('Pharmacy Report - Sale Report', true));
			if ($this->request->is('post')) { 
				$from = $this->DateFormat->formatDate2STDForReport($this->request->data['PharmacySale']['from'],Configure::read('date_format'))." 00:00:00";
				$to = $this->DateFormat->formatDate2STDForReport($this->request->data['PharmacySale']['to'],Configure::read('date_format'))." 23:59:59";
				$format = $this->request->data['PharmacySale']['format'];
				
				$this->set('from',$from);
				$this->set('to',$to);
			
					$this->set('for',"Sale");
			
					$record = $this->PharmacySalesBill->find("all",array(
							"conditions"=>array("PharmacySalesBill.location_id" =>$this->Session->read('locationid'),
									'PharmacySalesBill.create_time <=' => $to, 'PharmacySalesBill.create_time >=' => $from,
									'PharmacySalesBill.payment_mode' => array("cash", "credit")
							),"group"=>array('PharmacySalesBill.id')));
		
					$totalCreditAmt=0;
					$totalCashAmt=0;
					$getTotalAmt=0;
					$getTotalDiscAmt=0;
					$getGrossAmt=0;
					foreach($record as $key=>$value){
						if(trim(strtolower($value['PharmacySalesBill']['payment_mode']))=='credit'){
							$flagCredit=true;
							if(empty($value['PharmacySalesBill']['paid_amnt'])){
								$value['PharmacySalesBill']['paid_amnt']=$value['PharmacySalesBill']['total'];
							}
							$totalCreditAmt=$totalCreditAmt+$value['PharmacySalesBill']['paid_amnt'];
						}else if(trim(strtolower($value['PharmacySalesBill']['payment_mode']))=='cash'){
							$flagCash=true;
							if(empty($value['PharmacySalesBill']['paid_amnt'])){
								$value['PharmacySalesBill']['paid_amnt']=$value['PharmacySalesBill']['total'];
							}
							$totalCashAmt=$totalCashAmt+$value['PharmacySalesBill']['paid_amnt'];
						}
						if(empty($value['PharmacySalesBill']['paid_amnt'])){
							$value['PharmacySalesBill']['paid_amnt']=$value['PharmacySalesBill']['total'];
						}
						$getTotalAmt=$getTotalAmt+$value['PharmacySalesBill']['paid_amnt'];
						$getTotalDiscAmt=$getTotalDiscAmt+$value['PharmacySalesBill']['discount'];
						$getGrossAmt=$getGrossAmt+$value['PharmacySalesBill']['total'];
					}						
				
				$this->set('reports',$record);
				$this->set(array('flagCash'=>$flagCash,'flagCredit'=>$flagCredit,'totalCreditAmt'=>$totalCreditAmt,'totalCashAmt'=>$totalCashAmt,'getTotalAmt'=>$getTotalAmt,'getTotalDiscAmt'=>$getTotalDiscAmt,'getGrossAmt'=>$getGrossAmt));
				$this->layout = false;
				if($format == 'PDF'){						
						$this->render('pharmacy_sale_voucher_report_pdf');							
				}else{							
						$this->render('pharmacy_sale_voucher_report_excel');						
				}
		
				}
		
			}	
			
			/**
			 * function to viewPharmacySaleVoucherReport
			 * @author Mahalaxmi
			 */
			public function viewPharmacySaleVoucherReport(){				
				$this->uses = array("PharmacySalesBill","InventoryPharmacySalesReturn","PharmacyItem","PharmacySalesBillDetail","Initial");					
					$from = $this->DateFormat->formatDate2STDForReport($this->request->query['data']['PharmacySale']['from'],Configure::read('date_format'))." 00:00:00";
					$to = $this->DateFormat->formatDate2STDForReport($this->request->query['data']['PharmacySale']['to'],Configure::read('date_format'))." 23:59:59";
					$this->set('from',$from);
					$this->set('to',$to);
						
					$this->set('for',"Sale");
						
					$record = $this->PharmacySalesBill->find("all",array(
							"conditions"=>array("PharmacySalesBill.location_id" =>$this->Session->read('locationid'),
									'PharmacySalesBill.create_time <=' => $to, 'PharmacySalesBill.create_time >=' => $from,
									'PharmacySalesBill.payment_mode' => array("cash", "credit")
							),"group"=>array('PharmacySalesBill.id')));
			
					$totalCreditAmt=0;
					$totalCashAmt=0;
					$getTotalAmt=0;
					$getTotalDiscAmt=0;
					$getGrossAmt=0;
					foreach($record as $key=>$value){
						if(trim(strtolower($value['PharmacySalesBill']['payment_mode']))=='credit'){
							$flagCredit=true;
							if(empty($value['PharmacySalesBill']['paid_amnt'])){
								$value['PharmacySalesBill']['paid_amnt']=$value['PharmacySalesBill']['total'];
							}
							$totalCreditAmt=$totalCreditAmt+$value['PharmacySalesBill']['paid_amnt'];
						}else if(trim(strtolower($value['PharmacySalesBill']['payment_mode']))=='cash'){
							$flagCash=true;
							if(empty($value['PharmacySalesBill']['paid_amnt'])){
								$value['PharmacySalesBill']['paid_amnt']=$value['PharmacySalesBill']['total'];
							}
							$totalCashAmt=$totalCashAmt+$value['PharmacySalesBill']['paid_amnt'];
						}
						if(empty($value['PharmacySalesBill']['paid_amnt'])){
							$value['PharmacySalesBill']['paid_amnt']=$value['PharmacySalesBill']['total'];
						}
						$getTotalAmt=$getTotalAmt+$value['PharmacySalesBill']['paid_amnt'];
						$getTotalDiscAmt=$getTotalDiscAmt+$value['PharmacySalesBill']['discount'];
						$getGrossAmt=$getGrossAmt+$value['PharmacySalesBill']['total'];
					}
			
					$this->set('reports',$record);
					$this->set(array('flagCash'=>$flagCash,'flagCredit'=>$flagCredit,'totalCreditAmt'=>$totalCreditAmt,'totalCashAmt'=>$totalCashAmt,'getTotalAmt'=>$getTotalAmt,'getTotalDiscAmt'=>$getTotalDiscAmt,'getGrossAmt'=>$getGrossAmt));
					
			}
			/**
			 * function to pharmacyPurchaseVoucherReport
			 * @author Mahalaxmi
			 */
	public function pharmacyPurchaseVoucherReport(){
			$this->layout ='advance';
			$this->uses=array('PurchaseOrderItem','PharmacyItem');
		
		if(!empty($this->request->data['PharmacySale']['from'])){
			$this->request->data['PharmacySale']['from']=$this->DateFormat->formatDate2STDForReport($this->request->data['PharmacySale']['from'],Configure::read('date_format'))." 00:00:00";
			$this->request->data['PharmacySale']['to']=$this->DateFormat->formatDate2STDForReport($this->request->data['PharmacySale']['to'],Configure::read('date_format'))." 23:59:59";
			$conditions = array('PurchaseOrderItem.received_date BETWEEN ? AND ?'=> array( $this->request->data['PharmacySale']['from'], $this->request->data['PharmacySale']['to']),'PurchaseOrderItem.status'=>1);
		}else{
			$conditions = array('PurchaseOrderItem.status'=>1);
		}
		$this->PurchaseOrderItem->bindModel(array('belongsTo'=>array(		
				'PurchaseOrder'=>array('foriegnKey'=>'purchase_order_id'),							
		)));
		$item = $this->PurchaseOrderItem->find('all',array(
				'fields'=>array('PurchaseOrder.vat','PurchaseOrder.id','PurchaseOrder.net_amount','PurchaseOrder.discount','PurchaseOrder.total'),
				'conditions'=>$conditions,'group'=>array('PurchaseOrderItem.purchase_order_id')));
			
				
					$getTotalAmt=0;
				
					$getGrossAmt=0;
					$getVatAmt=0;
					foreach($item as $key=>$value){	
					
						if(empty($value['PurchaseOrder']['total'])){
							$gettotalValue=$value['PurchaseOrder']['net_amount']-$value['PurchaseOrder']['vat'];
						}else{
							$gettotalValue=$value['PurchaseOrder']['total'];
						}			
					
						$getTotalAmt=$getTotalAmt+$gettotalValue;
						
						$getGrossAmt=$getGrossAmt+$value['PurchaseOrder']['net_amount'];
						$getVatAmt=$getVatAmt+$value['PurchaseOrder']['vat'];
					}
				
					
					$this->set(array('from'=>$this->request->data['PharmacySale']['from'],'to'=>$this->request->data['PharmacySale']['to'],'flagCash'=>$flagCash,'flagCredit'=>$flagCredit,'totalCreditAmt'=>$totalCreditAmt,'totalCashAmt'=>$totalCashAmt,'getTotalAmt'=>$getTotalAmt,'getTotalDiscAmt'=>$getTotalDiscAmt,'getGrossAmt'=>$getGrossAmt,'getVatAmt'=>$getVatAmt));
					
					if($this->request->data['PharmacySale']['format'] == "EXCEL"){
						$this->layout = false;
						$this->render('pharmacy_purchase_voucher_report_excel');
					}else if($this->request->data['PharmacySale']['format'] == "PDF"){
						$this->layout = false;
						$this->render('pharmacy_purchase_voucher_report_pdf');
					}
					
					
			
				}
			
				/**
				 * function to viewPharmacyPurchaseVoucherReport
				 * @author Mahalaxmi
				 */
				public function viewPharmacyPurchaseVoucherReport(){
					//$this->layout ='ajax';
					$this->uses=array('PurchaseOrderItem','PharmacyItem');
			
					if(!empty($this->request->query['data']['PharmacySale']['from'])){
						$this->request->query['data']['PharmacySale']['from']=$this->DateFormat->formatDate2STDForReport($this->request->query['data']['PharmacySale']['from'],Configure::read('date_format'))." 00:00:00";
						$this->request->query['data']['PharmacySale']['to']=$this->DateFormat->formatDate2STDForReport($this->request->query['data']['PharmacySale']['to'],Configure::read('date_format'))." 23:59:59";
						$conditions = array('PurchaseOrderItem.received_date BETWEEN ? AND ?'=> array( $this->request->query['data']['PharmacySale']['from'], $this->request->query['data']['PharmacySale']['to']),'PurchaseOrderItem.status'=>1);
					}else{
						$conditions = array('PurchaseOrderItem.status'=>1);
					}
					$this->PurchaseOrderItem->bindModel(array('belongsTo'=>array(
							'PurchaseOrder'=>array('foriegnKey'=>'purchase_order_id'),
					)));
					$item = $this->PurchaseOrderItem->find('all',array(
							'fields'=>array('PurchaseOrder.vat','PurchaseOrder.id','PurchaseOrder.net_amount','PurchaseOrder.discount','PurchaseOrder.total'),'conditions'=>$conditions,'group'=>array('PurchaseOrderItem.purchase_order_id')));
						
				
					$getTotalAmt=0;				
					$getGrossAmt=0;
					$getVatAmt=0;
					foreach($item as $key=>$value){
							
						if(empty($value['PurchaseOrder']['total'])){
							$gettotalValue=$value['PurchaseOrder']['net_amount']-$value['PurchaseOrder']['vat'];
						}else{
							$gettotalValue=$value['PurchaseOrder']['total'];
						}
							
						$getTotalAmt=$getTotalAmt+$gettotalValue;
				
						$getGrossAmt=$getGrossAmt+$value['PurchaseOrder']['net_amount'];
						$getVatAmt=$getVatAmt+$value['PurchaseOrder']['vat'];
					}
				
						
					$this->set(array('from'=>$this->request->query['data']['PharmacySale']['from'],'to'=>$this->request->query['data']['PharmacySale']['to'],'flagCash'=>$flagCash,'flagCredit'=>$flagCredit,'totalCreditAmt'=>$totalCreditAmt,'totalCashAmt'=>$totalCashAmt,'getTotalAmt'=>$getTotalAmt,'getTotalDiscAmt'=>$getTotalDiscAmt,'getGrossAmt'=>$getGrossAmt,'getVatAmt'=>$getVatAmt));
						
					
						
						
				}
					
		public function sale_sat_vat_report(){
			$this->layout ='advance';	
			$this->uses = array("PharmacySalesBill","InventoryPharmacySalesReturn","PharmacyItem","PharmacySalesBillDetail","Initial","Billing","ServiceCategory","PharmacyReturnDetail");
		$this->set('title_for_layout', __('Pharmacy Report - Sale Report', true));
		$this->set('getLocName',$this->Session->read('location_name'));
		$this->set('getLocAdd1',$this->Session->read('location_address1'));
		$this->set('getLocAdd2',$this->Session->read('location_address2'));		
		$this->set('location_zipcode',$this->Session->read('location_zipcode'));		
		$this->set('location_country',$this->Session->read('location_country'));		
		if ($this->request->is('post')) { 
			$from = $this->DateFormat->formatDate2STDForReport($this->request->data['PharmacySale']['from'],Configure::read('date_format'))." 00:00:00";
			$to = $this->DateFormat->formatDate2STDForReport($this->request->data['PharmacySale']['to'],Configure::read('date_format'))." 23:59:59";
			$format = $this->request->data['PharmacySale']['format'];
			if($this->request->data['PharmacySale']['payment_type'] == "cash" ||  $this->request->data['PharmacySale']['payment_type'] == "credit") {
				$payment_type = $this->request->data['PharmacySale']['payment_type'];
			} else {
				$payment_type = array("cash", "credit");
			}
			$this->set('from',$from);
			$this->set('to',$to);
			if($this->request->data['PharmacySale']['for'] == "Sales"){
				$this->set('for',"Sale");
				$this->PharmacySalesBill->bindModel(array(
						"belongsTo"=>array("User"=>array("foreignKey"=>"created_by"),
										  //)),
						)));
				$record = $this->PharmacySalesBill->find("all",array(
						'fields'=>array('PharmacySalesBill.payment_mode',
						 'PharmacySalesBill.paid_amnt','PharmacySalesBill.total','PharmacySalesBill.create_time','PharmacySalesBill.bill_code',
								'PharmacySalesBill.patient_id','PharmacySalesBill.customer_name','PharmacySalesBill.discount','User.first_name','User.last_name',
								'Patient.lookup_name','Patient.patient_id'),
						"conditions"=>array("PharmacySalesBill.location_id" =>$this->Session->read('locationid'),
								'PharmacySalesBill.create_time <=' => $to, 'PharmacySalesBill.create_time >=' => $from,
								'PharmacySalesBill.payment_mode' => $payment_type,'PharmacySalesBill.is_deleted'=>'0'),'order'=>array('PharmacySalesBill.bill_code')));
				//debug($record);//exit;
				/*foreach($record as $recordPharmacySalesBillDetail){
					foreach($recordPharmacySalesBillDetail['PharmacySalesBillDetail'] as $recordPhaSaleBillDetails){
							$itemIdArr[]=$recordPhaSaleBillDetails['item_id'];
					}
				}*/
				//debug($itemIdArr);

				/*$this->PharmacyItem->bindModel(array(
						"belongsTo"=>array(								
							 	'VatClass'=>array('foreignKey'=>false,'conditions'=>array('VatClass.id=PharmacyItem.vat_class_id')),
						)
				));
				$pharmacyData=$this->PharmacyItem->find("all",array("fields"=>array("PharmacyItem.name","PharmacyItem.vat_class_id","VatClass.vat_of_class"),"conditions"=>array("PharmacyItem.is_deleted"=>0,"PharmacyItem.id"=>$itemIdArr)));*/
				//debug($pharmacyData);
				//exit;
				$totalCreditAmt=0;
				$totalCashAmt=0;
				$getTotalAmt=0;
				$totalAmt=0;
				foreach($record as $key=>$value){
						$getPercentage=($value['PharmacySalesBill']['discount']*100/$value['PharmacySalesBill']['total']);
					if(trim(strtolower($value['PharmacySalesBill']['payment_mode']))=='credit'){
						$flagCredit=true;	
						//if(empty($value['PharmacySalesBill']['paid_amnt'])){
							$value['PharmacySalesBill']['paid_amnt']=$value['PharmacySalesBill']['total']-$value['PharmacySalesBill']['discount'];
						//}					
						$totalCreditAmt=$totalCreditAmt+round($value['PharmacySalesBill']['paid_amnt']);
					}else if(trim(strtolower($value['PharmacySalesBill']['payment_mode']))=='cash'){
						$flagCash=true;
						//if(empty($value['PharmacySalesBill']['paid_amnt'])){
							$value['PharmacySalesBill']['paid_amnt']=$value['PharmacySalesBill']['total']-$value['PharmacySalesBill']['discount'];
						//}
						$totalCashAmt=$totalCashAmt+round($value['PharmacySalesBill']['paid_amnt']);						
					}	
					//if(empty($value['PharmacySalesBill']['paid_amnt'])){
						$value['PharmacySalesBill']['paid_amnt']=$value['PharmacySalesBill']['total']-$value['PharmacySalesBill']['discount'];+
					//}				
					$getTotalAmt=$getTotalAmt+round($value['PharmacySalesBill']['paid_amnt']);						
					$totalAmt=$totalAmt+$value['PharmacySalesBill']['total'];
					foreach($value['PharmacySalesBillDetail'] as $k=>$v){
						$this->PharmacySalesBillDetail->unbindModel(array("belongsTo"=>array("PharmacySalesBill")));
						$this->PharmacySalesBillDetail->bindModel(array(
						"belongsTo"=>array(		
								'PharmacyItem'=>array('foreignKey'=>false,'conditions'=>array('PharmacyItem.id'=>$v['item_id'])),	
							 	'VatClass'=>array('foreignKey'=>false,'conditions'=>array('VatClass.id=PharmacyItem.vat_class_id')),
						)
						));

						$itemdetail = $this->PharmacySalesBillDetail->find("first",array('fields'=>array('VatClass.vat_of_class','
						PharmacySalesBillDetail.*','PharmacyItem.*'),
							'conditions'=>array('PharmacySalesBillDetail.id'=>$v['id'])));
						//debug($v);
						//debug($itemdetail);
						$getdeductedSalePrice=($itemdetail['PharmacySalesBillDetail']['sale_price']*$getPercentage)/100;
						
						if($itemdetail['VatClass']['vat_of_class']=="5"){
							$record[$key]['PharmacySalesBill']['vat_five']=$record[$key]['PharmacySalesBill']['sat_fourteen']+($getdeductedSalePrice/105)*4;
							$record[$key]['PharmacySalesBill']['sat_five']=$record[$key]['PharmacySalesBill']['sat_five']+($getdeductedSalePrice/105)*1;
						}else if($itemdetail['VatClass']['vat_of_class']=="14"){
							$record[$key]['PharmacySalesBill']['vat_fourteen']=$record[$key]['PharmacySalesBill']['vat_fourteen']+($getdeductedSalePrice/114)*12.5;
							$record[$key]['PharmacySalesBill']['sat_fourteen']=$record[$key]['PharmacySalesBill']['sat_fourteen']+($getdeductedSalePrice/114)*1.5;
						}
							
							
						$record[$key]['PharmacySalesBillDetail'][$k]['item'] = $itemdetail['PharmacyItem']['name'];
						$record[$key]['PharmacySalesBillDetail'][$k]['code'] = $itemdetail['PharmacyItem']['item_code'];
					}
					
				}
				//debug($record);
				//exit;
				
			}else{
				$this->set('for',"Sale Return");
				$this->InventoryPharmacySalesReturn->bindModel(array(
						"belongsTo"=>array(
								"User"=>array("foreignKey"=>"created_by"),
							 	'Initial'=>array('foreignKey'=>false,'conditions'=>array('Initial.id=User.initial_id')),
						)
				));
				
				/* Credited Pharmacy sales return - from billing the patient dont have entry in billing  
				 * Credited Direct Sales return- they dont have entry in billing as well as patient_id null in sales return
				 * Cash paid Pharmacy Sales Return - having entry in Billing with Patient_id nd paid_to_patient, paymentCategory, mode_of_payment
				 * Cash Paid Direct Return - having entry in Pharmacy Sales Bill in paid_to_patient 
				 */
				$pharmacyCategoryId=$this->ServiceCategory->getPharmacyId();
				$conditions['InventoryPharmacySalesReturn.location_id']=$this->Session->read('locationid');
				$conditions['InventoryPharmacySalesReturn.create_time <=']=$to;
				/* $conditions['InventoryPharmacySalesReturn.is_deleted'] = 0; */
				$conditions['InventoryPharmacySalesReturn.create_time >=']=$from;
				
				$record = $this->InventoryPharmacySalesReturn->find("all",array(
						"fields"=>array("InventoryPharmacySalesReturn.id","InventoryPharmacySalesReturn.create_time","InventoryPharmacySalesReturn.patient_id",
								"InventoryPharmacySalesReturn.customer_name","InventoryPharmacySalesReturn.total","InventoryPharmacySalesReturn.discount","InventoryPharmacySalesReturn.bill_code",
								"InventoryPharmacySalesReturn.pharmacy_sale_bill_id","InventoryPharmacySalesReturn.is_deleted","InventoryPharmacySalesReturn.payment_mode",
								'User.first_name','User.last_name','Patient.lookup_name','Patient.patient_id'),
						"conditions"=>$conditions,
						"order"=>array("InventoryPharmacySalesReturn.create_time"),
							
				));
				//1. Cash returned Amount of Pharmacy sales
				$frmBilling = $this->Billing->find('all',array(
								'conditions'=>array('Billing.payment_category'=>$pharmacyCategoryId,'Billing.mode_of_payment'=>"Cash",'Billing.refund'=>"1",'Billing.date <='=>$to,'Billing.date >='=>$from),
								'fields'=>array('sum(Billing.paid_to_patient)as returnedCash')
						));
			
				//2. Direct Sales Return Amount from PharmacyReturnDetails - new Table by Mrunal - 6/7/15
				$this->PharmacyReturnDetail->bindModel(array(
						"belongsTo"=>array(
								"InventoryPharmacySalesReturn"=>array("foreignKey"=>'pharmacy_sales_return_id'),
						)
				));
				
				$salesData = $this->PharmacyReturnDetail->find('all',array(
						'conditions'=>array('PharmacyReturnDetail.create_time <='=>$to,'PharmacyReturnDetail.create_time >='=>$from,'InventoryPharmacySalesReturn.is_deleted'=>0),
						'fields'=>array('sum(PharmacyReturnDetail.paid_to_patient)as directRefund') 
						));
				
				$getTotalAmt=0;
				foreach($record as $key=>$value){						
					$getTotalAmt=$getTotalAmt+$value['InventoryPharmacySalesReturn']['total'];									
					foreach($value['InventoryPharmacySalesReturnsDetail'] as $k=>$v){
						$this->PharmacyItem->belongsTo = array();
						$this->PharmacyItem->hasMany = array();
						$this->PharmacyItem->hasOne = array();
						$itemdetail = $this->PharmacyItem->read(null,$v['item_id']);
						$record[$key]['InventoryPharmacySalesReturnsDetail'][$k]['item'] = $itemdetail['PharmacyItem']['name'];
						$record[$key]['InventoryPharmacySalesReturnsDetail'][$k]['code'] = $itemdetail['PharmacyItem']['item_code'];
						$qty = $v['qty'];
						$qtyType = $v['qty_type'];
						$returnPack = $v['pack'];
						if(!empty($v['sale_price'])) {
							$price = $v['sale_price'] ;
						}else{
							$price = $v['mrp'] ;
						}
						//debug($price);
						if($qtyType == "Tab"){
							$amount =($price/ $returnPack) * $qty;							
						}else{
							$amount = $price * $qty;							
						}
						
						$totalreturnAmt[$v['inventory_pharmacy_sales_return_id']] += $amount;
					
						$totalreturnBilledAmt[$v['inventory_pharmacy_sales_return_id']] += $v['return_tot_amount'];
						
					}
				}
			}
			$this->set('reports',$record);
			$this->set(array('totalreturnBilledAmt'=>$totalreturnBilledAmt,'salesData'=>$salesData,'frmBilling'=>$frmBilling,'totalreturnAmt'=>$totalreturnAmt,'totalAmt'=>$totalAmt,'flagCash'=>$flagCash,'flagCredit'=>$flagCredit,'totalCreditAmt'=>$totalCreditAmt,'totalCashAmt'=>$totalCashAmt,'getTotalAmt'=>$getTotalAmt,'showItem'=>$this->request->data['PharmacySale']['show_item']));
			$this->layout = false;
			if($format == 'PDF'){
				if($this->request->data['PharmacySale']['for'] == "Sales")
					$this->render('sale_report_pdf');
				else
					$this->render('sale_return_report_pdf');
			} else {
				if($this->request->data['PharmacySale']['for'] == "Sales")
					$this->render('sale_sat_vat_report_excel');
				else
					$this->render('sale_return_report_excel');
			}

		}

			}
			
			
			
	public function external_requisition_reports($type=null){
		$this->uses = array('ExternalRequisition','RadiologyTestOrder','Patient','ExternalRequisition','ServiceProvider');
		$this->set('serviceProvider',$this->ServiceProvider->getServiceProvider());
		if(!empty($this->request->query)){
			
			if(!empty($this->request->query['from_date'])) {
				$fromDate = $this->DateFormat->formatDate2STDForReport($this->request->query['from_date'],Configure::read('date_format'))." 00:00:00";
			}else{
				$fromDate = date("Y-m-d")." 00:00:00";
			}
				
			if(!empty($this->request->query['to_date'])) {
				$toDate = $this->DateFormat->formatDate2STDForReport($this->request->query['to_date'],Configure::read('date_format'))." 23:59:59";
			}else{
				$toDate = date("Y-m-d")." 23:59:59";
			}
			
			if($this->request->query['service_provider_id'] != "all"){
				$conditions['ExternalRequisition.service_provider_id'] = $this->request->query['service_provider_id'];
			}
			
			if(!empty($this->request->query['mode'])){
				$conditions['ExternalRequisition.mode'] = $this->request->query['mode'];
			}
			
			$conditions[] = array('ExternalRequisition.created_time <=' => $toDate,'ExternalRequisition.created_time >=' => $fromDate);
			
			$this->ExternalRequisition->bindModel(array(
					'belongsTo' => array(
							'RadiologyTestOrder'=>array('foreignKey' => false,'conditions'=>array('RadiologyTestOrder.id=ExternalRequisition.radiology_test_order_id')),
							'Radiology'=>array('foreignKey' => false,'conditions'=>array('Radiology.id=RadiologyTestOrder.radiology_id')),
							'Patient'=>array('foreignKey' => false,'conditions'=>array('Patient.id=RadiologyTestOrder.patient_id')),
							'TariffStandard' => array('foreignKey'=>false,'conditions'=>array('TariffStandard.id=Patient.tariff_standard_id')),
							'ServiceProvider'=>array('foreignKey' => false,'conditions'=>array('ServiceProvider.id=RadiologyTestOrder.service_provider_id')),
							'TariffAmount'=>array('foreignKey' => false,'conditions'=>array('TariffAmount.tariff_list_id=Radiology.tariff_list_id' ,'TariffAmount.tariff_standard_id = Patient.tariff_standard_id')),
					)),false);
				
			$radData = $this->ExternalRequisition->find('all',array('fields'=>array('Patient.id','TariffStandard.*','Patient.lookup_name','Patient.age','Patient.sex','Patient.tariff_standard_id',
				'RadiologyTestOrder.*','ServiceProvider.name','ExternalRequisition.*','ServiceProvider.id','TariffAmount.nabh_charges,TariffAmount.non_nabh_charges'),
				'conditions' =>array($conditions,'RadiologyTestOrder.is_deleted'=>'0'),
				'group'=>array('RadiologyTestOrder.id')));
			 
			$this->set('radData',$radData);
			
			if(isset($this->request->query['generate_report'])){
				$this->layout = false;
				$this->render('external_requisition_reports_xls');
			}
		}
	}
	
	function referralReport($type=NULL,$paramsData=NULL){
		$this->uses = array('Patient','Person','MarketingTeam','Patient','ServiceCategory','ServiceBill','TariffStandard','FinalBilling','LaboratoryTestOrder','VoucherPayment',
				'RadiologyTestOrder','PharmacySalesBill','Consultant','ConsultantBilling','OptAppointment','SpotApproval');
		if($paramsData)
			$this->params->query=$paramsData;
		if(!empty($this->params->query))
		{
			$reportYear = $this->params->query['reportYear'];
			$reportMonth = $this->params->query['reportMonth'];
		
		if(empty($reportYear)){
			$reportYear=date('Y');
		}
		if(empty($reportMonth)){
			$reportMonth=date('m');
		}
		if(!empty($reportMonth)){
			$countDays = cal_days_in_month(CAL_GREGORIAN, $reportMonth, $reportYear); // Days of the month selected
			$fromDate = $reportYear."-".$reportMonth."-01 00:00:00";
			$toDate = $reportYear."-".$reportMonth."-".$countDays.' 23:59:59';
		} else {
			$fromDate = $reportYear."-01-01 00:00:00"; // set first date of current year
			$toDate = $reportYear."-12-31 23:59:59"; // set last date of current year
		}
		
		
		$conditions['VoucherPayment.date >='] = $fromDate;
		$conditions['VoucherPayment.date <='] = $toDate;
		$conditions['OR']=array(array('VoucherPayment.narration LIKE'=>"%"."Spot"."%") ,
							array('VoucherPayment.narration LIKE'=>"%"."Backing"."%"));		
	

		$implantId=$this->ServiceCategory->getServiceGroupId('implantsservices');
		$radiologyId=$this->ServiceCategory->getServiceGroupId('radiologyservices');
		$bloodId=$this->ServiceCategory->getServiceGroupId('bloodservices');
		
		$this->VoucherPayment->bindModel(array('belongsTo' => array(
				'Patient'=>array('type'=>'INNER','foreignKey'=>false, 'conditions' => array('Patient.id=VoucherPayment.patient_id')),
				'SpotApproval'=>array('foreignKey'=>false, 'conditions' => array('SpotApproval.voucher_payment_id=VoucherPayment.id')),
				'Billing'=>array('foreignKey'=>false, 'conditions' => array('Billing.patient_id=Patient.id')),
				'FinalBilling' =>array('foreignKey'=>false, 'conditions' => array('FinalBilling.patient_id=Patient.id')),
				'Consultant' =>array('foreignKey'=>false, 'conditions' => array('Consultant.id=Patient.consultant_id')),
				'User'=>array('foreignKey'=>false, 'conditions' => array('User.id=VoucherPayment.user_id')),
				'TariffStandard'=>array('foreignKey'=>false, 'conditions' => array('TariffStandard.id=Patient.tariff_standard_id')),
				'Person'=>array('foreignKey'=>false, 'conditions' => array('Person.id=Patient.person_id')),
				)),false);
		
		$conditions['VoucherPayment.is_deleted '] = 0;
		$conditions['VoucherPayment.type like'] ='RefferalCharges';
		
		 
	 		$patientSVals = $this->VoucherPayment->find('all',array(
				//'limit' => Configure::read('number_of_rows'),
				'order' => array('Patient.form_received_on ASC','VoucherPayment.date ASC'),
				'fields'=>array('VoucherPayment.id','Patient.id','VoucherPayment.date','VoucherPayment.narration','VoucherPayment.type','Patient.id',/* 'CONCAT(User.first_name," ",User.last_name) as name', */
					    'Patient.lookup_name','Patient.spot_date','Patient.b_amount','Patient.b_date','Patient.spot_amount','Patient.spot_date','Patient.b_amount','Patient.b_date','Patient.spot_amount','Patient.consultant_id',
						'Consultant.first_name','FinalBilling.discount','Consultant.last_name','VoucherPayment.create_time','Person.sex','Person.city','Person.dob','FinalBilling.amount_paid','VoucherPayment.paid_amount',
						'Consultant.market_team','Patient.selection','TariffStandard.name','Patient.form_received_on','FinalBilling.total_amount','Patient.discharge_date','FinalBilling.date',
						'Consultant.profit_percentage','SpotApproval.*'),
						 'conditions'=>array($conditions),'group'=>array('VoucherPayment.id'),
	 				'order'=>array('Consultant.first_name')));
		
		$data = $patientSVals ; 
		
		foreach($data as $patient){
			if($patient['Patient']['id']!=''){
				$patientData[$patient['VoucherPayment']['id']]['id']=$patient['VoucherPayment']['id'];
				$patientData[$patient['VoucherPayment']['id']]['patient_id']=$patient['Patient']['id'];
				$patientData[$patient['VoucherPayment']['id']]['name']=$patient['Patient']['lookup_name'];
				if(!empty($patient['Consultant']['first_name']))
					$patientData[$patient['VoucherPayment']['id']]['referal']=$patient['Consultant']['first_name'].' '.$patient['Consultant']['last_name'];
				else
				$patientData[$patient['VoucherPayment']['id']]['referal']='Direct';
				$patientData[$patient['VoucherPayment']['id']]['team']=$patient['Consultant']['market_team'];
				$patientData[$patient['VoucherPayment']['id']]['referal_percent']=$patient['Consultant']['profit_percentage'];
				$patientData[$patient['VoucherPayment']['id']]['admission_date']=$patient['Patient']['form_received_on'];
				$patientData[$patient['VoucherPayment']['id']]['discharge_date']=$patient['Patient']['discharge_date'];
				$patientData[$patient['VoucherPayment']['id']]['city']=$patient['Person']['city'];
				$patientData[$patient['VoucherPayment']['id']]['address']=$patient['0']['address'];
				$patientData[$patient['VoucherPayment']['id']]['tariff_type']=$patient['TariffStandard']['name'];
				$patientData[$patient['VoucherPayment']['id']]['dob']=$patient['Person']['dob'];
				$patientData[$patient['VoucherPayment']['id']]['sex']=$patient['Person']['sex'];
				$patientData[$patient['VoucherPayment']['id']]['selection']=$patient['Patient']['selection'];
				$patientData[$patient['VoucherPayment']['id']]['spot_amt']=$patient['Patient']['spot_amount'];
				$patientData[$patient['VoucherPayment']['id']]['voucher_date']=$patient['VoucherPayment']['date'];
				$patientData[$patient['VoucherPayment']['id']]['spot_date']=$patient['Patient']['spot_date'];
				$patientData[$patient['VoucherPayment']['id']]['b_amt']=$patient['Patient']['b_amount'];
				$patientData[$patient['VoucherPayment']['id']]['b_date']=$patient['Patient']['b_date'];
				$patientData[$patient['VoucherPayment']['id']]['discount']=$patient['FinalBilling']['discount'];
				$patientData[$patient['VoucherPayment']['id']]['paid_amt']=$patient['VoucherPayment']['paid_amount'];
				$patientData[$patient['VoucherPayment']['id']]['is_approved']=$patient['SpotApproval']['is_approved'];
				$patientData[$patient['VoucherPayment']['id']]['type']=$patient['SpotApproval']['type'];
				$patientData[$patient['VoucherPayment']['id']]['spot_approval_id']=$patient['SpotApproval']['id'];
				$patientData[$patient['VoucherPayment']['id']]['consultant_id']=$patient['Patient']['consultant_id'];
				/*$patientData[$patient['Patient']['id']]['discount']=$patient['FinalBilling']['discount'];
				$patientData[$patient['Patient']['id']]['amount_paid']=$patientData[$patient['Patient']['id']]['amount_paid']+$patient['0']['totalBillPaid'];*/
				$patientID[]=$patient['Patient']['id'];								
			
			}
			
		} 
		//debug($data);exit;
		//Final Bill and Billing charges
		//debug($patientData); exit;
		$this->loadModel('Billing');
		$this->loadModel('ServiceCategory');
		$this->loadModel('Configuration');
		$pharmacyCategoryId=$this->ServiceCategory->getPharmacyId();//in case need of pharmacy category ID
		$pharmConfig=$this->Configuration->getPharmacyServiceType();// to get pharmacy service type
		
		
		if($pharmConfig['addChargesInInvoice']=='yes'){
			$BillingAmt=$this->Billing->find('all',array('fields'=>array('Billing.patient_id',
					'Sum(Billing.amount) as paid','Sum(Billing.discount) as discount','Sum(Billing.paid_to_patient) as refund'),
					'conditions'=>array('Billing.patient_id'=>$patientID
							,'Billing.is_deleted'=>'0'),
					'group'=>array('Billing.patient_id')));
		}else{
			$BillingAmt=$this->Billing->find('all',array('fields'=>array('Billing.patient_id',
					'Sum(Billing.amount) as paid','Sum(Billing.discount) as discount','Sum(Billing.paid_to_patient) as refund'),
					'conditions'=>array('Billing.patient_id'=>$patientID,'Billing.payment_category !='=>$pharmacyCategoryId
							,'Billing.is_deleted'=>'0'),
					'group'=>array('Billing.patient_id')));
		}
		
		//Combine charges for blood and implant
		$bloodImpAmt=$this->ServiceBill->find('all',array('fields'=>array('ServiceBill.patient_id','ServiceBill.service_id','ServiceBill.no_of_times',
				'Sum(ServiceBill.amount * ServiceBill.no_of_times) as bloodCharges',),
				'conditions'=>array('ServiceBill.patient_id'=>$patientID,
						'ServiceBill.service_id'=>array($implantId['ServiceCategory']['id'],$bloodId['ServiceCategory']['id'])
						,'ServiceBill.is_deleted'=>'0'),
				'group'=>array('ServiceBill.patient_id')));
		
		
		$labAmt=$this->LaboratoryTestOrder->find('all',array('fields'=>array('LaboratoryTestOrder.patient_id',
				'Sum(LaboratoryTestOrder.amount) as labCharges','Sum(LaboratoryTestOrder.paid_amount) as labPaid'),
				'conditions'=>array('LaboratoryTestOrder.patient_id'=>$patientID
						,'LaboratoryTestOrder.is_deleted'=>'0'),
				'group'=>array('LaboratoryTestOrder.patient_id')));
		
		$surgeonAmt=$this->OptAppointment->find('all',array('fields'=>array('OptAppointment.patient_id',
				'Sum(OptAppointment.cost_to_hospital) as surgeonCharges','Sum(OptAppointment.anaesthesia_cost) as anaesthesiaCharges'),
				'conditions'=>array('OptAppointment.patient_id'=>$patientID
						,'OptAppointment.is_deleted'=>'0'),
				'group'=>array('OptAppointment.patient_id')));
		
		$pharmacyAmt=$this->PharmacySalesBill->find('all',array('fields'=>array('PharmacySalesBill.patient_id',
				'Sum(PharmacySalesBill.total) as pharmacyCharges'),
				'conditions'=>array('PharmacySalesBill.patient_id'=>$patientID
						,'PharmacySalesBill.is_deleted'=>'0'),
				'group'=>array('PharmacySalesBill.patient_id')));
		
		$visitAmt=$this->ConsultantBilling->find('all',array('fields'=>array('ConsultantBilling.patient_id',
				'Sum(ConsultantBilling.amount) as visitCharges'),
				'conditions'=>array('ConsultantBilling.patient_id'=>$patientID),
				'group'=>array('ConsultantBilling.patient_id')));
		
		$this->RadiologyTestOrder->bindModel(array('belongsTo'=>array(
				'Radiology'=>array('foreignKey'=>false,'conditions'=>array('Radiology.id=RadiologyTestOrder.radiology_id')))));
		
		$radAmt=$this->RadiologyTestOrder->find('all',array('fields'=>array('RadiologyTestOrder.patient_id',
					'Sum(RadiologyTestOrder.amount) as radCharges','Sum(RadiologyTestOrder.paid_amount) as radPaid'),
					'conditions'=>array('OR'=>array(array('Radiology.name LIKE'=>'CT%'),array('Radiology.name LIKE'=>'MRI%'),array('Radiology.name LIKE'=>'USG%')),'RadiologyTestOrder.patient_id'=>$patientID
					,'RadiologyTestOrder.is_deleted'=>'0'),
					'group'=>array('RadiologyTestOrder.patient_id')));
		foreach($BillingAmt as $paid){
			$billData['Bill'][$paid['Billing']['patient_id']]['amount_paid']=$billData['Bill'][$paid['Billing']['patient_id']]['amount_paid']+$paid['0']['paid'];
			$billData['Bill'][$paid['Billing']['patient_id']]['discount']=$billData['Bill'][$paid['Billing']['patient_id']]['discount']+$paid['0']['discount'];
		}
		foreach($radAmt as $rad){
			$billData['Bill'][$rad['RadiologyTestOrder']['patient_id']]['radCharges']=$billData['Bill'][$rad['RadiologyTestOrder']['patient_id']]['radCharges']+$rad['0']['radCharges'];
			$billData['Bill'][$rad['RadiologyTestOrder']['patient_id']]['rad_amount_paid']=$billData['Bill'][$rad['RadiologyTestOrder']['patient_id']]['rad_amount_paid']+$rad['0']['radPaid'];
		}
		foreach($labAmt as $lab){
			$billData['Bill'][$lab['LaboratoryTestOrder']['patient_id']]['labCharges']=$billData['Bill'][$lab['LaboratoryTestOrder']['patient_id']]['labCharges']+$lab['0']['labCharges'];
			$billData['Bill'][$lab['LaboratoryTestOrder']['patient_id']]['lab_amount_paid']=$billData['Bill'][$lab['LaboratoryTestOrder']['patient_id']]['lab_amount_paid']+$lab['0']['labPaid'];
		}
		foreach($bloodImpAmt as $amt){
			$billData['Bill'][$amt['ServiceBill']['patient_id']]['BloodImplantCharges']=$billData['Bill'][$amt['ServiceBill']['patient_id']]['Implant']+$amt['0']['bloodCharges'];
		}
		foreach($pharmacyAmt as $pharmacy){
			$billData['Bill'][$pharmacy['PharmacySalesBill']['patient_id']]['pharmacyCharges']=$billData['Bill'][$pharmacy['PharmacySalesBill']['patient_id']]['pharmacyCharges']+$pharmacy['0']['pharmacyCharges'];
		}
		foreach($visitAmt as $visit){
			$billData['Bill'][$visit['ConsultantBilling']['patient_id']]['visitCharges']=$billData['Bill'][$visit['ConsultantBilling']['patient_id']]['visitCharges']+$visit['0']['visitCharges'];
		}
		foreach($surgeonAmt as $surgeon){
			$billData['Bill'][$surgeon['OptAppointment']['patient_id']]['surgeonCharges']=$billData['Bill'][$surgeon['OptAppointment']['patient_id']]['surgeonCharges']+$surgeon['0']['surgeonCharges'];
			$billData['Bill'][$surgeon['OptAppointment']['patient_id']]['anaesthesiaCharges']=$billData['Bill'][$surgeon['OptAppointment']['patient_id']]['anaesthesiaCharges']+$surgeon['0']['anaesthesiaCharges'];
		}
		
		$this->set('marketing_teams', $this->MarketingTeam->find('list', array('fields'=> array('name', 'name'),'conditions'=>array('name != "" '),'order'=>array('MarketingTeam.name Asc'))));
		$this->set('totalImplantBlood ',$totalImplant);
		$this->set('patientData',$patientData);
		$this->set('billData',$billData);
		$this->set('data', $data);			
		$this->set('queryString',$this->request->query);
		$this->set(array('reportMonth'=>$reportMonth,'reportYear'=>$reportYear));
		//debug($this->MarketingTeam->find('list', array('fields'=> array('name', 'name'))));exit;
		if($type=='excel'){
			return array('patientData'=>$patientData,'billData'=>$billData,'reportMonth'=>$reportMonth,'reportYear'=>$reportYear);
		}
		}
	}
	
	public function referalExcel($type){
		$this->autoRender = false ;
		if(empty($this->params->query)){
			$this->params->query['reportMonth']=date('m');
			$this->params->query['reportYear']=date('Y');
		}
		$data=$this->referralReport('excel',$this->params->query);
		$this->PhpExcel->createWorksheet()->setDefaultFont('Times New Roman', 12); //to set the font and size
		// Create a first sheet, representing Product data
		$this->PhpExcel->setActiveSheetIndex(0);
		$this->PhpExcel->getActiveSheet()->setTitle('Referal Report');	//to set the worksheet title
		$this->PhpExcel->getActiveSheet()->getStyle("C".$this->PhpExcel->_row)->getFont()->setBold(true);
		$this->PhpExcel->addTableRow(array("","","REFERAL REPORT ".$data['reportMonth']."-".$data['reportYear'],"",""));
		$this->PhpExcel->addTableRow(array("","","","",""));
		// define table cells
		$tableHeads = array(
				array('label' => __('SR.NO'), 'filter' => true),
				array('label' => __('REFERAL NAME'), 'filter' => true,'width' => 22, 'wrap' => true),
				array('label' => __('REFERAL %'),'width' => 8),
				array('label' => __('AMNT EXCLUDING EXPENSES'),'width' => 12),
				array('label' => __('REFERAL AMNT'),'width' => 10),				
				array('label' => __('TOTAL AMNT PAID TO REFERAL'),'width' => 12),
				array('label' => __('REFERAL BALANCE AMNT'),'width' => 10),
				
		);
		// add heading with different font and bold text
		$this->PhpExcel->addTableHeader($tableHeads, array('name' => 'Cambria', 'bold' => true));
		// for align header text center
		$this->PhpExcel->getActiveSheet()->getStyle('A3:G3')->getAlignment()->applyFromArray(
				array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical'   => PHPExcel_Style_Alignment::VERTICAL_CENTER,
						'rotation'   => 0,
						'wrap'       => true
				)
		);
		
		$val=0;$val1=0;
		foreach($data['patientData'] as $refKey=>$referal){
			$getexcludingExp=0;$getDiffFinal=0;$getDiff=0;
			if($data['billData']['Bill'][$referal['patient_id']]['amount_paid']){
				$getDiff=$data['billData']['Bill'][$referal['patient_id']]['amount_paid']-$data['billData']['Bill'][$referal['patient_id']]['pharmacyCharges'];
				$getDiffFinal=$getDiff-($data['billData']['Bill'][$referal['patient_id']]['radCharges']+
						$data['billData']['Bill'][$referal['patient_id']]['labCharges']);
				$getexcludingExp=$getDiffFinal-$data['billData']['Bill'][$referal['patient_id']]['BloodImplantCharges'];
			}else{
				$getexcludingExp=0;
			}
			$totExcExp[$referal['patient_id']]=$getexcludingExp;
			$refArray[$referal['consultant_id']]['name']=$referal['referal'];
			$refArray[$referal['consultant_id']]['referal_percent']=$referal['referal_percent'].' %';
			//$getexcludingExp=$this->Number->format(round($getexcludingExp));
			$referalAmt=0;
			$referalAmt=($getexcludingExp*$referal['referal_percent'])/100;
				
			if($referal['type']=='S'){
				$val=$val+$referal['paid_amt'];
				$refArray[$referal['consultant_id']]['paid_amt']=$refArray[$referal['consultant_id']]['paid_amt']+$referal['paid_amt'];
			}
			if($referal['type']=='B'){
				$val1=$val1+$referal['paid_amt'];
				$refArray[$referal['consultant_id']]['paid_amt']=$refArray[$referal['consultant_id']]['paid_amt']+$referal['paid_amt'];
			}
			$bal=$referalAmt-$referal['paid_amt'];
			$totBal[$referal['patient_id']]=$bal;
				
			if(empty($patientId[$referal['patient_id']])){
				$refArray[$referal['consultant_id']]['getexcludingExp']=$refArray[$referal['consultant_id']]['getexcludingExp']+$getexcludingExp;
				$refArray[$referal['consultant_id']]['referalAmt']=$refArray[$referal['consultant_id']]['referalAmt']+$referalAmt;
				$refArray[$referal['consultant_id']]['bal']=$refArray[$referal['consultant_id']]['bal']+$bal;
				$patientId[$referal['patient_id']]=$referal['patient_id'];
			}
			$bal=0;
			$referalAmt=0;
			$getexcludingExp=0;
		
		}
		
		
		
		$srno=1;
		foreach($refArray as $refKey=>$referal){
			$name=$referal['name'];
			$percent=$referal['referal_percent'];
			$exp=isset($referal['getexcludingExp'])?round($referal['getexcludingExp']):'0';
			$refAmt=isset($referal['referalAmt'])?round($referal['referalAmt']):'0';
			$paid=isset($referal['paid_amt'])?round($referal['paid_amt']):'0';
			$bal=isset($referal['bal'])?round($referal['bal']):'0';
			$this->PhpExcel->addTableRow(array($srno,$name,$percent,$exp,$refAmt,$paid,$bal));
			$name='';$percent=0;$exp=0;$refAmt=0;$paid=0;$bal=0;
			$srno++;
		}
		
		foreach($totExcExp as $exp){
			$Exps=$Exps+$exp;
		}
		
		$totAmt=$val+$val1;
		
		
		foreach($totBal as $bal){
			$tBal=$tBal+$bal;
		}
		//debug($this->PhpExcel->_row);exit;
		$totalExp="=SUM(D4:D".$this->PhpExcel->_row.")";
		//debug($totalExp);exit;
		$totalAmount="=SUM(F4:F".$this->PhpExcel->_row.")";
		$totalBal="=SUM(G4:G".$this->PhpExcel->_row.")";
		$countRow= $this->PhpExcel->_row+1;
		$totalCellBlock="B".$countRow;
		$totalTextBlock1="D".$countRow;
		$totalTextBlock2="F".$countRow;
		$totalTextBlock3="G".$countRow;
		
		$this->PhpExcel->getActiveSheet()->getStyle($totalCellBlock)->getFont()->setBold(true);
		$this->PhpExcel->getActiveSheet()->getStyle($totalTextBlock1)->getFont()->setBold(true);
		$this->PhpExcel->getActiveSheet()->getStyle($totalTextBlock2)->getFont()->setBold(true);
		$this->PhpExcel->getActiveSheet()->getStyle($totalTextBlock3)->getFont()->setBold(true);
		$this->PhpExcel->getActiveSheet()->setCellValue($totalCellBlock,"TOTAL" );
		$this->PhpExcel->getActiveSheet()->setCellValue($totalTextBlock1,round($Exps));
		$this->PhpExcel->getActiveSheet()->setCellValue($totalTextBlock2,round($totAmt));
		$this->PhpExcel->getActiveSheet()->setCellValue($totalTextBlock3,round($tBal));
		// close table and output
		$this->PhpExcel->addTableFooter()->output('Referal Report');	//Store Location List (file name)
		
	}

	//function to get the formulary of pharmacy products by Swapnil - 28-09-2015
	public function admin_pharmacy_formulary($generateExcel = null){
		$this->layout = "advance";
		$this->uses = array('PharmacyItem');
		($this->PharmacyItem->hasMany = array());
		$result = $this->PharmacyItem->find('all',array(
				'fields'=>array('PharmacyItem.id,PharmacyItem.name,PharmacyItem.pack,PharmacyItem.generic,PharmacyItem.manufacturer'),
				'conditions'=>array('PharmacyItem.is_deleted'=>'0','PharmacyItem.drug_id NOT'=>"NULL"),
				'order'=>array('PharmacyItem.name'=>'ASC'),
				'group'=>array('PharmacyItem.id')));
		$this->set('result',$result);
		
		if(!empty($generateExcel)){
			$this->layout = false;
			$this->render('pharmacy_formulary_xls');
		}
	}

    //function to get the whole sales product for patient by Swapnil - 07.11.2015
    public function productWiseSales(){
        $this->layout ='advance';
        $this->uses = array("PharmacySalesBill","InventoryPharmacySalesReturn","PharmacyItem","PharmacySalesBillDetail","Initial","ServiceCategory",'Billing');
        $this->set('title_for_layout', __('Product Wise Report', true));
        if ($this->request->query) {
            $patientId = $this->request->query['patient_id'];
            $salesBillIds = $this->PharmacySalesBill->find('list',array('conditions'=>array('PharmacySalesBill.is_deleted'=>'0','PharmacySalesBill.patient_id'=>$patientId)));
            $this->PharmacySalesBillDetail->unbindModel(array('belongsTo'=>array('PharmacySalesBill')));
            $this->PharmacySalesBillDetail->bindModel(array(
                'belongsTo'=>array(
                    'PharmacyItemRate'=>array(
                        'foreignKey'=>false,
                        'conditions'=>array(
                            'PharmacySalesBillDetail.item_id = PharmacyItemRate.item_id',
                            'PharmacySalesBillDetail.batch_number = PharmacyItemRate.batch_number'
                        )
                    )
                )
            )); 
            $salesData = $this->PharmacySalesBillDetail->find('all',array(
                'fields'=>array('PharmacyItem.name','PharmacySalesBillDetail.*','PharmacyItemRate.*'),
                'conditions'=>array('PharmacySalesBillDetail.pharmacy_sales_bill_id'=>$salesBillIds)));
              
            foreach($salesData as $keys => $vals){
                $packOFproduct = (int)$vals['PharmacySalesBillDetail']['pack']; 
                $price = (float)$vals['PharmacySalesBillDetail']['mrp']; 
                $qty = $vals['PharmacySalesBillDetail']['qty'];
                $total = ($price/$packOFproduct)*$qty; 
                $purchase_price = ($vals['PharmacyItemRate']['purchase_price']/$packOFproduct)*$qty;  
                $returnArr[$vals['PharmacySalesBillDetail']['item_id']]['name'] = $vals['PharmacyItem']['name'];
                $returnArr[$vals['PharmacySalesBillDetail']['item_id']]['qty'] = $returnArr[$vals['PharmacySalesBillDetail']['item_id']]['qty'] + $qty;
                $returnArr[$vals['PharmacySalesBillDetail']['item_id']]['sale_price'] = $returnArr[$vals['PharmacySalesBillDetail']['item_id']]['sale_price'] + $total;
                $returnArr[$vals['PharmacySalesBillDetail']['item_id']]['purchase_price'] = $returnArr[$vals['PharmacySalesBillDetail']['item_id']]['purchase_price'] + $purchase_price;
            } 
            $this->set('salesData',$returnArr);              
            if(!empty($this->request->query['generate_excel'])){
                $this->layout = false; 
                $this->set('patient_name',$this->request->query['lookup_name']);
                $this->render('product_wise_sales_xls');						
            }  
        }
    }
    
    //function to get the list of RGJAY non-discharge patients having pharmacy total (considering purchase price) and RGJAY package
    public function getRgjayPackageAndPharmacyAmount($action = null){
        $this->layout ='advance';
        $this->uses = array("PharmacySalesBill","PharmacySalesBillDetail","Initial","Patient","ServiceBill");
        $this->set('title_for_layout', __('RGJAY Package & Pharmacy Sales List', true));
        $pharmacyObj = new PharmacyController();
        
        $patientList = $this->Patient->find('list',array('fields'=>array('id','lookup_name'),'conditions'=>array('Patient.admission_type'=>"IPD",'Patient.is_deleted'=>'0',
            'Patient.tariff_standard_id'=>'25','Patient.is_discharge'=>'0'),'order'=>array('Patient.id'=>'DESC')));
        
        foreach($patientList as $key => $val){ 
            $patientSales[$key]['name'] = $val;
            $patientSales[$key]['pharmacy_sales_purchase_price'] = $pharmacyObj->getPharmacySumOfPurchasePriceOfSales($key)['total']; 
            $patientSales[$key]['pharmacy_sales_paid'] = $pharmacyObj->getPharmacySumOfPurchasePriceOfSales($key)['paid']; 
            $patientSales[$key]['pharmacy_sales_mrp'] = $pharmacyObj->getPharmacySalesCost($key)[0]['total']; 
            $patientSales[$key]['package_amount'] = $this->ServiceBill->getRgjayPackageAmount($key); 
        }   
        $this->set(compact('patientSales'));
        if($action == "generate_excel"){
            $this->layout = false;
            $this->render('get_rgjay_package_and_pharmacy_amount_xls');
        }
    }
    
    //function to get the list of adjusted stock by Swapnil - 13.11.2015
    public function stockAdjustedReport(){ 
        $this->uses = array("StockAdjustment","Product","User"); 
        $this->set('title_for_layout', __('Stock Adjusted List', true));
        $cond = array();
        if(!empty($this->request->query)){ 
            if($this->request->query['from']){
                $from = $this->DateFormat->formatDate2STDForReport($this->request->query['from'],Configure::read('date_format'))." 00:00:00"; 
            }else{
                $from = date("Y-m-d ")."00:00:00";
            }
            
            if($this->request->query['to']){
                $to = $this->DateFormat->formatDate2STDForReport($this->request->query['to'],Configure::read('date_format'))." 23:59:59";
            }else{
                $to = date("Y-m-d ")."23:23:59";
            }
            $cond['StockAdjustment.created between ? and ?'] =  array($from,$to);  
            $this->StockAdjustment->bindModel(array('belongsTo'=>array(
                            'Product'=>array('foreignKey'=>'product_id'),
                            'User'=>array('foreignKey'=>'created_by','fields'=>array('User.first_name','User.last_name')))));
            $data = $this->StockAdjustment->find('all',array('fields'=>array('CONCAT(User.first_name," ",User.last_name) as name','StockAdjustment.id','StockAdjustment.batch_number','StockAdjustment.sur_plus','StockAdjustment.sur_minus','StockAdjustment.created','Product.name'),'conditions'=>$cond));
        }
        $this->set('stockData',$data);
        if(!empty($this->request->query['generate_excel'])){
            $this->layout = false;
            $this->render('stock_adjusted_report_xls');
        }
    }
     
    function iStatReport(){
    	$this->uses = array('Patient');
    	$patientData=$this->Patient->find('all',array('fields'=>array('id','age','patient_id','lookup_name','test_result','sex'),'conditions'=>array('Patient.test_result IS NOT NULL')));;
		$this->set('patientData',$patientData);
    }
    
    function testResult($type=null){
    	$this->layout="advance";
    	$this->uses = array('Patient','User');
    	if(!empty($this->params->pass[0])){
    		$testDetails=$this->Patient->find('first',array('fields'=>array('test_result'),'conditions'=>array('Patient.id'=>$this->params->pass[0])));
    		$this->set('testDetails',$testDetails);
    	}
    	
    	$allDoctorList=$this->User->getAllDoctorList();
    	$this->set('allDoctorList',$allDoctorList);
		if($this->request->data['Patient']){
			$testResultData=serialize($this->request->data['Patient']);
			if($this->Patient->updateAll(array('Patient.test_result' => "'".$testResultData."'"),array('Patient.id'=> $this->request->data['Patient']['patient_id']))){
				$this->redirect(array("controller" => "reports", "action" => "iStatReport",'?'=>array('print'=>$this->request->data['Patient']['patient_id']),'admin'=>false));
			}
		}
    	//$this->redirect(array("controller" => "reports", "action" => "iStatReport",'admin'=>false));
    	if($type=='pdfs'){
    		//$this->layout='pdf';
			$this->layout = false;
    		$resultDate = $this->DateFormat->formatDate2STD($this->request->data['Patient']['result_date'],Configure::read('date_format'));
    		$date=date('H:i dMy',strtotime($resultDate));
    		$this->set('date',$date);
    		$this->set('data',$this->request->data);
    		//$this->render('test_result_pdf',false);
			$this->render('test_image');
    	}
    	
    }

	 function printTestResult($type=null){ 
    	$this->layout=false;
    	$this->uses = array('Patient','User');
    	if(!empty($this->params->pass[0])){
    		$testDetails=$this->Patient->find('first',array('fields'=>array('test_result'),'conditions'=>array('Patient.id'=>$this->params->pass[0])));
			if(!empty($testDetails)){
				$result['Patient'] = unserialize($testDetails['Patient']['test_result']); 
                                $resultDate = $this->DateFormat->formatDate2STD($result['Patient']['result_date'],Configure::read('date_format'));
    		$date=date('H:i dMy',strtotime($resultDate));
    		$this->set('date',$date);
			}
    		$this->set('data',$result);
    	} 
    }
	
    //Marketing Team Collectiopn Report
    public function marketing_team_collection(){
    	$this->uses = array('MarketingTeam','VoucherPayment','Patient','Consultant','SpotApproval','Billing','Configuration','ServiceCategory');
    	$this->set('marketing_teams', $this->MarketingTeam->find('list', array('fields'=> array('name', 'name'),'conditions'=>array('name != "" '),'order'=>array('MarketingTeam.name Asc'))));
    	
    	if($this->request->query){
    		if(!empty($this->request->query['market_team'])){
    			$consuCondition['Consultant.market_team'] = $this->request->query['market_team'];
    		}
    		if(!empty($this->request->query['dateFrom1']))
    		{
    			if($this->request->query['dateFrom1'])
    			{
    				$from = $this->DateFormat->formatDate2STD($this->request->query['dateFrom1'],Configure::read('date_format'))." 00:00:00";
    				$conditions['Patient.discharge_date >='] = $from;
    			}
    		}
    		
    		if(!empty($this->request->query['dateTo1']))
    		{
    			if($this->request->query['dateTo1'])
    			{
    				$to = $this->DateFormat->formatDate2STD($this->request->query['dateTo1'],Configure::read('date_format'))." 23:59:59";
    				$conditions['Patient.discharge_date <='] = $to;
    			}
    		}
    		
    	}else{
    		$month_prev_date = date("Y-m-d", strtotime( date( "Y-m-d", strtotime( date("Y-m-d") ) ) . "-1 month" ) );
    		$conditions['Patient.discharge_date >='] = $month_prev_date;
    	}
    	
    	$conditions['VoucherPayment.is_deleted '] = 0;
    	$conditions['VoucherPayment.type like'] ='RefferalCharges';
    	$conditions['Patient.is_discharge'] = 1;
    	
    	$team = $this->MarketingTeam->find('list',array('conditions'=>array('MarketingTeam.location_id NOT'=>null,'MarketingTeam.is_deleted = 0'))); 
    	$this->set('team',$team);
    	$consultantDetails = $this->Consultant->find('all',array('fields'=>array('Consultant.id','Consultant.market_team','Consultant.first_name','Consultant.last_name','Consultant.profit_percentage',
    			'Consultant.referal_spot_amount'),
    			'conditions'=>array('Consultant.market_team IS NOT NULL',$consuCondition)
    	));
    	$this->set('consultantDetails',$consultantDetails);
    	$this->VoucherPayment->bindModel(array('belongsTo' => array(
    			'Patient'=>array('type'=>'INNER','foreignKey'=>false, 'conditions' => array('Patient.id=VoucherPayment.patient_id')),
    	)),false);
    	 
    	$payment_details = $this->VoucherPayment->find('all',array(
    			'order' => array('Patient.form_received_on ASC','VoucherPayment.date ASC'),
    			'fields'=>array('VoucherPayment.id','VoucherPayment.date','VoucherPayment.narration','VoucherPayment.type','VoucherPayment.create_time','VoucherPayment.paid_amount','Patient.id',
    					'Patient.lookup_name','Patient.form_received_on','Patient.consultant_id','Patient.discharge_date'),
    			'conditions'=>array($conditions),
    			'group'=>array('VoucherPayment.id'),
    			'group'=>array('Patient.id')
    	));
    	
    	$this->set('payment_details',$payment_details);
    	$team_array = array();
    	foreach($consultantDetails as $key=>$val){
    		foreach($payment_details as $key=>$payDetail){ 
    			$ConsultantId = unserialize($payDetail['Patient']['consultant_id']); //debug($payDetail['Patient']['id']);//debug($ConsultantId);
    			foreach($ConsultantId as $ck=>$cval){ 
    				if($cval == $val['Consultant']['id']){ //debug($payDetail['Patient']['id']." ".$payDetail['Patient']['lookup_name']);
    					$pharmConfig=$this->Configuration->getPharmacyServiceType();// to get pharmacy service type
    					$pharmacyCategoryId=$this->ServiceCategory->getPharmacyId();//in case need of pharmacy category ID
    					if($pharmConfig['addChargesInInvoice']=='yes'){
    						$BillingAmt=$this->Billing->find('all',array('fields'=>array('Billing.patient_id',
    								'Sum(Billing.amount) as paid','Sum(Billing.discount) as discount','Sum(Billing.paid_to_patient) as refund'),
    								'conditions'=>array('Billing.patient_id'=>$payDetail['Patient']['id']
    										,'Billing.is_deleted'=>'0'),
    								'group'=>array('Billing.patient_id')));
    					}else{
    						$BillingAmt=$this->Billing->find('all',array('fields'=>array('Billing.patient_id',
    								'Sum(Billing.amount) as paid','Sum(Billing.discount) as discount','Sum(Billing.paid_to_patient) as refund'),
    								'conditions'=>array('Billing.patient_id'=>$payDetail['Patient']['id'],'Billing.payment_category !='=>$pharmacyCategoryId
    										,'Billing.is_deleted'=>'0'),
    								'group'=>array('Billing.patient_id')));
    					
    					}
    					//debug($payDetail['Patient']['lookup_name']);
    					//debug($ConsultantId);
    					foreach($BillingAmt as $paid){
    						$billData[$val['Consultant']['market_team']][$payDetail['Patient']['id']]['discharge_date'] =$payDetail['Patient']['discharge_date'];
    						$billData[$val['Consultant']['market_team']][$payDetail['Patient']['id']]['patient_name'] = $payDetail['Patient']['lookup_name'];
    						$billData[$val['Consultant']['market_team']][$payDetail['Patient']['id']]['team'] = $val['Consultant']['market_team'];
	    					$billData[$val['Consultant']['market_team']][$payDetail['Patient']['id']]['amount_paid']= ($billData[$val['Consultant']['market_team']][$payDetail['Patient']['id']]['amount_paid']+$paid['0']['paid']);
	    					$billData[$val['Consultant']['market_team']][$payDetail['Patient']['id']]['divided'] = $billData[$val['Consultant']['market_team']][$payDetail['Patient']['id']]['amount_paid']/count($ConsultantId);
	    					
	    				}
	    				//debug($billData);
	    			} //End Of If
    			} //End of foreach
    		}
    	}//debug($billData);
    	$this->set('billData',$billData); 
    }
    // END of Marketing Team Collectiopn Report
    
    public function getServicesPaidAmount($patientID = null){
    	$this->uses = array('ServiceBill','LaboratoryTestOrder','Billing','ServiceCategory','Configuration','OptAppointment','PharmacySalesBill','ConsultantBilling','RadiologyTestOrder');
    	
    	$pharmacyCategoryId=$this->ServiceCategory->getPharmacyId();//in case need of pharmacy category ID
    	$pharmConfig=$this->Configuration->getPharmacyServiceType();// to get pharmacy service type
    	$implantId=$this->ServiceCategory->find('first',array('fields'=>array('id'),'conditions'=>array('ServiceCategory.name LIKE'=>Configure::read('implantsservices'))));
    	$radiologyId=$this->ServiceCategory->find('first',array('fields'=>array('id'),'conditions'=>array('ServiceCategory.name LIKE'=>Configure::read('radiologyservices'))));
    	$bloodId=$this->ServiceCategory->find('first',array('fields'=>array('id'),'conditions'=>array('ServiceCategory.name LIKE'=>Configure::read('bloodservices'))));
    	
    	if($pharmConfig['addChargesInInvoice']=='yes'){
    		$BillingAmt=$this->Billing->find('all',array('fields'=>array('Billing.patient_id',
    				'Sum(Billing.amount) as paid','Sum(Billing.discount) as discount','Sum(Billing.paid_to_patient) as refund'),
    				'conditions'=>array('Billing.patient_id'=>$patientID
    						,'Billing.is_deleted'=>'0'),
    				'group'=>array('Billing.patient_id')));
    	}else{
    		$BillingAmt=$this->Billing->find('all',array('fields'=>array('Billing.patient_id',
    				'Sum(Billing.amount) as paid','Sum(Billing.discount) as discount','Sum(Billing.paid_to_patient) as refund'),
    				'conditions'=>array('Billing.patient_id'=>$patientID,'Billing.payment_category !='=>$pharmacyCategoryId
    						,'Billing.is_deleted'=>'0'),
    				'group'=>array('Billing.patient_id')));
    			
    	}
    	
    	//Combine charges for blood and implant
    	$bloodImpAmt=$this->ServiceBill->find('all',array('fields'=>array('ServiceBill.patient_id','ServiceBill.service_id','ServiceBill.no_of_times',
    			'Sum(ServiceBill.amount * ServiceBill.no_of_times) as bloodCharges',),
    			'conditions'=>array('ServiceBill.patient_id'=>$patientID,
    					'ServiceBill.service_id'=>array($implantId['ServiceCategory']['id'],$bloodId['ServiceCategory']['id'])
    					,'ServiceBill.is_deleted'=>'0'),
    			'group'=>array('ServiceBill.patient_id')));
    	
    	
    	$labAmt=$this->LaboratoryTestOrder->find('all',array('fields'=>array('LaboratoryTestOrder.patient_id',
    			'Sum(LaboratoryTestOrder.amount) as labCharges','Sum(LaboratoryTestOrder.paid_amount) as labPaid'),
    			'conditions'=>array('LaboratoryTestOrder.patient_id'=>$patientID
    					,'LaboratoryTestOrder.is_deleted'=>'0'),
    			'group'=>array('LaboratoryTestOrder.patient_id')));
    	
    	$surgeonAmt=$this->OptAppointment->find('all',array('fields'=>array('OptAppointment.patient_id',
    			'Sum(OptAppointment.cost_to_hospital) as surgeonCharges','Sum(OptAppointment.anaesthesia_cost) as anaesthesiaCharges'),
    			'conditions'=>array('OptAppointment.patient_id'=>$patientID
    					,'OptAppointment.is_deleted'=>'0'),
    			'group'=>array('OptAppointment.patient_id')));
    	
    	$pharmacyAmt=$this->PharmacySalesBill->find('all',array('fields'=>array('PharmacySalesBill.patient_id',
    			'Sum(PharmacySalesBill.total) as pharmacyCharges'),
    			'conditions'=>array('PharmacySalesBill.patient_id'=>$patientID
    					,'PharmacySalesBill.is_deleted'=>'0'),
    			'group'=>array('PharmacySalesBill.patient_id')));
    	
    	$visitAmt=$this->ConsultantBilling->find('all',array('fields'=>array('ConsultantBilling.patient_id',
    			'Sum(ConsultantBilling.amount) as visitCharges'),
    			'conditions'=>array('ConsultantBilling.patient_id'=>$patientID),
    			'group'=>array('ConsultantBilling.patient_id')));
    	
    	$this->RadiologyTestOrder->bindModel(array('belongsTo'=>array(
    			'Radiology'=>array('foreignKey'=>false,'conditions'=>array('Radiology.id=RadiologyTestOrder.radiology_id')))));
    	
    	$radAmt=$this->RadiologyTestOrder->find('all',array('fields'=>array('RadiologyTestOrder.patient_id',
    			'Sum(RadiologyTestOrder.amount) as radCharges','Sum(RadiologyTestOrder.paid_amount) as radPaid'),
    			'conditions'=>array(/* 'OR'=>array(array('Radiology.name LIKE'=>'CT%'),array('Radiology.name LIKE'=>'MRI%'),array('Radiology.name LIKE'=>'USG%')) */'RadiologyTestOrder.patient_id'=>$patientID
    					,'RadiologyTestOrder.is_deleted'=>'0'),
    			'group'=>array('RadiologyTestOrder.patient_id')));
    	foreach($BillingAmt as $paid){
    		$billData['Bill'][$paid['Billing']['patient_id']]['amount_paid']=$billData['Bill'][$paid['Billing']['patient_id']]['amount_paid']+$paid['0']['paid'];
    		$billData['Bill'][$paid['Billing']['patient_id']]['discount']=$billData['Bill'][$paid['Billing']['patient_id']]['discount']+$paid['0']['discount'];
    	}
    	foreach($radAmt as $rad){
    		$billData['Bill'][$rad['RadiologyTestOrder']['patient_id']]['radCharges']=$billData['Bill'][$rad['RadiologyTestOrder']['patient_id']]['radCharges']+$rad['0']['radCharges'];
    		$billData['Bill'][$rad['RadiologyTestOrder']['patient_id']]['rad_amount_paid']=$billData['Bill'][$rad['RadiologyTestOrder']['patient_id']]['rad_amount_paid']+$rad['0']['radPaid'];
    	}
    	foreach($labAmt as $lab){
    		$billData['Bill'][$lab['LaboratoryTestOrder']['patient_id']]['labCharges']=$billData['Bill'][$lab['LaboratoryTestOrder']['patient_id']]['labCharges']+$lab['0']['labCharges'];
    		$billData['Bill'][$lab['LaboratoryTestOrder']['patient_id']]['lab_amount_paid']=$billData['Bill'][$lab['LaboratoryTestOrder']['patient_id']]['lab_amount_paid']+$lab['0']['labPaid'];
    	}
    	foreach($bloodImpAmt as $amt){
    		$billData['Bill'][$amt['ServiceBill']['patient_id']]['BloodImplantCharges']=$billData['Bill'][$amt['ServiceBill']['patient_id']]['Implant']+$amt['0']['bloodCharges'];
    	}
    	foreach($pharmacyAmt as $pharmacy){
    		$billData['Bill'][$pharmacy['PharmacySalesBill']['patient_id']]['pharmacyCharges']=$billData['Bill'][$pharmacy['PharmacySalesBill']['patient_id']]['pharmacyCharges']+$pharmacy['0']['pharmacyCharges'];
    	}
    	foreach($visitAmt as $visit){
    		$billData['Bill'][$visit['ConsultantBilling']['patient_id']]['visitCharges']=$billData['Bill'][$visit['ConsultantBilling']['patient_id']]['visitCharges']+$visit['0']['visitCharges'];
    	}
    	foreach($surgeonAmt as $surgeon){
    		$billData['Bill'][$surgeon['OptAppointment']['patient_id']]['surgeonCharges']=$billData['Bill'][$surgeon['OptAppointment']['patient_id']]['surgeonCharges']+$surgeon['0']['surgeonCharges'];
    		$billData['Bill'][$surgeon['OptAppointment']['patient_id']]['anaesthesiaCharges']=$billData['Bill'][$surgeon['OptAppointment']['patient_id']]['anaesthesiaCharges']+$surgeon['0']['anaesthesiaCharges'];
    	}
    	
    	$this->set('billData',$billData);
    }
	
	public function getRgjaySalesVoucherCollectionReport($from,$to){
		$this->uses = array();
		
		$this->loadModel('ServiceCategory'); 
		$pharmacyCategoryId=$this->ServiceCategory->getPharmacyId();//in case need of pharmacy category ID  
		
		$this->loadModel('TariffStandard');   
		$tariffCond['Patient.tariff_standard_id'] = $this->TariffStandard->getTariffStandardID('RGJAY');
		
		$this->Billing->bindModel(array('belongsTo'=>array(
				'Patient'=>array(
					'foreignKey'=>false,
					'type'=>'inner',
					'conditions'=>array('Billing.patient_id = Patient.id')
				)
			))); 
			
		$recordBilling = $this->Billing->find("all",array("fields"=>array("SUM(Billing.amount) as billingAmt","Billing.patient_id"),
				"conditions"=>array("Billing.location_id" =>$this->Session->read('locationid'),
						'Billing.date <=' => $to, 'Billing.date >=' => $from,
						"Billing.payment_category"=>$pharmacyCategoryId,$tariffCond,
						"Billing.amount <>"=>0
				),"group"=>array('Billing.id')			
		));
	
		$billongAmt=0;
		foreach($recordBilling as $keyBill=>$recordBillings){
			$billongAmt=$billongAmt+$recordBillings[0]['billingAmt']; //for hope only
		}
		
		$this->PharmacySalesBill->unBindModel(array('belongsTo'=>array('Patient','Doctor','Initial'),'hasMany'=>array('PharmacySalesBillDetail')));
		$this->PharmacySalesBill->bindModel(array('belongsTo'=>array(
				'Patient'=>array(
					'foreignKey'=>false,
					'type'=>'inner',
					'conditions'=>array('PharmacySalesBill.patient_id = Patient.id')
				)
			)),false);
		
		$record = $this->PharmacySalesBill->find("all",array("fields"=>array("PharmacySalesBill.*"),
				"conditions"=>array("PharmacySalesBill.location_id" =>$this->Session->read('locationid'),
						'PharmacySalesBill.create_time <=' => $to, 'PharmacySalesBill.create_time >=' => $from,
						'PharmacySalesBill.payment_mode' => array("cash", "credit"),$tariffCond
				),"group"=>array('PharmacySalesBill.id')));

		$totalCreditAmt=0;
		$totalCashAmt=0;
		$getTotalAmt=0;
		$getTotalDiscAmt=0;
		$getGrossAmt=0;
		foreach($record as $key=>$value){
			if(trim(strtolower($value['PharmacySalesBill']['payment_mode']))=='credit'){
				$flagCredit=true;
				if(empty($value['PharmacySalesBill']['paid_amnt'])){
					$value['PharmacySalesBill']['paid_amnt']=$value['PharmacySalesBill']['total'];
				}
				
				$totalCreditAmt=$totalCreditAmt+$value['PharmacySalesBill']['paid_amnt'];
				
			}else if(trim(strtolower($value['PharmacySalesBill']['payment_mode']))=='cash'){
				$flagCash=true;
				if(empty($value['PharmacySalesBill']['paid_amnt'])){
					$value['PharmacySalesBill']['paid_amnt']=$value['PharmacySalesBill']['total'];
				}
				$totalCashAmt=$totalCashAmt+$value['PharmacySalesBill']['paid_amnt'];
			}
			if(empty($value['PharmacySalesBill']['paid_amnt'])){
				$value['PharmacySalesBill']['paid_amnt']=$value['PharmacySalesBill']['total'];
			}
			$getTotalAmt=$getTotalAmt+$value['PharmacySalesBill']['paid_amnt'];
			$getTotalDiscAmt=$getTotalDiscAmt+$value['PharmacySalesBill']['discount'];
			$getGrossAmt=$getGrossAmt+$value['PharmacySalesBill']['total'];
		}
		
		$totalCreditAmt1=$totalCreditAmt-$billongAmt; 
		//$this->set('reports',$record);
		//$this->set(array('flagCash'=>$flagCash,'flagCredit'=>$flagCredit,'totalCreditAmt'=>$totalCreditAmt1,'totalCashAmt'=>$billongAmt,'getTotalAmt'=>$getTotalAmt,'getTotalDiscAmt'=>$getTotalDiscAmt,'getGrossAmt'=>$getGrossAmt));
			
	}
        
        public function pharmacySaleOfRgjayReport($from,$to){ 
               
            $pharmacy = new PharmacyController();
            $data = $pharmacy->getPharmacySumOfPurchasePriceOfAllSales($from,$to);
            
            $getTotalAmt = round($data['total'],2);
            $totalCashAmt = round($data['paid'],2);
            $totalCreditAmt = $getTotalAmt - $totalCashAmt;
            $getTotalDiscAmt = 0;
            $getGrossAmt = $getTotalAmt - $getTotalDiscAmt; 
            
            $this->set(array('flagCash'=>$flagCash,'flagCredit'=>$flagCredit,'rgjaytotalCreditAmt'=>$totalCreditAmt,'rgjaytotalCashAmt'=>$totalCashAmt,
                'rgjaygetTotalAmt'=>$getTotalAmt,'rgjaygetTotalDiscAmt'=>$getTotalDiscAmt,'rgjaygetGrossAmt'=>$getGrossAmt));
        }
        
        
        public function pharmacySaleOfWclReport($from,$to){
            $this->uses = array('Billing','PharmacySalesBill');
            $this->loadModel('ServiceCategory'); 
            $pharmacyCategoryId=$this->ServiceCategory->getPharmacyId();//in case need of pharmacy category ID  
            $this->loadModel('TariffStandard');   
            $tariffCond['Patient.tariff_standard_id'] = $this->TariffStandard->getTariffStandardID('WCL'); 

            $this->Billing->bindModel(array('belongsTo'=>array(
                            'Patient'=>array(
                                    'foreignKey'=>false,
                                    'type'=>'inner',
                                    'conditions'=>array('Billing.patient_id = Patient.id')
                            )
                    ))); 
            $recordBilling = $this->Billing->find("all",array("fields"=>array("SUM(Billing.amount) as billingAmt","Billing.patient_id"),
                            "conditions"=>array("Billing.location_id" =>$this->Session->read('locationid'),
                                            'Billing.date <=' => $to, 'Billing.date >=' => $from,
                                            "Billing.payment_category"=>$pharmacyCategoryId,$tariffCond,
                                            "Billing.amount <>"=>0
                            ),"group"=>array('Billing.id')			
            ));
             
            $billongAmt=0;
            foreach($recordBilling as $keyBill=>$recordBillings){
                    $billongAmt=$billongAmt+$recordBillings[0]['billingAmt']; //for hope only
            }

            $this->PharmacySalesBill->unBindModel(array('belongsTo'=>array('Patient','Doctor','Initial'),'hasMany'=>array('PharmacySalesBillDetail')));
            $this->PharmacySalesBill->bindModel(array('belongsTo'=>array(
                            'Patient'=>array(
                                    'foreignKey'=>false,
                                    'type'=>'inner',
                                    'conditions'=>array('PharmacySalesBill.patient_id = Patient.id')
                            )
                    )),false);

            $record = $this->PharmacySalesBill->find("all",array("fields"=>array("PharmacySalesBill.*"),
                            "conditions"=>array("PharmacySalesBill.location_id" =>$this->Session->read('locationid'),
                                            'PharmacySalesBill.create_time <=' => $to, 'PharmacySalesBill.create_time >=' => $from,
                                            'PharmacySalesBill.payment_mode' => array("cash", "credit"),$tariffCond
                            ),"group"=>array('PharmacySalesBill.id')));
             
            $totalCreditAmt=0;
            $totalCashAmt=0;
            $getTotalAmt=0;
            $getTotalDiscAmt=0;
            $getGrossAmt=0;
            foreach($record as $key=>$value){
                    if(trim(strtolower($value['PharmacySalesBill']['payment_mode']))=='credit'){
                            $flagCredit=true;
                            if(empty($value['PharmacySalesBill']['paid_amnt'])){
                                $value['PharmacySalesBill']['paid_amnt']=$value['PharmacySalesBill']['total'];
                            }

                            $totalCreditAmt=$totalCreditAmt+$value['PharmacySalesBill']['paid_amnt'];

                    }else if(trim(strtolower($value['PharmacySalesBill']['payment_mode']))=='cash'){
                            $flagCash=true;
                            if(empty($value['PharmacySalesBill']['paid_amnt'])){
                                    $value['PharmacySalesBill']['paid_amnt']=$value['PharmacySalesBill']['total'];
                            }
                            $totalCashAmt=$totalCashAmt+$value['PharmacySalesBill']['paid_amnt'];
                    }
                    if(empty($value['PharmacySalesBill']['paid_amnt'])){
                            $value['PharmacySalesBill']['paid_amnt']=$value['PharmacySalesBill']['total'];
                    }
                    $getTotalAmt=$getTotalAmt+$value['PharmacySalesBill']['paid_amnt'];
                    $getTotalDiscAmt=$getTotalDiscAmt+$value['PharmacySalesBill']['discount'];
                    $getGrossAmt=$getGrossAmt+$value['PharmacySalesBill']['total'];
                    $salesBillsIDs[] = $value['PharmacySalesBill']['id'];
            }
            $getTotalDiscAmt = round(($getGrossAmt * 10)/100,2);
            $wclgetGrossAmt = $getGrossAmt - $getTotalDiscAmt;
            $totalCreditAmt1=$totalCreditAmt-$billongAmt; 
            $this->set(array('wclflagCash'=>$flagCash,'wclflagCredit'=>$flagCredit,'wcltotalCreditAmt'=>$totalCreditAmt1,'wcltotalCashAmt'=>$billongAmt,'wclgetTotalAmt'=>$getTotalAmt,'wclgetTotalDiscAmt'=>$getTotalDiscAmt,'wclgetGrossAmt'=>$wclgetGrossAmt));

        }


    //function to get the total income received for all admission type by Swapnil - 13.01.2016
    public function admin_total_receipt(){
    	$this->title_for_layout = __("Total Received");
    	$this->uses = array('VoucherLog','Patient','VoucherPayment','AccountReceipt');
    	$this->layout = "advance";
    	if(!empty($this->request->data)){ 
    		$condition['YEAR(VoucherLog.create_time)'] = $year = $this->request->data['VoucherLog']['year'];
			$condition['MONTH(VoucherLog.create_time)'] = $month = $this->request->data['VoucherLog']['month'];
    	}else{
			$condition['YEAR(VoucherLog.create_time)'] = $year = date("Y");
			$condition['MONTH(VoucherLog.create_time)'] = $month = date("m");
    	}

    	$this->VoucherLog->bindModel(array(
    		'belongsTo'=>array(
    			'Patient'=>array(
    				'foreignKey'=>'patient_id',
    				'recursive'=>'0'
    				),
    			'VoucherLogAlias'=>array(
    					'className'=>'VoucherLog',
		    			'foreignKey'=>false,
		    			'conditions'=>array(
		    				'VoucherLogAlias.patient_id = VoucherLog.patient_id')
	    			)
    			)
    		),false);
    	$admissionType = array("IPD","OPD","LAB","RAD");
    	$data = $this->VoucherLog->find('all',array(
    		'fields'=>array(
    			'SUM(VoucherLog.paid_amount) as total_amount',
    			'SUM(VoucherLogAlias.paid_amount) as ref_amount',
    			'Patient.admission_type'),
    		'conditions'=>array($condition,'Patient.is_deleted'=>'0','VoucherLog.is_deleted'=>'0',
    			'Patient.admission_type'=>$admissionType,'VoucherLog.voucher_type'=>'Receipt',
    			'VoucherLogAlias.voucher_type'=>'Payment','VoucherLogAlias.is_deleted'=>'0',
    			'VoucherLogAlias.type'=>'Refund'),
    		'group'=>array('Patient.admission_type')
    		));  

    	foreach ($data as $key => $value) {
    		$result[$value['Patient']['admission_type']] = $value[0]['total_amount'] - $value[0]['ref_amount'];
    	}
    	$this->set(compact(array('result','admissionType')));  
    	if(!empty($this->request->data['genrate_excel'])){ 
    		$this->generateExcelTotalReceipt($month,$year);
    	}
    }


    //function to get the head wise income of both private/Corporate patient of any admission type
    public function getTotalHeadReceived($admissionType,$month,$year){
    	$this->autoRender = false;
    	$this->layout = false;
    	if(!empty($admissionType)){
    		$this->uses = array('AccountReceipt','Patient','TariffStandard','VoucherPayment','VoucherLog');
    		$this->VoucherLog->bindModel(array(
	    		'belongsTo'=>array(
	    			'Patient'=>array(
	    				'foreignKey'=>'patient_id',
	    				'recursive'=>'0'
	    				),
	    			'TariffStandard'=>array(
	    				'foreignKey'=>false,
	    				'conditions'=>array(
	    					'Patient.tariff_standard_id = TariffStandard.id')
	    				),
	    			'VoucherLogAlias'=>array(
	    				'className'=>'VoucherLog',
		    			'foreignKey'=>false, 
		    			'conditions'=>array(
		    				'VoucherLogAlias.patient_id = VoucherLog.patient_id')
	    			)
    			), 
    		),false); 

    		$condition['YEAR(VoucherLog.create_time)'] = $year;
			$condition['MONTH(VoucherLog.create_time)'] = $month;

	    	$data = $this->VoucherLog->find('all',array(
	    		'fields'=>array(
	    			'SUM(VoucherLog.paid_amount) as total_amount',
	    			'SUM(VoucherLogAlias.paid_amount) as ref_amount',
	  
	    			'Patient.id, Patient.lookup_name,Patient.tariff_standard_id','TariffStandard.name'),
	    		'conditions'=>array($condition,'Patient.is_deleted'=>'0','VoucherLog.is_deleted'=>'0',
	    			'Patient.admission_type'=>$admissionType,'VoucherLog.voucher_type'=>'Receipt',
	    			'VoucherLogAlias.voucher_type'=>'Payment','VoucherLogAlias.is_deleted'=>'0','VoucherLogAlias.type'=>'Refund'),
	    		'group'=>array('Patient.id'/*,'Patient.tariff_standard_id'*/)
	    		));  
	    
	    	foreach ($data as $key => $value) { 
	    		$headResult[$value['TariffStandard']['name']][$key]['amount'] = $value[0]['total_amount'] - $value[0]['ref_amount'];
	    		$headResult[$value['TariffStandard']['name']][$key]['patient_name'] = $value['Patient']['lookup_name'];
	    		$totHead[$value['TariffStandard']['name']] = $totHead[$value['TariffStandard']['name']] + ($value[0]['total_amount'] - $value[0]['ref_amount']);
	    	}    
	    	$this->set(compact(array('privateCharges','headResult','totHead','corporateLists'))); 
    	}
    	$this->render('get_total_head_received');
    }


    //function to genrate excel of total receipt
    public function generateExcelTotalReceipt($month,$year){
    	$this->layout = false; 
    	//$this->autoRender = false;
    	$this->uses = array('AccountReceipt','Patient','TariffStandard');
		$this->AccountReceipt->bindModel(array(
    		'belongsTo'=>array(
    			'Patient'=>array(
    				'foreignKey'=>'patient_id',
    				'recursive'=>'0'
    				),
    			'TariffStandard'=>array(
    				'foreignKey'=>false,
    				'conditions'=>array(
    					'Patient.tariff_standard_id = TariffStandard.id'))
    			)
    		),false); 

		$condition['YEAR(AccountReceipt.date)'] = $year;
		$condition['MONTH(AccountReceipt.date)'] = $month; 
    	$headData = $this->AccountReceipt->find('all',array(
    		'fields'=>array(
    			'SUM(AccountReceipt.paid_amount) as total_amount','Patient.tariff_standard_id','Patient.admission_type','TariffStandard.name'),
    		'conditions'=>array($condition,'Patient.is_deleted'=>'0','AccountReceipt.is_deleted'=>'0',
    			'Patient.admission_type'=>array("IPD","OPD","LAB","RAD")),
    		'group'=>array('Patient.admission_type','Patient.tariff_standard_id')
    		));  
    	foreach ($headData as $key => $value) {
    		$headResult[$value['Patient']['admission_type']][$value['TariffStandard']['name']] = $value[0]['total_amount'];
    	}   
    	$this->set(compact(array('headResult')));
    	$this->render('total_receipt_excel',false);
    }
    
    function diagnosisReport(){
    	$this->uses = array('SnomedMappingMaster','Patient','Diagnosis');
    	$this->layout = 'advance';
    	$this->Patient->bindModel(array(
    			'belongsTo'=>array(
    				'Diagnosis'=>array('type'=>'inner','foreignKey'=>false,'conditions'=>array('Diagnosis.patient_id = Patient.id')),
    				'TariffStandard'=>array('type'=>'inner','foreignKey'=>false,'conditions'=>array('Patient.tariff_standard_id = TariffStandard.id'))
    			)
    	),false);
    	
    	
    	if(!empty($this->params->query)){
    		$condition['Diagnosis.ICD_code']=$this->params->query['ICD_code'];
    	
    	
	    	$diagData = $this->Patient->find('all',array(
	    			'fields'=>array('Patient.id','Patient.lookup_name','Patient.sex','Patient.admission_id','Patient.age','TariffStandard.name'),
	    			'conditions'=>array($condition,'Patient.is_deleted'=>'0'),
	    	));
	    	$this->set('diagData',$diagData);
    	}
    }    
    

    //function to get the opening and closing stock by Swapnil - 29.01.2016
    public function openingClosingStock(){
    	$this->layout = "advance";
    	$this->set('title_for_layout',__('Opening Closing Stock List'));
    	$this->uses = array('PharmacyItem','PharmacyItemRate','StoreLocation');
 
    	$this->PharmacyItem->hasMany = array();  
    	$this->PharmacyItem->hasOne = array();  
    	!empty($this->request->query)?$this->request->data = $this->request->query:'';
		
		$setFromDate = date("d/m/Y");
		$setToDate = date("d/m/Y"); 
		$fromDate = date("Y-m-d")." 00:00:00";	
		$toDate = date("Y-m-d")." 23:59:59"; 

		if(!empty($this->request->data)){  
			if($this->request->data['excel'] == "Generate Excel"){
				$productLists = $this->PharmacyItem->find('all',array(
		    		'fields'=>array('PharmacyItem.id','PharmacyItem.drug_id','PharmacyItem.name','PharmacyItem.pack', 'PharmacyItem.stock', 'PharmacyItem.loose_stock'),
		    		'conditions'=>array('PharmacyItem.is_deleted'=>'0',
		    			'OR'=>array('PharmacyItem.stock > 0','PharmacyItem.loose_stock > 0')),
		    		'group'=>array('PharmacyItem.id'),
		    		//'limit'=>'100'
		    		));
			}else{
				$this->paginate = array(
		    		'fields'=>array('PharmacyItem.id','PharmacyItem.drug_id','PharmacyItem.name','PharmacyItem.pack', 'PharmacyItem.stock', 'PharmacyItem.loose_stock'),
		    		'conditions'=>array('PharmacyItem.is_deleted'=>'0',
		    			'OR'=>array('PharmacyItem.stock > 0','PharmacyItem.loose_stock > 0')),
		    		'group'=>array('PharmacyItem.id'),
		    		'limit'=>Configure::read('number_of_rows') 
		    	);
		    	$productLists = $this->paginate('PharmacyItem');
			} 

			if(!empty($this->request->data['dateFrom'])) {
				$setFromDate = $this->request->data['dateFrom'];
				$fromDate = $this->DateFormat->formatDate2STDForReport($this->request->data['dateFrom'],Configure::read('date_format'))." 00:00:00";
			} 
			
			if(!empty($this->request->data['dateTo'])) {
				$setToDate = $this->request->data['dateTo'];
				$toDate = $this->DateFormat->formatDate2STDForReport($this->request->data['dateTo'],Configure::read('date_format'))." 23:59:59";
			} 

		}else{
			$this->paginate = array(
	    		'fields'=>array('PharmacyItem.id','PharmacyItem.drug_id','PharmacyItem.name','PharmacyItem.pack', 'PharmacyItem.stock', 'PharmacyItem.loose_stock'),
	    		'conditions'=>array('PharmacyItem.is_deleted'=>'0',
	    			'OR'=>array('PharmacyItem.stock > 0','PharmacyItem.loose_stock > 0')),
	    		'group'=>array('PharmacyItem.id'),
	    		'limit'=>Configure::read('number_of_rows') 
	    	);
	    	$productLists = $this->paginate('PharmacyItem');
		}

		//get pharmacy deaprtment
		$department = $this->StoreLocation->getIdbyCodeName(Configure::read('pharmacyCode'));  
		$conditions['PharmacyItem.location_id'] = $this->Session->read('locationid');

    	foreach ($productLists as $key => $value) {
    		$conditions['Product.id'] = $value['PharmacyItem']['drug_id'];
    		$displayArray[$key] = $this->getPharmacyStockRegister($conditions,$department);	
    		$sorted = $this->array_orderby($displayArray[$key], 'create_time', SORT_DESC);		//sort by date 
			
			$lastStock = $closingStock = ($value['PharmacyItem']['pack'] * $value['PharmacyItem']['stock']) + 
				$value['PharmacyItem']['loose_stock']; 
			 
			$inStore = array("GRN","INDENT","SALES RETURN","ADJUSTED ADD","ISSUED RETURNED");
			$outStore = array("SALES","ISSUED","ADJUSTED MINUS","RETURNED"); 

			foreach($sorted as $skey=>$val){
				$val['qty'] = $val['qty'] * $val['pack'];
				if(strtotime($val['create_time']) >= strtotime($toDate)){ 
					if(in_array($val['type'],$inStore)){
						$closingStock -= $val['qty'];
					}else if(in_array($val['type'],$outStore)){
						$closingStock += $val['qty'];
					}  
 				} 
			}

			$close = $closingStock;
			foreach($sorted as $mkey => $val){  
				$val['qty'] = $val['qty'] * $val['pack'];
				if(strtotime($val['create_time']) >= strtotime($fromDate) && strtotime($val['create_time']) <= strtotime($toDate)){
					$returnData[$mkey] = $val;    
					$returnData[$mkey]['closing_stock'] = $closingStock;
					if(in_array($val['type'],$inStore)){
						$closingStock = $closingStock - $val['qty'];
					}elseif(in_array($val['type'],$outStore)){
						$closingStock = $closingStock + $val['qty'];
					}
					//$openingStock = $returnData[$mkey]['opening_stock'] = $closingStock; 
				}
			} 
			$productLists[$key]['opening'] = $closingStock;
			$productLists[$key]['closing'] = $close; 
    	} 
    	$this->set('results',$productLists);
    	$this->set(compact(array('setFromDate','setToDate')));
    	if(!empty($this->request->data['excel']) && $this->request->data['excel'] == "Generate Excel"){
    		$this->layout = false;
    		echo "<script>parent.$('#busy-indicator').hide();</script>";
    		$this->set('escapeIndicator',true);
    		$this->render('opening_closing_stock_xls');
    	}
    }

    public function openingClosingStockXls(){

    	$productLists = $this->PharmacyItem->find('all',array(
			'fields'=>array('PharmacyItem.id','PharmacyItem.drug_id','PharmacyItem.name','PharmacyItem.pack', 'PharmacyItem.stock', 'PharmacyItem.loose_stock'),
			'conditions'=>array('PharmacyItem.is_deleted'=>'0',
				'OR'=>array('PharmacyItem.stock > 0','PharmacyItem.loose_stock > 0')),
			'group'=>array('PharmacyItem.id'),
			'limit'=>'100'
		));
    }
    /**
     * function to AttendanceReport
     * @author Mahalaxmi
     */
    public function attendanceReport($type=null){
    	$this->layout = 'advance';
    	$this->uses = array('DutyRoster','Location','City');
    
    	$this->Location->unBindModel(array('belongsTo' => array('State','City','Country')));
    	/*BOF-For Location Values*/
    	$locationsData = explode(',',$this->Session->read('Auth.User.other_location_id'));
    	$locationsDataForOther=$locationsData;
    	$locationsData[] = $this->Session->read('locationid');
    	//$locationsDataForOther[] = $this->Session->read('locationid');;
    	$locationsData = $this->Location->getLocAllId($locationsData,'withCorporate');
    
    	foreach($locationsData as $locationsDatas){
    		$locations[$locationsDatas['Location']['id']]=$locationsDatas['Location']['name'];
    		$locationsIdCityArr[$locationsDatas['Location']['city_id']]=$locationsDatas['Location']['city_id'];
    	}
    	/*EOF-For Location Values*/
    	$dataCities=$this->City->getCityListId($locationsIdCityArr);
    	$this->set(array('locations'=>$locations,'dataCities'=>$dataCities,'locationsIdCityArr'=>$locationsIdCityArr,'getLocName'=>$getLocName));
    
    	$conditions=array('DutyRoster.is_deleted'=>0);
    	if(!empty($this->params->query['from'])){
    		if(!empty($this->params->query['location_id'])){
    			$conditions['User.location_id']=$this->params->query['location_id'];
    		}else{
    			$locationsDataForOther=array_filter($locationsDataForOther);
    			$conditions['User.location_id']=$locationsDataForOther;
    		}
    	   if(!empty($this->params->query['userId'])){
    			$conditions['DutyRoster.user_id']=$this->params->query['userId'];
    		}
    
    		$getLocName=$this->Location->getLocListIdWithCorporate($this->params->query['location_id']);
    		$this->set(array('getLocName'=>$getLocName));
    		$from=$this->DateFormat->formatDate2STDForReport($this->params->query['from'],Configure::read('date_format'))." 00:00:00";
    		$to=$this->DateFormat->formatDate2STDForReport($this->params->query['to'],Configure::read('date_format'))." 23:59:59";
    		$conditions['DutyRoster.date >='] = $from;
    		$conditions['DutyRoster.date <='] = $to;
    
    		$this->DutyRoster->bindModel(array(
    				'belongsTo' => array(
    						'User'=>array('type'=>'INNER',"foreignKey"=>false, 'conditions'=>array('User.id = DutyRoster.user_id')),
    						'UserAlias'=>array("foreignKey"=>false,'className'=>'User', 'conditions'=>array('UserAlias.id = DutyRoster.created_by')),
    						'Location'=>array('type'=>'INNER',"foreignKey"=>false, 'conditions'=>array('Location.id = DutyRoster.location_id')),
    
    				)));
    		$dutyRosterData  = $this->DutyRoster->find('all',array('fields'=>array('DutyRoster.missed_punch','Location.name','DutyRoster.user_id','UserAlias.first_name','UserAlias.last_name','User.first_name','User.last_name','DutyRoster.date','DutyRoster.intime','DutyRoster.outime','User.location_id','DutyRoster.remark'),'conditions'=>$conditions,'order'=>array('DutyRoster.id')));
     		//EOF-For Detailed Report
    		$getAttendanceArr=array();
    		foreach($dutyRosterData as $dutyRosterDatas){
    			$getAttendanceArr[$dutyRosterDatas['User']['location_id']][]=$dutyRosterDatas;
    			//$time[$dutyRosterDatas['User']['location_id']][$dutyRosterDatas['DutyRoster']['user_id']] = $this->DutyRoster->getInOutTime($dutyRosterDatas['DutyRoster']['user_id'],$dutyRosterDatas['DutyRoster']['date'],$dutyRosterDatas['User']['location_id']);
    		}
    	}
    
    	$this->set(array('getAttendanceArr'=>$getAttendanceArr,'from'=>$from,'to'=>$to,'time'=>$time));
    	if($type=='excel'){
    		$this->autoRender = false;
    		$this->layout = false ;
    		$this->render('attendance_report_excel');
    	}
    }

    /** By Mrunal- To get monthly stock of all items **/
    public function all_stock_report(){

		$this->uses = array("StoreLocation","Location",'PharmacyItem');
		$this->layout="advance";
		
		$roleId = $this->Session->read('roleid');
		
		$returnArray = $this->StoreLocation->getAllLocationsArray($roleId);
		$this->set('department',$returnArray);
		
		$allStore = $this->StoreLocation->find('list',array('conditions'=>array('StoreLocation.is_deleted'=>0),'fields'=>array('StoreLocation.id','StoreLocation.code_name')));
		
		!empty($this->request->query)?$this->request->data = $this->request->query:'';
		
		if(!empty($this->request->data)){ 
			
			$department = $this->request->data['department'];  
			
			if(!empty($this->request->data['dateFrom'])) {
				$fromDate = $this->DateFormat->formatDate2STDForReport($this->request->data['dateFrom'],Configure::read('date_format'))." 00:00:00";
			}else{
				$fromDate = date("Y-m-d")." 00:00:00";	
			}
			
			if(!empty($this->request->data['dateTo'])) {
				$toDate = $this->DateFormat->formatDate2STDForReport($this->request->data['dateTo'],Configure::read('date_format'))." 23:59:59";
			}else{
				$toDate = date("Y-m-d")." 23:59:59";
			}
			if($department == ''){
				$department = 2; //Pharmacy
			}
			
			if(array_search(Configure::read('pharmacyCode'), $allStore) == $department ){
				//search from pharmacy  
				$openinDate = configure::read('opening_date');
				$displayArray = $this->getCompletePharmacyStock($openinDate,$fromDate,$department,'opening');  // get opening stock
				$dateArray = $this->getCompletePharmacyStock($fromDate,$toDate,$department,'dayclosing');	   // get closing stock
			} 
		//	$dateWiae = $this->array_orderby($dateArray, 'create_time', SORT_DESC);		//sort by date
			$sorted = $displayArray; 
			$inStore = array("GRN","INDENT","SALES RETURN","ADJUSTED ADD","ISSUED RETURNED");//
			$outStore = array("SALES","ISSUED","ADJUSTED MINUS","RETURNED","GRNRETURN");

			$closingStock[$key] = 0;
			//get sium of Opening stock upto fromdate
			foreach ($sorted as $key => $val) {

				if (in_array($val['type'],$inStore)) {
					$closingStock[$val['item_id']] = $closingStock[$val['item_id']] + $val['openingSum'];
				} else if (in_array($val['type'],$outStore)) { 
					$closingStock[$val['item_id']] = $closingStock[$val['item_id']] - $val['openingSum'];
				}
				$returnData[$val['item_id']]['opening_stock'] =  $closingStock[$val['item_id']];
			} 
			//*****Calculate closing Stock
			
			foreach ($dateArray as $key=> $val) {

				if (in_array($val['type'],$inStore)) {
					$closingStock[$val['item_id']] = $closingStock[$val['item_id']] + $val['qty']; 
				} else if (in_array($val['type'],$outStore)) {
					$closingStock[$val['item_id']] = $closingStock[$val['item_id']] - $val['qty']; 
				}
				$returnData[$val['item_id']]['closing_stock'] = $closingStock[$val['item_id']];
				$returnData[$val['item_id']]['name'] =  $val['name'];
			}  

			$this->set('record',array_reverse($returnData));  
			$this->set(array('thisData'=>$this->request->data,'to'=>$toDate,'from'=>$fromDate)); 
			//generate excel report
			if(!empty($this->request->data['excel'])){
				$this->render('stock_register_xls',false);
			}
		} 
	}//END of Function all_stock_repot

	public function getCompletePharmacyStock($openinDate,$fromDate,$department,$type){
		//GRN
		$purchaseList = $this->getPharmacyGRN($openinDate,$fromDate,$department,$type);
		$this->Product->unbindModel(array('belongsTo'=>array('PurchaseOrder','PurchaseOrderItem','InventorySupplier')));

		//GRN Return
		$purchaseReturList = $this->getCompPharmacyGRNReturn($openinDate,$fromDate,$department,$type);
		$this->Product->unbindModel(array('belongsTo'=>array('PurchaseOrder','PurchaseOrderItem','InventorySupplier')));
		
		//issued
		$issuedList = $this->getCompPharmacyIssued($openinDate,$fromDate,$department,null,$type);
		$this->Product->unbindModel(array('belongsTo'=>array('StoreRequisitionParticular','StoreRequisition','StoreLocation')));
		//for REquisitions
		/*$indentList = $this->getProductIssued($conditions,null,$department);
		$this->Product->unBindModel(array('belongsTo'=>array('StoreRequisitionParticular','StoreRequisition','StoreLocation')));*/

		//For Requisition Return
		$issueReturnedList = $this->getCompProductReturnList($openinDate,$fromDate,$department,null,$type);
		$this->Product->unbindModel(array('belongsTo'=>array('StoreRequisitionParticular','StoreRequisition','StoreLocation')));

		//FOR Pharmacy Sales
		$soldList = $this->getCompPharmacySoldProduct($openinDate,$fromDate,$type);
		$this->Product->unbindModel(array('belongsTo'=>array('PharmacyItem','PharmacySalesBillDetail','PharmacySalesBill','Patient')));

		//FOR Pharmacy Returns
		$returnList = $this->getCompPharmacyReturnProduct($openinDate,$fromDate,$type);
		$this->Product->unbindModel(array('belongsTo'=>array('PharmacyItem','InventoryPharmacySalesReturnsDetail','InventoryPharmacySalesReturn','Patient')));

		//adjusted surplus
		$adjustedSurplusList = $this->compAdjustedList($openinDate,$fromDate,$department,$type);
		$displayArray = array();
		$purchaseQty = 0; 
		
		
		foreach ($purchaseList as $key => $val) { 

			if ($type == 'dayclosing') {
				$qty = $val['PurchaseOrderItem']['qty'];
			} 
			if ($type == 'opening'){
				$totalQty = $val['0']['qty'];
			}
			if (!empty($qty) || !empty($totalQty)) { 
				$itemId = $val['PurchaseOrderItem']['product_id'];
				$displayArray[] = array(
						'item_id' => $itemId,
						'name' => $val['Product']['name'],
						'qty' => $qty,
						'openingStock' => $val['PharmacyItem']['opening_stock'],
						'openingSum' => $totalQty,
						'type' => "GRN",
						'create_time' =>$val['PurchaseOrderItem']['received_date']);
			}// END of If
		}// END of Purchaselist
		
		foreach ($purchaseReturList as $key => $val) { 
			
			if ($type == 'dayclosing') {
				$qty = $val['PurchaseReturn']['qty'];
			} 
			if ($type == 'opening') {
				$totalQty = $val['0']['qty'];
			}
			if (!empty($qty) || !empty($totalQty)) { //$valFirst['PurchaseOrderItem']['product_id']
				$itemId = $val['PurchaseReturn']['product_id'];
				$displayArray[] = array(
						'item_id' => $itemId,
						'name' => $val['Product']['name'],
						'qty' => $qty,
						'openingStock' => $val['PharmacyItem']['opening_stock'],
						'openingSum' => $totalQty,
						'type' => "GRNRETURN",
						'create_time' => $val['PurchaseReturn']['created_time']);
			}// END of If
		}// END of Purchaselist

		foreach ($issuedList as $key => $val) {

			if ($type == 'dayclosing') {
				$qty = $val['StoreRequisitionParticular']['qty'];
			} 
			if ($type == 'opening') {
				$totalQty = $val['0']['qty'];
			}
			if (!empty($qty) || !empty($totalQty)) {
				$displayArray[] = array(
						'item_id' => $val['Product']['id'],
						'name' => $val['Product']['name'],
						'qty' => $qty,
						'openingStock' => $val['PharmacyItem']['opening_stock'],
						'openingSum' => $totalQty,
						'type' => "ISSUED",
						'create_time' => $val['StoreRequisitionParticular']['modified'],
				);
			}
		}
		
		foreach ($issueReturnedList as $key => $val) {

			if ($type == 'dayclosing') {
				$qty = $val['StoreRequisitionParticular']['qty'];
			} 
			if ($type == 'opening') {
				$totalQty = $val['0']['qty'];
			}
			if (!empty($qty) || !empty($totalQty)) {
				$displayArray[] = array(
					'item_id' => $val['Product']['id'],
					'name' => $val['Product']['name'],
					'qty' => $qty,
					'openingStock' => $val['PharmacyItem']['opening_stock'],
					'openingSum' => $totalQty,
					'type' => "ISSUED RETURNED",// RETURNED
					'create_time' => $val['StoreRequisitionParticular']['returned_date'],
				);
			}
		}
	
		$soldQty = 0;
		foreach ($soldList as $key => $val) {
			
			if ($type == 'dayclosing') {
				$qty = $val['PharmacySalesBillDetail']['qty'];
			}
			if ($type == 'opening') {
				$totalQty = $val['0']['qty'];
			}
			if (!empty($qty) || !empty($totalQty)) {
				$itemId = $val['Product']['id'];
				$displayArray[] = array(
						'item_id' => $itemId,
						'name' => $val['Product']['name'],
						'qty' => $qty,
						'openingStock' => $val['PharmacyItem']['oprning_stock'],
						'openingSum' => $totalQty,
						'type' => "SALES",
						'create_time' => $val['PharmacySalesBill']['create_time'],
				);
			}
		}
	
		$returnQty = 0;
		foreach ($returnList as $key => $val) {
			
			if ($type == 'dayclosing') {
				$qty = $val['InventoryPharmacySalesReturnsDetail']['qty'];
			}
			if ($type == 'opening') {
				$totalQty = $val['0']['qty'];
			}
			if (!empty($qty) || !empty($totalQty)) {
				$itemId = $val['Product']['id'];
				$displayArray[] = array(
						'item_id' => $itemId,
						'name' => $val['Product']['name'],
						'qty' => $qty,
						'openingStock' => $val['PharmacyItem']['opening_stock'],
						'openingSum' => $totalQty,
						'type' => "SALES RETURN",
						'create_time' => $val['InventoryPharmacySalesReturn']['create_time'],
				);
			}
		}
	
		foreach ($adjustedSurplusList as $key => $val) {

			if ($type == 'dayclosing') {
				$qtyPlus = $val['StockAdjustment']['qtyPlus'];
				$qtyMins = $val['StockAdjustment']['qtyMi'];
			}
			if ($type == 'opening') {
				$totalPlus = $val['0']['qtyPlus'];
				$totalMins = $val['0']['qtyMi'];
			}
			
			if (!empty($qtyPlus) || !empty($totalPlus)) {
				$displayArray[] = array(
						'item_id' => $val['Product']['id'],
						'name' => $val['Product']['name'],
						'qty' => $qtyPlus,
						'openingStock' => $val['PharmacyItem']['opening_stock'],
						'openingSum' => $totalPlus,
						'type' => "ADJUSTED ADD",
						'create_time' => $val['StockAdjustment']['created'],
				);
			}
			
			if (!empty($qtyMins) || !empty($totalMins)) {
				$displayArray[] = array(
						'item_id' => $val['Product']['id'],
						'name' => $val['Product']['name'],
						'qty' => $qtyMins,
						'openingStock' => $val['PharmacyItem']['opening_stock'],
						'openingSum' => $totalMins,
						'type' => "ADJUSTED MINUS",
						'create_time' => $val['StockAdjustment']['created'],
				);
			}
		}
		return $displayArray;
	} //END of MAINE getCompletePharmacyStock function

	public function getCompPharmacyIssued($openinDate,$fromDate,$issued,$indent,$type) {
	
		$this->uses=array('PharmacyItem','Product','StoreRequisitionParticular','StoreRequisition','StoreLocation');
	
		if(!empty($indent)){
			$indentCond['StoreRequisition.requisition_for'] = $indent;
			$bindConditions[] = array('StoreRequisition.store_location_id = StoreLocation.id');
		}

		if(!empty($issued)){
			$indentCond['StoreRequisition.store_location_id'] = $issued;
			$bindConditions[] = array('StoreRequisition.requisition_for = StoreLocation.id');
		}

		$this->PharmacyItem->hasMany = array();
		$this->PharmacyItem->hasOne = array();
		
		$this->PharmacyItem->bindModel(array(
			'belongsTo'=>array(
					
				'Product'=>array(
						'foreignKey'=>false,
						'type'=>'inner',
						'conditions'=>'PharmacyItem.drug_id = Product.id'),
				
				'StoreRequisitionParticular'=>array(
						'foreignKey'=>false,
						'type'=>'INNER',
						'conditions'=>'StoreRequisitionParticular.purchase_order_item_id = PharmacyItem.id'),

				'StoreRequisition'=>array(
						'foreignKey'=>false,
						'type'=>'INNER',
						'conditions'=>'StoreRequisitionParticular.store_requisition_detail_id = StoreRequisition.id'),
		)));
	
		if ($type == 'opening') {
			$indentCond = array('AND'=>array('StoreRequisitionParticular.modified >='=>$openinDate),array('StoreRequisitionParticular.modified <'=>$fromDate));
			$group = array('StoreRequisitionParticular.item_id');
			$field = 'sum(StoreRequisitionParticular.issued_qty) as qty';
		}

		if ($type == 'dayclosing') {
			$indentCond['StoreRequisitionParticular.modified between ? and ?'] =  array($openinDate,$fromDate);  
			$field = '(StoreRequisitionParticular.issued_qty) as qty';
		}
		$indentData = $this->PharmacyItem->find('all',array('fields'=>array('Product.name','Product.id','PharmacyItem.opening_stock','StoreRequisitionParticular.id','StoreRequisitionParticular.item_id','StoreRequisitionParticular.modified','StoreRequisition.id','StoreRequisition.store_location_id',$field),
				'conditions'=>$indentCond,
				'group'=>$group
		));
		return $indentData;
	}//END of getCompPharmacyIssued

	public function getCompProductReturnList($openinDate,$fromDate,$issued,$indent,$type) {
	
		$this->uses=array('PharmacyItem','StoreRequisitionParticular','StoreRequisition','StoreLocation');
	
		if(!empty($indent)){
			$indentCond['StoreRequisition.requisition_for'] = $indent;
		}
		if(!empty($issued)){
			$indentCond['StoreRequisition.store_location_id'] = $issued;
		}

		$this->PharmacyItem->hasMany = array();
		$this->PharmacyItem->hasOne = array();
	
		$this->PharmacyItem->bindModel(array(
				'belongsTo'=>array(
	
					'Product'=>array(
								'foreignKey'=>false,
								'type'=>'inner',
								'conditions'=>'PharmacyItem.drug_id = Product.id'),

					'StoreRequisitionParticular'=>array(
							'foreignKey'=>false,
							'type'=>'INNER',
							'conditions'=>'StoreRequisitionParticular.purchase_order_item_id = PharmacyItem.id'),

					'StoreRequisition'=>array(
							'foreignKey'=>false,
							'type'=>'INNER',
							'conditions'=>'StoreRequisitionParticular.store_requisition_detail_id = StoreRequisition.id'),
		)));

		if ($type == 'opening') {
			$indentCond = array('AND'=>array('StoreRequisitionParticular.returned_date >='=>$openinDate),array('StoreRequisitionParticular.returned_date <'=>$fromDate));
			$group = array('StoreRequisitionParticular.item_id');
			$field = 'sum(StoreRequisitionParticular.returned_qty) as qty';
		}

		if ($type == 'dayclosing') {
			$indentCond['StoreRequisitionParticular.returned_date between ? and ?'] =  array($openinDate,$fromDate);  
			$field = '(StoreRequisitionParticular.returned_qty) as qty';
		}
	
		$indentData = $this->PharmacyItem->find('all',array('fields'=>array('Product.id','Product.name','PharmacyItem.opening_stock',$field),
				'conditions'=> $indentCond,
				'group'=> $group
		));
		return $indentData;
	}//END of getCompProductReturnList

	public function getCompPharmacySoldProduct($openinDate,$fromDate,$type){
	
		$this->uses=array('Product','PharmacyItem','PharmacySalesBillDetail','PharmacySalesBill','Patient');
			
		$this->Product->bindModel(array(
				'belongsTo'=>array(
	
						'PharmacyItem'=>array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>'PharmacyItem.drug_id = Product.id'),
	
						'PharmacySalesBillDetail'=>array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>array('PharmacySalesBillDetail.item_id = PharmacyItem.id')),
						
						'PharmacySalesBill'=>array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>array('PharmacySalesBillDetail.pharmacy_sales_bill_id = PharmacySalesBill.id')),

				)));
		$cond['PharmacySalesBill.is_deleted'] = 0;

		if($type == 'opening'){
			$cond = array('AND'=>array('PharmacySalesBill.create_time >='=>$openinDate),array('PharmacySalesBill.create_time <'=>$fromDate));
			$group = array('PharmacySalesBillDetail.item_id');
			$field = 'sum(PharmacySalesBillDetail.qty) as qty';
		}
		if($type == 'dayclosing'){
			$cond = array('PharmacySalesBill.create_time BETWEEN ? AND ?'=>array($openinDate,$fromDate));
			$field = '(PharmacySalesBillDetail.qty) as qty';
		}

		$soldRecord = $this->Product->find('all',array('fields'=>array('Product.name','Product.id','PharmacySalesBillDetail.item_id','PharmacySalesBill.create_time',$field),
			'conditions'=>$cond,'group'=>$group));

		return $soldRecord;
	}//end of getCompPharmacySoldProduct function

	public function getCompPharmacyReturnProduct($openinDate,$fromDate,$type){
	
		$this->uses=array('Product','PharmacyItem','InventoryPharmacySalesReturnsDetail','InventoryPharmacySalesReturn','Patient');
	
		$this->Product->bindModel(array(
				'belongsTo'=>array(
	
					'PharmacyItem'=>array(
							'foreignKey'=>false,
							'type'=>'INNER',
							'conditions'=>'PharmacyItem.drug_id = Product.id'),
						
					'InventoryPharmacySalesReturnsDetail'=>array(
							'foreignKey'=>false,
							'type'=>'INNER',
							'conditions'=>array('InventoryPharmacySalesReturnsDetail.item_id = PharmacyItem.id')),

					'InventoryPharmacySalesReturn'=>array(
							'foreignKey'=>false,
							'type'=>'INNER',
							'conditions'=>array('InventoryPharmacySalesReturnsDetail.inventory_pharmacy_sales_return_id = InventoryPharmacySalesReturn.id')),
		)));
		
		$cond['InventoryPharmacySalesReturn.is_deleted']=0;
		if ($type == 'opening') {
			$cond = array('AND'=>array('InventoryPharmacySalesReturn.create_time >='=>$openinDate),array('InventoryPharmacySalesReturn.create_time <'=>$fromDate));
			$group = array('InventoryPharmacySalesReturnsDetail.item_id');
			$field = 'sum(InventoryPharmacySalesReturnsDetail.qty) as qty';
		}
		if ($type == 'dayclosing') {
			$cond = array('InventoryPharmacySalesReturn.create_time BETWEEN ? AND ?'=>array($openinDate,$fromDate));
			$field = '(InventoryPharmacySalesReturnsDetail.qty) as qty';
		}

		$returnRecord = $this->Product->find('all',array('fields'=>array('Product.name','Product.id','PharmacyItem.opening_stock','InventoryPharmacySalesReturnsDetail.item_id','InventoryPharmacySalesReturn.create_time',$field),
				'conditions'=>$cond,'group'=>$group));
		return $returnRecord;
	}// END of getCompPharmacyReturnProduct function

	public function compAdjustedList($openinDate,$fromDate,$department,$type) {
		$this->uses = array("StockAdjustment","Product","User",'PharmacyItem');
		$cond = array();
		//$cond['StockAdjustment.product_id'] = $conditions['Product.id'];
		
		/*if($type == "surplus"){
			$cond[] = 'StockAdjustment.sur_plus IS NOT NULL';
		}else{
			$cond[] = 'StockAdjustment.sur_minus IS NOT NULL';
		}*/
		$this->StockAdjustment->bindModel(array('belongsTo'=>array(
				'Product'=>array('foreignKey'=>'product_id'),
				'PharmacyItem'=>array('foreignKey'=>false,'conditions'=>array('Product.id = PharmacyItem.drug_id')),
				'User'=>array('foreignKey'=>'created_by','fields'=>array('User.first_name','User.last_name')))));

		$cond['StockAdjustment.department_id'] = $department;

		if ($type == 'opening') {
			$cond = array('AND'=>array('StockAdjustment.created >='=>$openinDate),array('StockAdjustment.created <'=>$fromDate));
			$group = array('StockAdjustment.product_id');
			$field = 'sum(StockAdjustment.sur_plus) as qtyPlus'.','.'sum(StockAdjustment.sur_minus) as qtyMi';
		}
		if ($type == 'dayclosing') {
			$cond = array('StockAdjustment.created BETWEEN ? AND ?'=>array($openinDate,$fromDate));
			$field = '(StockAdjustment.sur_minus) as qtyMi'.','.'(StockAdjustment.sur_plus) as qtyPlus';
		}

		$data = $this->StockAdjustment->find('all',array('fields'=>array('Product.name','Product.id','PharmacyItem.opening_stock','StockAdjustment.product_id','StockAdjustment.created',$field),
			'conditions'=>$cond,'group'=>$group));
		
		return $data;
	}//END compAdjustedList

	//function to get the GRN returns of any pharmacy 
	public function getCompPharmacyGRNReturn($openinDate,$fromDate,$department,$type) {
	
		$this->uses=array('Product','PurchaseOrder','PurchaseOrderItem','InventorySupplier');
	
		$this->Product->bindModel(array(
				'belongsTo'=>array(
	
						'PurchaseReturn'=>array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>'PurchaseReturn.product_id = Product.id'),

						'PharmacyItem'=>array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>'PharmacyItem.drug_id = Product.id'),

						'PurchaseOrder'=>array(
								'foreignKey'=>false,
								'type'=>'INNER',
								'conditions'=>array('PurchaseReturn.purchase_order_id = PurchaseOrder.id')),
		)));
		$cond['PurchaseOrder.order_for'] = $department;
		if ($type == 'opening') {
			$cond = array('AND'=>array('PurchaseReturn.created_time >='=>$openinDate),array('PurchaseReturn.created_time <'=>$fromDate));
			$group = array('PurchaseReturn.product_id');
			$field = 'sum(PurchaseReturn.return_quantity) as qty';
		}
		if ($type == 'dayclosing') {
			$cond = array('PurchaseReturn.created_time BETWEEN ? AND ?'=>array($openinDate,$fromDate));
			$field = '(PurchaseReturn.return_quantity) as qty';
		}
		
		//$cond['PurchaseOrder.is_deleted'] = 0;
		$purchaseReturn = $this->Product->find('all',array('fields'=>array('Product.name','PurchaseReturn.product_id','PharmacyItem.opening_stock','PharmacyItem.opening_stock','PurchaseReturn.created_time',$field),
				'conditions' => $cond,
				'group' => $group,
				//'order'=>array('PurchaseOrderItem.received_date'=>'DESC')
		));

		return $purchaseReturn; 
	}// END of getCompPharmacyGRNReturn function

	function getRegionWisePatientList($type){
		$this->layout = 'advance';
		$this->uses=array('Person','User');

		if($this->params->query['from_date']){
			$fromDate = $this->DateFormat->formatDate2STDForReport($this->params->query['from_date'],Configure::read('date_format'))." 00:00:00";
			
		}else{
			$fromDate = date('Y-m-d')." 00:00:00";
		}

		if($this->params->query['to_date']){
			$toDate = $this->DateFormat->formatDate2STDForReport($this->params->query['to_date'],Configure::read('date_format'))." 23:59:59";
		}else{
			$toDate = date('Y-m-d')." 23:59:59";
		}

		if($this->params->query['city']){
			$conditions['Person.city'] = $this->params->query['city'];
		}
		if($this->params->query['state_id']){
			$conditions['Person.state'] = $this->params->query['state_id'];
		}

		if($this->params->query['doctor_id']){
			$conditions['Patient.doctor_id'] = $this->params->query['doctor_id'];
		}

		if($this->params->query['admission_type']){
			$conditions['Patient.admission_type'] = $this->params->query['admission_type'];
		}


		$this->Person->bindModel(array(
				'belongsTo'=>array(
						'Patient'=>array('foreignKey'=>false,'conditions'=>array("Person.id=Patient.person_id")),
						'User'=>array('foreignKey'=>false,'conditions'=>array("User.id=Patient.doctor_id")),
						'Diagnosis'=>array('foreignKey'=>false,'conditions'=>array("Patient.id=Diagnosis.patient_id")),
						'State'=>array('foreignKey'=>false,'conditions'=>array("Person.state=State.id"))
				)));

	

		$conditions['Person.create_time BETWEEN ? AND ?'] = array($fromDate,$toDate);
		$regionData  = $this->Person->find('all',array('fields'=>array('Person.id','Person.mobile','Person.age','Person.sex','Person.plot_no','Person.city','Person.district','State.name','Patient.lookup_name','Patient.admission_id',
					'Patient.patient_id','Patient.admission_type','Diagnosis.final_diagnosis','User.first_name','User.last_name'),'conditions'=>array($conditions,'Person.is_deleted'=>0),'group'=>array('Person.id')));

		$doctorList = $this->User->getAllDoctorList();


	 	$this->set(array('regionData'=>$regionData,'doctorList'=>$doctorList));

	 	if($type=='excel'){ 
 				$this->set(array('type'=>$type,'filename'=>'Region Wise Patient List - ')) ;
	 			$this->render('get_region_wise_patient_list','excel');
		 }

	}

	public function surgery_report($type=null){
		
		$this->uses = array('Surgery','OptAppointment','Location','Department','DoctorProfile', 'Doctor','User');
		$this->layout = 'advance' ;
		
		if($this->params->query['from_date']){
			$fromDate = $this->DateFormat->formatDate2STDForReport($this->params->query['from_date'],Configure::read('date_format'))." 00:00:00";
			
		}else{
			$fromDate = "2023-04-01 00:00:00";
		}

		if($this->params->query['to_date']){
			$toDate = $this->DateFormat->formatDate2STDForReport($this->params->query['to_date'],Configure::read('date_format'))." 23:59:59";
		}else{
			$toDate = date('Y-m-d')." 23:59:59";
		}

		if($this->params->query['internal_surgery_id']){
			$conditions['OptAppointment.internal_surgery_id'] = $this->params->query['internal_surgery_id'];
		}
		if($this->params->query['surgery_for_billing_id']){
			$conditions['OptAppointment.surgery_id'] = $this->params->query['surgery_for_billing_id'];
		}

		
            // 		$conditions['OptAppointment.schedule_date BETWEEN ? AND ?'] = array($fromDate,$toDate);
            	$conditions['OptAppointment.schedule_date BETWEEN ? AND ?'] = array($fromDate, $toDate);
            $this->OptAppointment->unbindModel(array('belongsTo' => array('Initial', 'Doctor', 'Patient')));
            $this->OptAppointment->bindModel(array(
                'belongsTo' => array(
                    'Patient' => array('type' => 'INNER', 'foreignKey' => false, 'conditions' => array('Patient.id=OptAppointment.patient_id')),
                    'Person' => array('foreignKey' => false, 'conditions' => array('Person.id=Patient.person_id')),
                    'PatientInitial' => array('foreignKey' => false, 'conditions' => array('PatientInitial.id =Person.initial_id')),
                    'User' => array('foreignKey' => false, 'conditions' => array('User.id = DoctorProfile.user_id')),
                    'Initial' => array('foreignKey' => false, 'conditions' => array('Initial.id =User.initial_id')),
                    'Department' => array('foreignKey' => false, 'conditions' => array('Department.id = OptAppointment.department_id')) // Department bind kiya gaya
                )
            ), false);
            
            $record = $this->OptAppointment->find('all', array(
                'order' => array('OptAppointment.starttime' => 'ASC'),
                'conditions' => $conditions,
                'fields' => array(
                    'Patient.id', 'Patient.form_received_on', 'Patient.admission_id', 'Patient.lookup_name', 
                    'Patient.age', 'Patient.sex', 'PatientInitial.name', 'Initial.name', 'Surgery.name', 
                    'OptAppointment.id', 'OptAppointment.operation_type', 'OptAppointment.starttime', 'OptAppointment.endtime','OptAppointment.anaesthesia', 
                    'OptAppointment.ot_in_date', 'OptAppointment.out_date', 'OptAppointment.procedure_complete', 
                    'DoctorProfile.doctor_name', 'Opt.name', 'TariffList.name', 'OptAppointment.schedule_date', 
                    'OptAppointment.description', 'OptAppointment.department_id', 'Department.name' // Department.name ko fetch kiya gaya
                )
            ));

// 		debug($record);
		
		
		//get department list //
		$departmentList = $this->Department->find('list', array('fields' => array('Department.id', 'Department.name'), 'conditions' => array('Department.location_id' => $this->Session->read('locationid'), 'Department.is_active' => 1)));
		$this->set( array('departmentList'=>$departmentList,'record'=>$record));

		if($type=='excel'){ 
 				$this->set(array('type'=>$type,'filename'=>'Surgery Report - ')) ;
	 			$this->render('surgery_report','excel');
		 }
	}


	public function police_camp_report($type=null){
		
		$this->uses = array('OpdInvoice');
		$this->layout = 'advance' ;
		
		if($this->params->query['from_date']){
			$fromDate = $this->DateFormat->formatDate2STDForReport($this->params->query['from_date'],Configure::read('date_format'))." 00:00:00";
			
		}else{
			$fromDate = date('Y-m-d')." 00:00:00";
		}

		if($this->params->query['to_date']){
			$toDate = $this->DateFormat->formatDate2STDForReport($this->params->query['to_date'],Configure::read('date_format'))." 23:59:59";
		}else{
			$toDate = date('Y-m-d')." 23:59:59";
		}

		
		$conditions['OpdInvoice.date BETWEEN ? AND ?'] = array($fromDate,$toDate);
		
		$this->OpdInvoice->bindModel(array(
				'belongsTo' => array(
						'Patient' =>array('type'=>'INNER','foreignKey' => false,'conditions'=>array('Patient.id=OpdInvoice.patient_id')),


				)),false);
		$record = $this->OpdInvoice->find('all',array('order'=>array('OpdInvoice.bill_number' => 'ASC'),'conditions'=>$conditions, 'fields' => array('Patient.id', 'Patient.form_received_on', 'Patient.name_police_station', 'Patient.lookup_name', 'Patient.age', 'Patient.sex','OpdInvoice.*')));

			
		#debug($record);
		
		
		
		$this->set( array('record'=>$record));

		if($type=='excel'){ 
 				$this->set(array('type'=>$type,'filename'=>'Police Camp Report - ')) ;
	 			$this->render('police_camp_report','excel');
		 }
	}

	function billing_surgery_report($type=null){

		$this->uses = array('ServiceBill');
		$this->layout = 'advance' ;
		
		if($this->params->query['from_date']){
			$fromDate = $this->DateFormat->formatDate2STDForReport($this->params->query['from_date'],Configure::read('date_format'))." 00:00:00";
			
		}else{
			//$fromDate = date('Y-m-d')." 00:00:00";
			$fromDate = "2023-04-01 00:00:00";
		}

		if($this->params->query['to_date']){
			$toDate = $this->DateFormat->formatDate2STDForReport($this->params->query['to_date'],Configure::read('date_format'))." 23:59:59";
		}else{
			$toDate = date('Y-m-d')." 23:59:59";
		}

		if($this->params->query['internal_surgery_id']){
			$conditions['ServiceBill.tariff_list_id'] = $this->params->query['internal_surgery_id'];
		}

		$conditions['ServiceBill.service_id'] = 32;
		$conditions['ServiceBill.date BETWEEN ? AND ?'] = array($fromDate,$toDate);
		
		$this->ServiceBill->bindModel(array(
				'belongsTo' => array(
						'Patient' =>array('type'=>'INNER','foreignKey' => false,'conditions'=>array('Patient.id=ServiceBill.patient_id')),
						'TariffList' =>array('type'=>'INNER','foreignKey' => false,'conditions'=>array('TariffList.id=ServiceBill.tariff_list_id')),


				)),false);
		$record = $this->ServiceBill->find('all',array('order'=>array('ServiceBill.date' => 'ASC'),'conditions'=>$conditions, 'fields' => array('Patient.id', 'Patient.form_received_on', 'Patient.admission_id','Patient.lookup_name', 'Patient.age', 'Patient.sex','TariffList.name','ServiceBill.date')));

			
		#debug($record);
		
		
		
		$this->set( array('record'=>$record));

		if($type=='excel'){ 
 				$this->set(array('type'=>$type,'filename'=>'Billing Surgery Report - ')) ;
	 			$this->render('billing_surgery_report','excel');
		 }

	}

	public function opd_corporate_report($type=null){
		
		$this->uses = array('FinalBilling','Patient','Billing');
		$this->layout = 'advance' ;
		
		if($this->params->query['from_date']){
			$fromDate = $this->DateFormat->formatDate2STDForReport($this->params->query['from_date'],Configure::read('date_format'))." 00:00:00";
			
		}else{
			$fromDate = date('Y-m-d')." 00:00:00";
		}

		if($this->params->query['to_date']){
			$toDate = $this->DateFormat->formatDate2STDForReport($this->params->query['to_date'],Configure::read('date_format'))." 23:59:59";
		}else{
			$toDate = date('Y-m-d')." 23:59:59";
		}

		
		$conditions['Patient.form_received_on BETWEEN ? AND ?'] = array($fromDate,$toDate);
		$conditions['Patient.tariff_standard_id NOT'] = 7;
		$conditions['Patient.admission_type NOT'] = 'IPD';
		
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'FinalBilling' =>array('type'=>'INNER','foreignKey' => false,'conditions'=>array('Patient.id=FinalBilling.patient_id')),
						'TariffStandard' =>array('type'=>'INNER','foreignKey' => false,'conditions'=>array('TariffStandard.id=Patient.tariff_standard_id')),


				)),false);
		$record = $this->Patient->find('all',array('order'=>array('Patient.form_received_on' => 'ASC'),'conditions'=>$conditions, 'fields' => array('Patient.id', 'Patient.form_received_on', 'Patient.lookup_name', 'TariffStandard.name','FinalBilling.hospital_invoice_amount','FinalBilling.dr_claim_date','Patient.admission_type')));

		foreach ($record as $key=>$patientData){
			$record[$key]['total_amount'] = $this->Billing->getPatientTotalBill($patientData['Patient']['id'],$patientData['Patient']['admission_type']);
				
			
		}

		
		
		$this->set( array('record'=>$record));

		if($type=='excel'){ 
 				$this->set(array('type'=>$type,'filename'=>'OPD Corporate Report - ')) ;
	 			$this->render('opd_corporate_report','excel');
		 }
	}

	public function ipd_corporate_report($type=null){
		
		$this->uses = array('FinalBilling','Patient','Billing');
		$this->layout = 'advance' ;
		
		if($this->params->query['from_date']){
			$fromDate = $this->DateFormat->formatDate2STDForReport($this->params->query['from_date'],Configure::read('date_format'))." 00:00:00";
			
		}else{
			$fromDate = date('Y-m-d')." 00:00:00";
		}

		if($this->params->query['to_date']){
			$toDate = $this->DateFormat->formatDate2STDForReport($this->params->query['to_date'],Configure::read('date_format'))." 23:59:59";
		}else{
			$toDate = date('Y-m-d')." 23:59:59";
		}

		
		$conditions['Patient.form_received_on BETWEEN ? AND ?'] = array($fromDate,$toDate);
		$conditions['Patient.tariff_standard_id NOT'] = 7;
		$conditions['Patient.admission_type'] = 'IPD';
		
		$this->Patient->bindModel(array(
				'belongsTo' => array(
						'FinalBilling' =>array('type'=>'INNER','foreignKey' => false,'conditions'=>array('Patient.id=FinalBilling.patient_id')),
						'TariffStandard' =>array('type'=>'INNER','foreignKey' => false,'conditions'=>array('TariffStandard.id=Patient.tariff_standard_id')),


				)),false);

		$record = $this->Patient->find('all',array('order'=>array('Patient.form_received_on' => 'ASC'),'conditions'=>$conditions, 'fields' => array('Patient.id', 'Patient.form_received_on', 'Patient.lookup_name', 'TariffStandard.name','FinalBilling.hospital_invoice_amount','FinalBilling.dr_claim_date','Patient.admission_type')));

		foreach ($record as $key=>$patientData){
			$record[$key]['total_amount'] = $this->Billing->getPatientTotalBill($patientData['Patient']['id'],$patientData['Patient']['admission_type']);
				
			
		}

			
		#debug($record);
		
		
		
		$this->set( array('record'=>$record));

		if($type=='excel'){ 
 				$this->set(array('type'=>$type,'filename'=>'IPD Corporate Report - ')) ;
	 			$this->render('ipd_corporate_report','excel');
		 }
	}
	
// 	amount_paid_doctors doctor_id admission_type
// 		public function amount_paid_doctors($type=null){
// 		$this->uses = array('FinalBilling','Patient','Billing','Person');
// 		$this->layout = 'advance' ;
		
// 		if($this->params->query['from_date']){
// 			$fromDate = $this->DateFormat->formatDate2STDForReport($this->params->query['from_date'],Configure::read('date_format'))." 00:00:00";
			
// 		}else{
// 			$fromDate = date('Y-m-d')." 00:00:00";
// 		}

// 		if($this->params->query['to_date']){
// 			$toDate = $this->DateFormat->formatDate2STDForReport($this->params->query['to_date'],Configure::read('date_format'))." 23:59:59";
// 		}else{
// 			$toDate = date('Y-m-d')." 23:59:59";
// 		}

		
// 		$conditions['Patient.form_received_on BETWEEN ? AND ?'] = array($fromDate,$toDate);
// 		$conditions['Patient.tariff_standard_id NOT'] = 7;
// 		$conditions['Patient.admission_type'] = 'IPD';
		
// 		$this->Patient->bindModel(array(
// 				'belongsTo' => array(
// 						'FinalBilling' =>array('type'=>'INNER','foreignKey' => false,'conditions'=>array('Patient.id=FinalBilling.patient_id')),
// 						'TariffStandard' =>array('type'=>'INNER','foreignKey' => false,'conditions'=>array('TariffStandard.id=Patient.tariff_standard_id')),
// 				)),false);

// 		$record = $this->Patient->find('all',array('order'=>array('Patient.form_received_on' => 'ASC'),'conditions'=>$conditions, 'fields' => array('Patient.id', 'Patient.form_received_on', 'Patient.lookup_name', 'TariffStandard.name','FinalBilling.hospital_invoice_amount','FinalBilling.dr_claim_date','Patient.admission_type')));
// 		foreach ($record as $key=>$patientData){
// 			$record[$key]['total_amount'] = $this->Billing->getPatientTotalBill($patientData['Patient']['id'],$patientData['Patient']['admission_type']);
// 		}
// 		$this->set( array('record'=>$record));

// 		if($type=='excel'){ 
//  				$this->set(array('type'=>$type,'filename'=>'IPD Corporate Report - ')) ;
// 	 			$this->render('ipd_corporate_report','excel');
// 		 }
// 	}
public function amount_paid_doctors() {
    $this->uses = array('Patient', 'DoctorProfile'); // Required models
    $this->layout = 'advance'; // Layout setup
    
    // Fetch date range from query params or set default to today
    if ($this->params->query['from_date']) {
        $fromDate = $this->DateFormat->formatDate2STDForReport($this->params->query['from_date'], Configure::read('date_format')) . " 00:00:00";
    } else {
        $fromDate = date('Y-m-d') . " 00:00:00";
    }

    if ($this->params->query['to_date']) {
        $toDate = $this->DateFormat->formatDate2STDForReport($this->params->query['to_date'], Configure::read('date_format')) . " 23:59:59";
    } else {
        $toDate = date('Y-m-d') . " 23:59:59";
    }

    // Define conditions
    $conditions['Patient.create_time BETWEEN ? AND ?'] = array($fromDate, $toDate);
    
    // Bind DoctorProfile model to fetch doctor names
    $this->Patient->bindModel(array(
        'belongsTo' => array(
            'DoctorProfile' => array(
                'type' => 'INNER',
                'foreignKey' => false,
                'conditions' => array('DoctorProfile.id = Patient.doctor_id'),
            ),
        ),
    ), false);
// debug($conditions);
    // Find patient data along with doctor names
    $record = $this->Patient->find('all', array(
        'order' => array('Patient.create_time' => 'ASC'),
        'conditions' => $conditions,
        'fields' => array(
            'Patient.id',
            'Patient.lookup_name',
            'Patient.admission_type',
            'DoctorProfile.first_name', // Fetch doctor name
            'DoctorProfile.last_name'
        ),
    ));
// debug($record);exit;
    // Pass data to view
    $this->set(array('record' => $record));
}

 }

?>

